var searchIndex = JSON.parse('{\
"ads1x1x":{"doc":"This is a platform-agnostic Rust driver for the ADS1013, …","t":"NNDNEEEEEEENNNNNIEQNENNNNENNNNNNENNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLL","n":["ActiveHigh","ActiveLow","Ads1x1x","Alternative","ChannelSelection","ComparatorLatching","ComparatorMode","ComparatorPolarity","ComparatorQueue","DataRate12Bit","DataRate16Bit","Default","DifferentialA0A1","DifferentialA0A3","DifferentialA1A3","DifferentialA2A3","DynamicOneShot","Error","Error","Four","FullScaleRange","I2C","I2C","InvalidInputData","Latching","ModeChangeError","Nonlatching","One","SingleA0","SingleA1","SingleA2","SingleA3","SlaveAddr","Sps128","Sps128","Sps16","Sps1600","Sps2400","Sps250","Sps250","Sps32","Sps3300","Sps475","Sps490","Sps64","Sps8","Sps860","Sps920","Traditional","Two","Window","Within0_256V","Within0_512V","Within1_024V","Within2_048V","Within4_096V","Within6_144V","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","destroy_ads1013","destroy_ads1014","destroy_ads1015","destroy_ads1113","destroy_ads1114","destroy_ads1115","disable_comparator","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into_continuous","into_one_shot","is_measurement_in_progress","mode","new_ads1013","new_ads1014","new_ads1015","new_ads1113","new_ads1114","new_ads1115","new_gnd","new_scl","new_sda","new_vdd","read","read","read","read","reset_internal_driver_state","select_channel","set_comparator_latching","set_comparator_mode","set_comparator_polarity","set_comparator_queue","set_data_rate","set_data_rate","set_full_scale_range","set_high_threshold_raw","set_low_threshold_raw","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_alert_rdy_pin_as_ready","DifferentialA0A1","DifferentialA0A3","DifferentialA1A3","DifferentialA2A3","SingleA0","SingleA1","SingleA2","SingleA3","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Continuous","OneShot","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"ads1x1x"],[228,"ads1x1x::channel"],[312,"ads1x1x::mode"]],"d":["Active high","Active low (default)","ADS1x1x ADC driver","Alternative slave address using the provided values for …","ADC input channel selection","Comparator polarity (only for ADS1x14, ADS1x15)","Comparator mode (only for ADS1x14, ADS1x15)","Comparator polarity (only for ADS1x14, ADS1x15)","Comparator alert queue (only for ADS1x14, ADS1x15)","Data rate for ADS1013, ADS1014, ADS1015","Data rate for ADS1113, ADS1114, ADS1115","Default slave address","Measure signal on input channel 0 differentially to signal …","Measure signal on input channel 0 differentially to signal …","Measure signal on input channel 1 differentially to signal …","Measure signal on input channel 2 differentially to signal …","Multi channel One-shot ADC","Errors in this crate","Error type","Activate comparator and assert after four consecutive …","Full-scale range configuration for the programmable gain …","I²C bus error while changing mode.","I²C bus error","Invalid input data provided","Latching","Error type for mode changes.","Nonlatching (default)","Activate comparator and assert after one conversion …","Measure single-ended signal on input channel 0","Measure single-ended signal on input channel 1","Measure single-ended signal on input channel 2","Measure single-ended signal on input channel 3","Possible slave addresses","128 SPS","128 SPS (default)","16 SPS","1600 SPS (default)","2400 SPS","250 SPS","250 SPS","32 SPS","3300 SPS","475 SPS","490 SPS","64 SPS","8 SPS","860 SPS","920 SPS","Traditional comparator (default)","Activate comparator and assert after two consecutive …","Window comparator","The measurable range is ±0.256V.","The measurable range is ±0.512V.","The measurable range is ±1.024V.","The measurable range is ±2.048V. (default)","The measurable range is ±4.096V.","The measurable range is ±6.144V.","","","","","","","","","","","","","","","","","","","","","","","","","ADC input channel selection","","","","","","","","","","","","","","","","","","","","Default slave address","","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Disable comparator (default)","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Change operating mode to Continuous","Change operating mode to OneShot","Read whether a measurement is currently in progress.","Mode marker types","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create <code>SlaveAddr</code> instance corresponding to the address …","Create <code>SlaveAddr</code> instance corresponding to the address …","Create <code>SlaveAddr</code> instance corresponding to the address …","Create <code>SlaveAddr</code> instance corresponding to the address …","Read a measurement","Read the most recent measurement","Request that the ADC begin a conversion on the specified …","","Reset the internal state of this driver to the default …","Select the channel for measurements.","Set comparator latching","Set comparator mode","Set comparator polarity","Activate comparator and set the alert queue","Set data rate","Set data rate","Set the input voltage measurable range","Set raw comparator upper threshold","Set raw comparator lower threshold","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Use the ALERT/RDY pin as conversion-ready pin.","Measure signal on input channel 0 differentially to signal …","Measure signal on input channel 0 differentially to signal …","Measure signal on input channel 1 differentially to signal …","Measure signal on input channel 3 differentially to signal …","Measure single-ended signal on input channel 0","Measure single-ended signal on input channel 1","Measure single-ended signal on input channel 2","Measure single-ended signal on input channel 3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Continuous conversion mode","One-shot operating mode / power-down state (default)","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[5,5,0,9,0,0,0,0,0,0,0,9,1,1,1,1,0,0,27,7,0,20,12,12,6,0,6,7,1,1,1,1,0,2,3,3,2,2,2,3,3,2,3,2,3,3,3,2,4,7,4,8,8,8,8,8,8,20,1,12,2,3,4,5,6,7,8,9,11,20,1,12,2,3,4,5,6,7,8,9,11,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,8,9,11,11,11,11,11,11,11,11,2,3,4,5,6,7,8,9,1,12,2,3,4,5,6,7,8,9,11,20,1,12,2,3,4,5,6,7,8,9,11,20,1,12,2,3,4,5,6,7,8,9,11,11,11,11,0,11,11,11,11,11,11,9,9,9,9,27,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,2,3,4,5,6,7,8,9,20,1,12,2,3,4,5,6,7,8,9,11,20,1,12,2,3,4,5,6,7,8,9,11,20,1,12,2,3,4,5,6,7,8,9,11,11,0,0,0,0,0,0,0,0,28,29,30,31,32,33,34,35,28,29,30,31,32,33,34,35,28,28,29,29,30,30,31,31,32,32,32,32,32,32,33,33,34,34,35,35,28,29,30,31,32,33,34,35,28,29,30,31,32,33,34,35,28,29,30,31,32,33,34,35,28,29,30,31,32,33,34,35,28,29,30,31,32,33,34,35,0,0,18,19,18,19,18,19,18,19,18,19,18,19,18,19],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],9],[[],[[11,[10,10,10,10]]]],[[[11,[0,0]]]],[[[11,[0,0]]]],[[[11,[0,0]]]],[[[11,[0,0]]]],[[[11,[0,0]]]],[[[11,[0,0]]]],[[[11,[0,0,0]]],[[13,[12]]]],[[2,2],14],[[3,3],14],[[4,4],14],[[5,5],14],[[6,6],14],[[7,7],14],[[8,8],14],[[9,9],14],[[1,15],16],[[[12,[17]],15],16],[[2,15],16],[[3,15],16],[[4,15],16],[[5,15],16],[[6,15],16],[[7,15],16],[[8,15],16],[[9,15],16],[[[11,[17,17,17,17]],15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[[0,[0,0]],0,18]]],[[13,[[11,[[0,[0,0]],0,19]],[20,[[11,[[0,[0,0]],0,18]]]]]]]],[[[11,[[0,[0,0]],0,19]]],[[13,[[11,[[0,[0,0]],0,18]],[20,[[11,[[0,[0,0]],0,19]]]]]]]],[[[11,[[0,[0,0]]]]],[[13,[14,12]]]],0,[[[0,[21,22]],9],[[11,[[0,[[0,[21,22]]]],0,0,18]]]],[[[0,[21,22]],9],[[11,[[0,[[0,[21,22]]]],0,0,18]]]],[[[0,[21,22]],9],[[11,[[0,[[0,[21,22]]]],0,0,18]]]],[[[0,[21,22]],9],[[11,[[0,[[0,[21,22]]]],0,0,18]]]],[[[0,[21,22]],9],[[11,[[0,[[0,[21,22]]]],0,0,18]]]],[[[0,[21,22]],9],[[11,[[0,[[0,[21,22]]]],0,0,18]]]],[[],9],[[],9],[[],9],[[],9],[1,[[24,[23]]]],[[[11,[[0,[0,0]],0,19]]],[[13,[23,12]]]],[[[11,[[0,[0,0]],0,18]],[25,[[11,[[0,[0,0]],0,18]]]]],[[24,[23]]]],[[[11,[[0,[0,0]],0,18]],1],[[24,[23]]]],[[[11,[[0,[0,0]]]]]],[[[11,[[0,[0,0]],0,19]],[25,[[11,[[0,[0,0]],0,18]]]]],[[13,[12]]]],[[[11,[0,0,0]],6],[[13,[12]]]],[[[11,[0,0,0]],4],[[13,[12]]]],[[[11,[0,0,0]],5],[[13,[12]]]],[[[11,[0,0,0]],7],[[13,[12]]]],[[[11,[0,0]],3],[[13,[12]]]],[[[11,[0,0]],2],[[13,[12]]]],[[[11,[0,0,0]],8],[[13,[12]]]],[[[11,[0,0,0]],23],[[13,[12]]]],[[[11,[0,0,0]],23],[[13,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[[11,[0,0,0]]],[[13,[12]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],26],[[],26]],"c":[],"p":[[4,"ChannelSelection"],[4,"DataRate12Bit"],[4,"DataRate16Bit"],[4,"ComparatorMode"],[4,"ComparatorPolarity"],[4,"ComparatorLatching"],[4,"ComparatorQueue"],[4,"FullScaleRange"],[4,"SlaveAddr"],[8,"Default"],[3,"Ads1x1x"],[4,"Error"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"OneShot"],[3,"Continuous"],[4,"ModeChangeError"],[8,"Write"],[8,"WriteRead"],[15,"i16"],[6,"Result"],[8,"Channel"],[3,"TypeId"],[8,"DynamicOneShot"],[3,"SingleA0"],[3,"SingleA1"],[3,"SingleA2"],[3,"SingleA3"],[3,"DifferentialA0A1"],[3,"DifferentialA0A3"],[3,"DifferentialA1A3"],[3,"DifferentialA2A3"]]},\
"ak09915_rs":{"doc":"","t":"DNNNNNNNNNENNNNNNNNENENNNNNNNNNNMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Ak09915","CNTL2","CNTL3","Cont100Hz","Cont10Hz","Cont1Hz","Cont200Hz","Cont20Hz","Cont50Hz","DataNotReady","Error","HXH","HXL","HYH","HYL","HZH","HZL","I2C","I2CDIS","Mode","PowerDown","Register","ST1","ST2","SelfTest","SensorOverflow","Single","TMPS","TS1","TS2","WIA1","WIA2","address","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_data_ready","check_overflow","eq","fmt","from","from","from","from","i2c","init","into","into","into","into","new","read","read_register","read_unchecked","reset","self_test","set_mode","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write_register"],"q":[[0,"ak09915_rs"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,11,11,13,13,13,13,13,13,4,0,11,11,11,11,11,11,4,11,0,13,0,11,11,13,4,13,11,11,11,11,11,3,11,13,3,4,11,13,3,4,3,3,4,4,11,13,3,4,3,3,11,13,3,4,3,3,3,3,3,3,3,11,13,3,4,11,13,3,4,11,13,3,4,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[5,[4]]]],[[[3,[[0,[1,2]]]]],[[5,[4]]]],[[[4,[6]],[4,[6]]],7],[[[4,[8]],9],10],[[]],[[]],[[]],[[]],0,[[[3,[[0,[1,2]]]]],[[5,[4]]]],[[]],[[]],[[]],[[]],[[[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[5,[4]]]],[[[3,[[0,[1,2]]]],11],[[5,[12,4]]]],[[[3,[[0,[1,2]]]]],[[5,[4]]]],[[[3,[[0,[1,2]]]]],[[5,[4]]]],[[[3,[[0,[1,2]]]]],[[5,[7,4]]]],[[[3,[[0,[1,2]]]],13],[[5,[4]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],14],[[],14],[[],14],[[],14],[[[3,[[0,[1,2]]]],11,12],[[5,[4]]]]],"c":[],"p":[[8,"Write"],[8,"WriteRead"],[3,"Ak09915"],[4,"Error"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Register"],[15,"u8"],[4,"Mode"],[3,"TypeId"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"O","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"c":[],"p":[]},\
"bmp280":{"doc":"A simple library for using the Bosch BMP280 barometer and …","t":"DDENNNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bmp280","Bmp280Builder","Error","I2cError","IoError","Other","Result","address","altitude_m","altitude_m_relative","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","default","description","fmt","fmt","from","from","from","from","from","from","ground_pressure","into","into","into","new","path","pressure_kpa","provide","temperature_celsius","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero"],"q":[[0,"bmp280"]],"d":["A single BMP280 sensor","A builder for Bmp280 sensors.","Errors that all functions could return. Errors will either …","","","","Wrapper type for results","Set the address of the I2C device for the sensor. There is …","Reads the altitude from the sensor relative to the zeroed …","Reads the altitude from the sensor relative to the given …","","","","","","","Attempt to build a Bmp280 sensor from this builder.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Set the ground pressure for the sensor. If you do not …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set the path of the I2C device for the sensor.  There is a …","","","","","","","","","","","","","","Will set the relative pressure for ground level readings …"],"i":[0,0,0,6,6,6,0,1,3,3,3,1,6,3,1,6,1,1,6,6,6,3,1,6,6,6,6,1,3,1,6,1,1,3,6,3,6,3,1,6,3,1,6,3,1,6,3],"f":[0,0,0,0,0,0,0,[[1,2],1],[3,[[5,[4]]]],[[3,4],[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[5,[3]]]],[[],1],[6,7],[[6,8],9],[[6,8],9],[[]],[[]],[[]],[[],6],[10,6],[11,6],[[1,4],1],[[]],[[]],[[]],[[],1],[[1,[13,[12]]],1],[3,[[5,[4]]]],[14],[3,[[5,[4]]]],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[3,[[5,[4]]]]],"c":[],"p":[[3,"Bmp280Builder"],[15,"u16"],[3,"Bmp280"],[15,"f32"],[6,"Result"],[4,"Error"],[15,"str"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"LinuxI2CError"],[3,"PathBuf"],[8,"Into"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGIILLLLLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLKLLLLKLLLLLLLKLLLLKLLLLLLLKLLLLKLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLKLLLLLKLLLLKLLLLLKLLLLKLLLLKLLLLKLLLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_i8_into","read_i8_into","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_i8_into","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,26,1,2,26,1,2,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,27,27,27,27,26,27,27,26,26,27,27,1,2,26,27,27,1,2,26,27,27,1,2,26,27,27,1,2,27,27,26,26,27,27,1,2,26,27,27,1,2,27,27,26,26,27,27,1,2,26,27,27,1,2,27,27,26,27,27,1,2,26,27,27,1,2,1,2,1,2,1,2,1,2,28,28,26,26,28,28,26,26,28,28,26,26,28,28,26,26,28,28,26,28,28,26,26,28,28,26,28,28,26,26,28,28,26,28,28,26,28,28,26,26,28,28,1,2,26,1,2,26,28,28,1,2,26,1,2,28,28,26,26,28,28,1,2,26,1,2,28,28,26,26,28,28,1,2,26,1,2,28,28,26,28,28,1,2,26,28,28,1,2],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[],4],[[],4],[[1,5],6],[[2,5],6],[[]],[[]],[[[8,[7]]]],[[[8,[7]]]],[[[8,[7]]]],[[[8,[9]]]],[[[8,[9]]]],[[[8,[9]]]],[[[8,[10]]]],[[[8,[11]]]],[[[8,[12]]]],[[[8,[13]]]],[[[8,[14]]]],[[[8,[14]]]],[[[8,[14]]]],[[[8,[15]]]],[[[8,[15]]]],[[[8,[15]]]],[[[8,[16]]]],[[[8,[16]]]],[[[8,[16]]]],[[[8,[17]]]],[[[8,[17]]]],[[[8,[17]]]],[[1,18]],[[2,18]],[[]],[[]],[[1,1],[[19,[3]]]],[[2,2],[[19,[3]]]],[[],[[20,[7]]]],[[],[[20,[7]]]],[[[8,[21]]],7],[[[8,[7]]],20],[[[8,[7]]],20],[[[8,[21]],[8,[7]]]],[[[8,[7]]],20],[[[8,[7]]],20],[[[8,[21]],[8,[7]]]],[[],[[20,[9]]]],[[],[[20,[9]]]],[[[8,[21]]],9],[[[8,[9]]],20],[[[8,[9]]],20],[[[8,[21]],[8,[9]]]],[[[8,[9]]],20],[[[8,[9]]],20],[[[8,[21]],[8,[9]]]],[[],[[20,[10]]]],[[],[[20,[10]]]],[[[8,[21]]],10],[[[8,[10]]],20],[[[8,[10]]],20],[[[8,[21]],[8,[10]]]],[[],[[20,[11]]]],[[],[[20,[11]]]],[[[8,[21]]],11],[[[8,[11]]],20],[[[8,[11]]],20],[[[8,[21]],[8,[11]]]],[[],[[20,[12]]]],[[],[[20,[12]]]],[[[8,[21]]],12],[[],[[20,[12]]]],[[],[[20,[12]]]],[[[8,[21]]],12],[[[8,[12]]],20],[[[8,[12]]],20],[[[8,[21]],[8,[12]]]],[[],[[20,[13]]]],[[],[[20,[13]]]],[[[8,[21]]],13],[[],[[20,[13]]]],[[],[[20,[13]]]],[[[8,[21]]],13],[[[8,[13]]],20],[[[8,[13]]],20],[[[8,[21]],[8,[13]]]],[[],[[20,[22]]]],[[],[[20,[22]]]],[[[8,[22]]],20],[[[8,[22]]],20],[23,[[20,[13]]]],[23,[[20,[13]]]],[[[8,[21]],23],13],[23,[[20,[10]]]],[23,[[20,[10]]]],[[[8,[21]],23],10],[[[8,[21]]],14],[[],[[20,[14]]]],[[],[[20,[14]]]],[[[8,[21]]],14],[[[8,[21]]],14],[[[8,[21]],[8,[14]]]],[[[8,[14]]],20],[[[8,[14]]],20],[[[8,[21]],[8,[14]]]],[[[8,[21]],[8,[14]]]],[[[8,[21]]],15],[[],[[20,[15]]]],[[],[[20,[15]]]],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]],[8,[15]]]],[[[8,[15]]],20],[[[8,[15]]],20],[[[8,[21]],[8,[15]]]],[[[8,[21]],[8,[15]]]],[[],[[20,[16]]]],[[],[[20,[16]]]],[[[8,[21]]],16],[[[8,[21]]],16],[[],[[20,[16]]]],[[],[[20,[16]]]],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]],[8,[16]]]],[[[8,[16]]],20],[[[8,[16]]],20],[[[8,[21]],[8,[16]]]],[[[8,[21]],[8,[16]]]],[[],[[20,[17]]]],[[],[[20,[17]]]],[[[8,[21]]],17],[[[8,[21]]],17],[[],[[20,[17]]]],[[],[[20,[17]]]],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]],[8,[17]]]],[[[8,[17]]],20],[[[8,[17]]],20],[[[8,[21]],[8,[17]]]],[[[8,[21]],[8,[17]]]],[[],[[20,[21]]]],[[],[[20,[21]]]],[[[8,[21]],23],17],[23,[[20,[17]]]],[23,[[20,[17]]]],[[[8,[21]],23],17],[[[8,[21]],23],17],[[[8,[21]],23],14],[23,[[20,[14]]]],[23,[[20,[14]]]],[[[8,[21]],23],14],[[[8,[21]],23],14],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[7,20],[7,20],[[[8,[21]],7]],[[[8,[7]],[8,[21]]]],[9,20],[9,20],[[[8,[21]],9]],[[[8,[9]],[8,[21]]]],[10,20],[10,20],[[[8,[21]],10]],[[[8,[10]],[8,[21]]]],[11,20],[11,20],[[[8,[21]],11]],[[[8,[11]],[8,[21]]]],[12,20],[12,20],[[[8,[21]],12]],[12,20],[12,20],[[[8,[21]],12]],[[[8,[12]],[8,[21]]]],[13,20],[13,20],[[[8,[21]],13]],[13,20],[13,20],[[[8,[21]],13]],[[[8,[13]],[8,[21]]]],[22,20],[22,20],[[[8,[22]],[8,[21]]]],[[13,23],20],[[13,23],20],[[[8,[21]],13,23]],[[10,23],20],[[10,23],20],[[[8,[21]],10,23]],[[[8,[21]],14]],[14,20],[14,20],[[[8,[21]],14]],[[[8,[21]],14]],[[[8,[14]],[8,[21]]]],[[[8,[14]],[8,[21]]]],[[[8,[14]],[8,[21]]]],[[[8,[21]],15]],[15,20],[15,20],[[[8,[21]],15]],[[[8,[21]],15]],[[[8,[15]],[8,[21]]]],[[[8,[15]],[8,[21]]]],[[[8,[15]],[8,[21]]]],[16,20],[16,20],[[[8,[21]],16]],[[[8,[21]],16]],[16,20],[16,20],[[[8,[21]],16]],[[[8,[21]],16]],[[[8,[16]],[8,[21]]]],[[[8,[16]],[8,[21]]]],[[[8,[16]],[8,[21]]]],[17,20],[17,20],[[[8,[21]],17]],[[[8,[21]],17]],[17,20],[17,20],[[[8,[21]],17]],[[[8,[21]],17]],[[[8,[17]],[8,[21]]]],[[[8,[17]],[8,[21]]]],[[[8,[17]],[8,[21]]]],[21,20],[21,20],[[[8,[21]],17,23]],[[17,23],20],[[17,23],20],[[[8,[21]],17,23]],[[[8,[21]],17,23]],[[[8,[21]],14,23]],[[14,23],20],[[14,23],20],[[[8,[21]],14,23]],[[[8,[21]],14,23]]],"c":[63,64,65,72,73,74],"p":[[4,"BigEndian"],[4,"LittleEndian"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"f32"],[15,"slice"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[8,"Hasher"],[4,"Option"],[6,"Result"],[15,"u8"],[15,"i8"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"ByteOrder"],[8,"ReadBytesExt"],[8,"WriteBytesExt"]]},\
"cast":{"doc":"Ergonomic, checked cast functions for primitive types","t":"EINNQNNLLKLLFFLLLFFFFFLFLLLFFFFFF","n":["Error","From","Infinite","NaN","Output","Overflow","Underflow","borrow","borrow_mut","cast","clone","eq","f32","f64","fmt","fmt","from","i128","i16","i32","i64","i8","into","isize","try_from","try_into","type_id","u128","u16","u32","u64","u8","usize"],"q":[[0,"cast"]],"d":["Cast errors","The “cast from” operation","Infinite value casted to a type that can only represent …","NaN value casted to a type that can’t represent a NaN …","The result of the cast operation: either <code>Self</code> or …","Source value is greater than the maximum value that the …","Source value is smaller than the minimum value that the …","","","Checked cast from <code>Src</code> to <code>Self</code>","","","Checked cast function","Checked cast function","","","Returns the argument unchanged.","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Calls <code>U::from(self)</code>.","Checked cast function","","","","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Checked cast function"],"i":[0,0,1,1,7,1,1,1,1,7,1,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[1,1],[[1,1],2],[[]],[[]],[[1,3],4],[[1,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],6],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[4,"Error"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"From"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[]},\
"cpy_binder":{"doc":"","t":"O","n":["export_cpy"],"q":[[0,"cpy_binder"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"embedded_hal":{"doc":"A Hardware Abstraction Layer (HAL) for embedded systems","t":"IQQQQENQQQIIIQQNAALLAKLLKAKKKKKKKLLALLKKKKKKLAAKKKKAALLLLAIQQIKKAAAAAAIQQKKIIKKIQQQQQQQEINGGIIINIIILLLKKLLLKLLLKKKKQIKQIKKAIQQQQEIININILLLKLLLAKLLLAKAKIIINNNIENDNIESSNNNDNSSLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLKLLLLLKKLKLAKLLKLLLLLLLLLLLLLLLLLLLLLIQQKKAAAAIIIIKKKKKKKAIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQNIINIEIILLLLLLLLLLKKKKKKLKKLLKALLLICCCCCCCCCCCCCCCCCCCCCCCCQQIIKKKLNNQINNRRRRDEELLLLLLLLLLLLLLLLLLLLLLLLMMKKLLLLLLLLLLLLIIQIQKKKQIIIKKK","n":["Capture","Capture","Channel","Channel","Count","Direction","Downcounting","Duty","Duty","Error","Pwm","PwmPin","Qei","Time","Time","Upcounting","adc","blocking","borrow","borrow_mut","can","capture","clone","clone_into","count","digital","direction","disable","disable","disable","enable","enable","enable","eq","equivalent","fmt","fmt","from","get_duty","get_duty","get_max_duty","get_max_duty","get_period","get_resolution","into","prelude","serial","set_duty","set_duty","set_period","set_resolution","spi","timer","to_owned","try_from","try_into","type_id","watchdog","Channel","Error","ID","OneShot","channel","read","can","delay","i2c","rng","serial","spi","Can","Error","Frame","receive","transmit","DelayMs","DelayUs","delay_ms","delay_us","AddressMode","Error","Error","Error","Error","Error","Error","Error","Operation","Read","Read","SevenBitAddress","TenBitAddress","Transactional","TransactionalIter","Write","Write","WriteIter","WriteIterRead","WriteRead","borrow","borrow_mut","eq","exec","exec_iter","fmt","from","into","read","try_from","try_into","type_id","write","write","write_iter_read","write_read","Error","Read","read","Error","Write","bflush","bwrite_all","write","Default","Error","Error","Error","Error","Operation","Transactional","Transfer","Transfer","Write","Write","WriteIter","borrow","borrow_mut","eq","exec","fmt","from","into","transfer","transfer","try_from","try_into","type_id","write","write","write_iter","write_iter","Default","Default","Default","Acknowledge","Bit","Crc","Error","ErrorKind","Extended","ExtendedId","Form","Frame","Id","MAX","MAX","Other","Overrun","Standard","StandardId","Stuff","ZERO","ZERO","as_raw","as_raw","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","data","dlc","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","id","into","into","into","into","is_data_frame","is_extended","is_remote_frame","is_standard","kind","kind","nb","new","new","new","new_remote","new_unchecked","new_unchecked","partial_cmp","standard_id","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Can","Error","Frame","receive","transmit","v1","v1_compat","v2","v2_compat","InputPin","OutputPin","StatefulOutputPin","ToggleableOutputPin","is_high","is_low","is_set_high","is_set_low","set_high","set_low","toggle","toggleable","Default","OldInputPin","OldOutputPin","borrow","borrow","borrow_mut","borrow_mut","from","from","from","from","into","into","is_high","is_high","is_low","is_low","is_set_high","is_set_high","is_set_low","is_set_low","new","new","set_high","set_high","set_low","set_low","try_from","try_from","try_into","try_into","type_id","type_id","Error","Error","Error","Error","High","InputPin","IoPin","Low","OutputPin","PinState","StatefulOutputPin","ToggleableOutputPin","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","from","into","into_input_pin","into_output_pin","is_high","is_low","is_set_high","is_set_low","not","set_high","set_low","set_state","to_owned","toggle","toggleable","try_from","try_into","type_id","Default","_embedded_hal_Capture","_embedded_hal_Pwm","_embedded_hal_PwmPin","_embedded_hal_Qei","_embedded_hal_adc_OneShot","_embedded_hal_blocking_delay_DelayMs","_embedded_hal_blocking_delay_DelayUs","_embedded_hal_blocking_i2c_Read","_embedded_hal_blocking_i2c_Write","_embedded_hal_blocking_i2c_WriteRead","_embedded_hal_blocking_rng_Read","_embedded_hal_blocking_serial_Write","_embedded_hal_blocking_spi_Transfer","_embedded_hal_blocking_spi_Write","_embedded_hal_digital_InputPin","_embedded_hal_digital_OutputPin","_embedded_hal_digital_ToggleableOutputPin","_embedded_hal_serial_Read","_embedded_hal_serial_Write","_embedded_hal_spi_FullDuplex","_embedded_hal_timer_CountDown","_embedded_hal_watchdog_Watchdog","_embedded_hal_watchdog_WatchdogDisable","_embedded_hal_watchdog_WatchdogEnable","Error","Error","Read","Write","flush","read","write","write_str","CaptureOnFirstTransition","CaptureOnSecondTransition","Error","FullDuplex","IdleHigh","IdleLow","MODE_0","MODE_1","MODE_2","MODE_3","Mode","Phase","Polarity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","from","from","from","into","into","into","phase","polarity","read","send","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Cancel","CountDown","Error","Periodic","Time","cancel","start","wait","Time","Watchdog","WatchdogDisable","WatchdogEnable","disable","feed","start"],"q":[[0,"embedded_hal"],[58,"embedded_hal::adc"],[64,"embedded_hal::blocking"],[70,"embedded_hal::blocking::can"],[75,"embedded_hal::blocking::delay"],[79,"embedded_hal::blocking::i2c"],[115,"embedded_hal::blocking::rng"],[118,"embedded_hal::blocking::serial"],[123,"embedded_hal::blocking::serial::write"],[124,"embedded_hal::blocking::spi"],[151,"embedded_hal::blocking::spi::transfer"],[152,"embedded_hal::blocking::spi::write"],[153,"embedded_hal::blocking::spi::write_iter"],[154,"embedded_hal::can"],[251,"embedded_hal::can::nb"],[256,"embedded_hal::digital"],[260,"embedded_hal::digital::v1"],[272,"embedded_hal::digital::v1::toggleable"],[273,"embedded_hal::digital::v1_compat"],[305,"embedded_hal::digital::v2"],[343,"embedded_hal::digital::v2::toggleable"],[344,"embedded_hal::prelude"],[368,"embedded_hal::serial"],[376,"embedded_hal::spi"],[429,"embedded_hal::timer"],[437,"embedded_hal::watchdog"]],"d":["Input capture","The type of the value returned by <code>capture</code>","Enumeration of channels that can be used with this <code>Capture</code> …","Enumeration of channels that can be used with this <code>Pwm</code> …","The type of the value returned by <code>count</code>","Count direction","3, 2, 1","Type for the <code>duty</code> methods","Type for the <code>duty</code> methods","Enumeration of <code>Capture</code> errors","Pulse Width Modulation","A single PWM channel / pin","Quadrature encoder interface","A time unit that can be converted into a human time unit …","A time unit that can be converted into a human time unit …","1, 2, 3","Analog-digital conversion traits","Blocking API","","","Controller Area Network","“Waits” for a transition in the capture <code>channel</code> and …","","","Returns the current pulse count of the encoder","Digital I/O","Returns the count direction","Disables a capture <code>channel</code>","Disables a PWM <code>channel</code>","Disables a PWM <code>channel</code>","Enables a capture <code>channel</code>","Enables a PWM <code>channel</code>","Enables a PWM <code>channel</code>","","","Implementation of <code>core::fmt::Write</code> for the HAL’s …","","Returns the argument unchanged.","Returns the current duty cycle","Returns the current duty cycle","Returns the maximum duty cycle value","Returns the maximum duty cycle value","Returns the current PWM period","Returns the current resolution","Calls <code>U::from(self)</code>.","The prelude is a collection of all the traits in this crate","Serial interface","Sets a new duty cycle","Sets a new duty cycle","Sets a new PWM period","Sets the resolution of the capture timer","Serial Peripheral Interface","Timers","","","","","Traits for interactions with a processors watchdog timer.","A marker trait to identify MCU pins that can be used as …","Error type returned by ADC methods","Channel ID type","ADCs that sample on single channels per request, and do so …","Get the specific ID that identifies this channel, for …","Request that the ADC begin a conversion on the specified …","Blocking CAN API","Delays","Blocking I2C API","Blocking hardware random number generator","Blocking serial API","Blocking SPI API","A blocking CAN interface that is able to transmit and …","Associated error type.","Associated frame type.","Blocks until a frame was received or an error occured.","Puts a frame in the transmit buffer. Blocks until space is …","Millisecond delay","Microsecond delay","Pauses execution for <code>ms</code> milliseconds","Pauses execution for <code>us</code> microseconds","Address mode (7-bit / 10-bit)","Error type","Error type","Error type","Error type","Error type","Error type","Error type","Transactional I2C operation.","Blocking read","Read data into the provided buffer","7-bit address mode type","10-bit address mode type","Transactional I2C interface.","Transactional I2C interface (iterator version).","Blocking write","Write data from the provided buffer","Blocking write (iterator version)","Blocking write (iterator version) + read","Blocking write + read","","","","Execute the provided operations on the I2C bus.","Execute the provided operations on the I2C bus (iterator …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads enough bytes from slave with <code>address</code> to fill <code>buffer</code>","","","","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code> and then reads …","Writes bytes to slave with address <code>address</code> and then reads …","Error type","Blocking read","Reads enough bytes from hardware random number generator …","The type of error that can occur when writing","Write half of a serial interface (blocking variant)","Block until the serial interface has sent all buffered …","Writes a slice, blocking until everything has been written","Blocking serial write","Marker trait to opt into default blocking write …","Error type","Error type","Error type","Associated error type","Operation for transactional SPI trait","Transactional trait allows multiple actions to be executed …","Blocking transfer","Write data out while reading data into the provided buffer","Blocking write","Write data from the provided buffer, discarding read data","Blocking write (iterator version)","","","","Execute the provided transactions","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Blocking transfer","Sends <code>words</code> to the slave. Returns the <code>words</code> received from …","","","","Blocking write","Sends <code>words</code> to the slave, ignoring all the incoming words","Blocking write (iterator version)","Sends <code>words</code> to the slave, ignoring all the incoming words","Default implementation of <code>blocking::spi::Transfer&lt;W&gt;</code> for …","Default implementation of <code>blocking::spi::Write&lt;W&gt;</code> for …","Default implementation of <code>blocking::spi::WriteIter&lt;W&gt;</code> for …","An ACK  error shall be detected by a transmitter whenever …","A bit error is detected at that bit time when the bit …","Calculated CRC sequence does not equal the received one.","CAN error","CAN error kind","Extended 29-bit Identifier (<code>0..=0x1FFF_FFFF</code>).","Extended 29-bit CAN Identifier (<code>0..=1FFF_FFFF</code>).","A form error shall be detected when a fixed-form bit field …","A CAN2.0 Frame","A CAN Identifier (standard or extended).","CAN ID <code>0x7FF</code>, the lowest priority.","CAN ID <code>0x1FFFFFFF</code>, the lowest priority.","A different error occurred. The original error may contain …","The peripheral receive buffer was overrun.","Standard 11-bit Identifier (<code>0..=0x7FF</code>).","Standard 11-bit CAN Identifier (<code>0..=0x7FF</code>).","A stuff error is detected at the bit time of the sixth …","CAN ID <code>0</code>, the highest priority.","CAN ID <code>0</code>, the highest priority.","Returns this CAN Identifier as a raw 16-bit integer.","Returns this CAN Identifier as a raw 32-bit integer.","","","","","","","","","","","","","","","","","","Returns the frame data (0..8 bytes in length).","Returns the data length code (DLC) which is in the range …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the frame identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this frame is a data frame.","Returns true if this frame is a extended frame.","Returns true if this frame is a remote frame.","Returns true if this frame is a standard frame.","Convert error to a generic CAN error kind","","Non-blocking CAN API","Creates a new frame.","Tries to create a <code>StandardId</code> from a raw 16-bit integer.","Tries to create a <code>ExtendedId</code> from a raw 32-bit integer.","Creates a new remote frame (RTR bit set).","Creates a new <code>StandardId</code> without checking if it is inside …","Creates a new <code>ExtendedId</code> without checking if it is inside …","","Returns the Base ID part of this extended identifier.","","","","","","","","","","","","","","","","","","A CAN interface that is able to transmit and receive …","Associated error type.","Associated frame type.","Returns a received frame if available.","Puts a frame in the transmit buffer to be sent on the bus.","Digital I/O","v1 compatibility wrappers","Digital I/O","v2 compatibility shims","Single digital input pin","Single digital push-pull output pin","Push-pull output pin that can read its output state","Output pin that can be toggled","Is the input pin high?","Is the input pin low?","Is the pin in drive high mode?","Is the pin in drive low mode?","Drives the pin high","Drives the pin low","Toggle pin output.","If you can read <strong>and</strong> write the output state, a pin is …","Software-driven <code>toggle()</code> implementation.","Wrapper to allow fallible <code>v2::InputPin</code> traits to be …","Wrapper to allow fallible <code>v2::OutputPin</code> traits to be …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new OldOutputPin wrapper around a <code>v2::OutputPin</code>","Create an <code>OldInputPin</code> wrapper around a <code>v2::InputPin</code>.","","","","","","","","","","","Error type","Error type","Error type","Error type.","High pin state","Single digital input pin","Single pin that can switch from input to output mode, and …","Low pin state","Single digital push-pull output pin","Digital output pin state","Push-pull output pin that can read its output state","Output pin that can be toggled","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Tries to convert this pin to input mode.","Tries to convert this pin to output mode with the given …","Is the input pin high?","Is the input pin low?","Is the pin in drive high mode?","Is the pin in drive low mode?","","Drives the pin high","Drives the pin low","Drives the pin high or low depending on the provided value","","Toggle pin output.","If you can read <strong>and</strong> write the output state, a pin is …","","","","Software-driven <code>toggle()</code> implementation.","","","","","","","","","","","","","","","","","","","","","","","","","Read error","Write error","Read half of a serial interface","Write half of a serial interface","Ensures that none of the previously written words are …","Reads a single word from the serial interface","Writes a single word to the serial interface","","Data in “captured” on the first clock transition","Data in “captured” on the second clock transition","An enumeration of SPI errors","Full duplex (master mode)","Clock signal high when idle","Clock signal low when idle","Helper for CPOL = 0, CPHA = 0","Helper for CPOL = 0, CPHA = 1","Helper for CPOL = 1, CPHA = 0","Helper for CPOL = 1, CPHA = 1","SPI mode","Clock phase","Clock polarity","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Clock phase","Clock polarity","Reads the word stored in the shift register","Sends a word to the slave","","","","","","","","","","","","","Trait for cancelable countdowns.","A count down timer","Error returned when a countdown can’t be canceled.","Marker trait that indicates that a timer is periodic","The unit of time used by this timer","Tries to cancel this countdown.","Starts a new count down","Non-blockingly “waits” until the count down finishes","Unit of time used by the watchdog","Feeds an existing watchdog to ensure the processor isn’t …","Disables a running watchdog timer so the processor won’t …","Enables A watchdog timer to reset the processor if …","Disables the watchdog","Triggers the watchdog. This must be done once the watchdog …","Starts the watchdog with a given period, typically once …"],"i":[0,39,39,40,41,0,2,40,42,39,0,0,0,39,40,2,0,0,2,2,0,39,2,2,41,0,41,39,40,42,39,40,42,2,2,0,2,2,40,42,40,42,40,39,2,0,0,40,42,40,39,0,0,2,2,2,2,0,0,43,44,0,44,43,0,0,0,0,0,0,0,45,45,45,45,0,0,46,47,0,48,49,50,51,52,53,54,0,0,9,0,0,0,0,0,9,0,0,0,9,9,9,53,54,9,9,9,48,9,9,9,49,50,52,51,55,0,55,56,0,56,56,0,0,57,58,59,60,0,0,0,14,0,14,0,14,14,14,60,14,14,14,0,57,14,14,14,0,58,0,59,0,0,0,21,21,21,0,0,20,0,21,0,0,16,18,21,21,20,0,21,16,18,16,18,16,18,20,21,16,18,20,21,16,18,20,21,16,18,20,21,21,61,61,16,18,20,21,16,18,20,21,16,18,20,21,21,16,18,20,20,20,21,21,61,16,18,20,21,61,61,61,61,62,21,0,61,16,18,61,16,18,21,18,16,18,20,21,21,16,18,20,21,16,18,20,21,16,18,20,21,0,63,63,63,63,0,0,0,0,0,0,0,0,64,64,65,65,66,66,67,0,0,0,0,28,30,28,30,28,28,30,30,28,30,30,30,30,30,28,28,28,28,28,30,28,28,28,28,28,30,28,30,28,30,27,68,29,69,32,0,0,32,0,0,0,0,32,32,32,32,32,32,32,32,32,32,69,69,29,29,31,31,32,27,27,27,32,68,0,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,33,0,0,33,70,33,33,36,36,71,0,35,35,0,0,0,0,0,0,0,35,36,37,35,36,37,35,36,37,35,36,37,35,36,37,35,36,37,35,36,37,35,36,37,37,37,71,71,35,36,37,35,36,37,35,36,37,35,36,37,0,0,72,0,73,72,73,73,74,0,0,0,75,76,74],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[],1],[2,2],[[]],[[]],0,[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],3],[[],3],0,[[2,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[6],[6],0,0,[[]],[[],7],[[],7],[[],8],0,0,0,0,0,[[]],[[],1],0,0,0,0,0,0,0,0,0,[[],7],[[],7],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[9,9],3],[[[10,[9]]],7],[11,7],[[9,4],5],[[]],[[]],[[[10,[12]]],7],[[],7],[[],7],[[],8],[[[10,[12]]],7],[11,7],[[11,[10,[12]]],7],[[[10,[12]],[10,[12]]],7],0,0,[[[10,[12]]],7],0,0,[[],7],[10,7],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[14,[13]],[14,[13]]],3],[[[10,[14]]],7],[[[14,[15]],4],5],[[]],[[]],0,[10,[[7,[10]]]],[[],7],[[],7],[[],8],0,[10,7],0,[11,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,17],[18,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[18,18],[20,20],[21,21],[[]],[[]],[[]],[[]],[[21,21],22],[[],[[10,[12]]]],[[],23],[[16,16],3],[[18,18],3],[[20,20],3],[[21,21],3],[[],3],[[],3],[[],3],[[],3],[[16,4],5],[[18,4],5],[[20,4],5],[[21,4],5],[[21,4],5],[[]],[[]],[16,20],[[]],[18,20],[[]],[[21,24]],[[],20],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],21],[21,21],0,[[[6,[20]],[10,[12]]],25],[17,[[25,[16]]]],[19,[[25,[18]]]],[[[6,[20]],23],25],[17,16],[19,18],[[21,21],[[25,[22]]]],[18,16],[[]],[[]],[[]],[[]],[[],26],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],0,0,0,[[],1],[[],[[1,[25]]]],0,0,0,0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[27,[[28,[27]]]],[[]],[[]],[29,[[30,[29]]]],[[]],[[]],[[],[[7,[3]]]],[[[30,[29]]],3],[[],[[7,[3]]]],[[[30,[29]]],3],[[[28,[31]]],3],[[],[[7,[3]]]],[[],[[7,[3]]]],[[[28,[31]]],3],[27,[[28,[27]]]],[29,[[30,[29]]]],[[[28,[27]]]],[[],7],[[],7],[[[28,[27]]]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[32,32],[[]],[[32,32],3],[[],3],[[32,4],5],[[]],[3,32],[[]],[[],7],[32,7],[[],[[7,[3]]]],[[],[[7,[3]]]],[[],[[7,[3]]]],[[],[[7,[3]]]],[32],[[],7],[[],7],[32,7],[[]],[[],7],0,[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[33,34],5],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[36,36],[37,37],[[]],[[]],[[]],[[35,35],3],[[36,36],3],[[37,37],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],1],[[],1],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],0,0,0,0,0,[[],7],[6],[[],[[1,[38]]]],0,0,0,0,[[]],[[]],[6]],"c":[256,260,261,262,263,264,265,266,267,268,269,270,271,272],"p":[[6,"Result"],[4,"Direction"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Into"],[4,"Result"],[3,"TypeId"],[4,"Operation"],[15,"slice"],[8,"IntoIterator"],[15,"u8"],[8,"PartialEq"],[4,"Operation"],[8,"Debug"],[3,"StandardId"],[15,"u16"],[3,"ExtendedId"],[15,"u32"],[4,"Id"],[4,"ErrorKind"],[4,"Ordering"],[15,"usize"],[8,"Hasher"],[4,"Option"],[3,"String"],[8,"OutputPin"],[3,"OldOutputPin"],[8,"InputPin"],[3,"OldInputPin"],[8,"StatefulOutputPin"],[4,"PinState"],[8,"Write"],[15,"str"],[4,"Polarity"],[4,"Phase"],[3,"Mode"],[4,"Void"],[8,"Capture"],[8,"Pwm"],[8,"Qei"],[8,"PwmPin"],[8,"OneShot"],[8,"Channel"],[8,"Can"],[8,"DelayMs"],[8,"DelayUs"],[8,"Read"],[8,"Write"],[8,"WriteIter"],[8,"WriteRead"],[8,"WriteIterRead"],[8,"Transactional"],[8,"TransactionalIter"],[8,"Read"],[8,"Write"],[8,"Transfer"],[8,"Write"],[8,"WriteIter"],[8,"Transactional"],[8,"Frame"],[8,"Error"],[8,"Can"],[8,"InputPin"],[8,"StatefulOutputPin"],[8,"OutputPin"],[8,"ToggleableOutputPin"],[8,"ToggleableOutputPin"],[8,"IoPin"],[8,"Read"],[8,"FullDuplex"],[8,"Cancel"],[8,"CountDown"],[8,"WatchdogEnable"],[8,"WatchdogDisable"],[8,"Watchdog"]]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":"SSDSSSSSSSSSSSSLLLLLLLLLLLFFLLLLLLLL","n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","equivalent","fmt","fmt","from","from","getrandom","getrandom_uninit","into","provide","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"getrandom"]],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Version of the <code>getrandom</code> function which fills <code>dest</code> with …","Calls <code>U::from(self)</code>.","","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[1,2],[[1,1],3],[[],3],[[1,4],5],[[1,4],5],[2,1],[[]],[[[7,[6]]],[[8,[1]]]],[[[7,[[9,[6]]]]],[[8,[[7,[6]],1]]]],[[]],[10],[1,[[12,[11]]]],[[]],[[],13],[[],8],[[],8],[[],14]],"c":[],"p":[[3,"Error"],[3,"NonZeroU32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"slice"],[4,"Result"],[19,"MaybeUninit"],[3,"Demand"],[15,"i32"],[4,"Option"],[3,"String"],[3,"TypeId"]]},\
"gpio_cdev":{"doc":"The <code>gpio-cdev</code> crate provides access to the GPIO character …","t":"SSSDNDDESNNSSNESDEDNDDDNDNDDDDSSSSSNSNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENNNNNLLLLLLLLLLLLLLLLLLLLLMM","n":["ACTIVE_LOW","ACTIVE_LOW","BOTH_EDGES","Chip","ChipInfo","ChipIterator","EventRequestFlags","EventType","FALLING_EDGE","FallingEdge","GetLine","INPUT","IS_OUT","In","IoctlKind","KERNEL","Line","LineDirection","LineEvent","LineEvent","LineEventHandle","LineFlags","LineHandle","LineHandle","LineInfo","LineInfo","LineIterator","LineRequestFlags","Lines","MultiLineHandle","OPEN_DRAIN","OPEN_DRAIN","OPEN_SOURCE","OPEN_SOURCE","OUTPUT","Out","RISING_EDGE","RisingEdge","SetLine","all","all","all","as_raw_fd","as_raw_fd","as_raw_fd","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chip","chip","chips","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","complement","complement","consumer","contains","contains","contains","difference","difference","difference","direction","empty","empty","empty","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","errors","event_type","events","extend","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","get_all_lines","get_event","get_line","get_lines","get_value","get_value","get_values","hash","hash","hash","index","info","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_active_low","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_kernel","is_open_drain","is_open_source","is_used","label","len","line","line","line","lines","lines","name","name","new","next","next","next","not","not","not","num_lines","num_lines","offset","partial_cmp","partial_cmp","partial_cmp","path","remove","remove","remove","request","request","set","set","set","set_value","set_values","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","Error","ErrorKind","Event","InvalidRequest","Io","Ioctl","Offset","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","into","into","provide","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","cause","kind"],"q":[[0,"gpio_cdev"],[365,"gpio_cdev::errors"],[393,"gpio_cdev::errors::ErrorKind"]],"d":["","","","A GPIO Chip maps to the actual device driver instance in …","","Iterator over chips","Event request flags","Did the Line rise (go active) or fall (go inactive)?","","","","","","","","","Access to a specific GPIO Line","In or Out","Information about a change to the state of a Line","","Handle for retrieving events from the kernel for a line","Informational Flags","Handle for interacting with a “requested” line","","Information about a specific GPIO Line","","Iterator over GPIO Lines for a given chip.","Line Request Flags","A collection of lines that can be accesses simultaneously","Handle for interacting with a “requested” line","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Gets the raw file descriptor for the LineHandle.","Gets the raw file descriptor for the LineHandle.","Gets the raw file descriptor for the LineEventHandle.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a handle to this chip’s parent","Get a handle to the parent chip for the lines","Iterate over all GPIO chips currently present on this …","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","The name of this GPIO line, such as the output pin of the …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Get the direction of this GPIO if configured","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","This module is deprecated and types are exported from the …","Was this a rising or a falling edge?","Get an event handle that can be used as a blocking …","","","","Get the flags with which this handle was created","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","Get a handle to all the GPIO lines on the chip","Retrieve the next event from the kernel for this line","Get a handle to the GPIO line at a given offset","Get a handle to multiple GPIO line at a given offsets","Request the current state of this Line from the kernel","Request the current state of this Line from the kernel","Request the current state of this Line from the kernel","","","","","Get info about the line from the kernel.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","True if this line is marked as active low in the kernel","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Get the number of lines in the collection","True if this line is being used by something else in the …","True if this line is marked as open drain in the kernel","True if this line is marked as open source in the kernel","True if the any flags for the device are set (input or …","A functional name for this GPIO chip, such as a product …","Get the number of lines in the collection","Get a handle to the line that this info represents","Get the Line information associated with this handle.","Get the Line information associated with this handle.","Get an interator over all lines that can be potentially …","Get the Line information associated with this handle.","The name of the device driving this GPIO chip in the kernel","Name assigned to this chip if assigned","Open the GPIO Chip at the provided path (e.g. …","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","The number of lines/pins indexable through this chip","Get the number of lines associated with this handle","Offset of this line within its parent chip","","","","Get the fs path of this character device (e.g. …","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Request access to interact with this line from the kernel","Request access to interact with these lines from the kernel","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Request that the line be driven to the specified value","Request that the line be driven to the specified value","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Best estimate of event occurrence time, in nanoseconds","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[1,3,2,0,15,0,0,0,2,18,15,1,3,17,0,3,0,0,0,15,0,0,0,15,0,15,0,0,0,0,1,3,1,3,1,17,2,18,15,1,2,3,4,6,7,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,23,15,10,12,27,9,16,1,2,3,17,4,11,6,18,7,23,15,10,12,27,9,16,1,2,3,17,4,11,6,18,7,9,11,0,15,9,16,1,2,3,17,18,15,9,16,1,2,3,17,18,1,2,3,1,2,3,16,1,2,3,1,2,3,16,1,2,3,15,1,2,3,17,18,1,2,3,0,23,9,1,2,3,4,23,15,15,10,12,27,9,16,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,17,4,11,6,18,7,23,15,10,12,27,9,16,1,2,3,17,4,11,6,18,7,1,2,3,1,2,3,1,2,3,1,2,3,10,7,10,10,4,7,6,1,2,3,11,9,1,2,3,1,2,3,1,2,3,23,15,10,12,27,9,16,1,2,3,17,4,11,6,18,7,12,27,7,16,1,2,3,1,2,3,11,16,16,16,16,10,11,16,4,7,10,6,10,16,10,12,27,7,1,2,3,10,6,9,1,2,3,10,1,2,3,9,11,1,2,3,4,6,1,2,3,1,2,3,1,2,3,23,15,9,16,1,2,3,17,18,15,1,2,3,23,15,10,12,27,9,16,1,2,3,17,4,11,6,18,7,23,15,10,12,27,9,16,1,2,3,17,4,11,6,18,7,23,15,10,12,27,9,16,1,2,3,17,4,11,6,18,7,1,2,3,0,0,38,38,38,38,38,13,38,13,38,13,13,38,13,13,38,13,38,13,13,13,13,38,13,38,13,38,42,42],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],[[],3],[4,5],[6,5],[7,5],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1]],[[2,2]],[[3,3]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1]],[[2,2]],[[3,3]],[1,8],[2,8],[3,8],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1]],[[2,2]],[[3,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,10],[11,10],[[],[[14,[12,13]]]],[15,15],[9,9],[16,16],[1,1],[2,2],[3,3],[17,17],[18,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],19],[[2,2],19],[[3,3],19],[1,1],[2,2],[3,3],[16,[[21,[20]]]],[[1,1],22],[[2,2],22],[[3,3],22],[[1,1],1],[[2,2],2],[[3,3],3],[16,17],[[],1],[[],2],[[],3],[[15,15],22],[[1,1],22],[[2,2],22],[[3,3],22],[[17,17],22],[[18,18],22],[[],22],[[],22],[[],22],0,[23,18],[[9,1,2,20],[[14,[7,13]]]],[[1,24]],[[2,24]],[[3,24]],[4,1],[[23,25],26],[[15,25],26],[[15,25],26],[[10,25],26],[[12,25],26],[[27,25],26],[[9,25],26],[[16,25],26],[[1,25],26],[[1,25],26],[[1,25],26],[[1,25],26],[[1,25],26],[[2,25],26],[[2,25],26],[[2,25],26],[[2,25],26],[[2,25],26],[[3,25],26],[[3,25],26],[[3,25],26],[[3,25],26],[[3,25],26],[[17,25],26],[[4,25],26],[[11,25],26],[[6,25],26],[[18,25],26],[[7,25],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,[[21,[1]]]],[8,[[21,[2]]]],[8,[[21,[3]]]],[8,1],[8,2],[8,3],[8,1],[8,2],[8,3],[24,1],[24,2],[24,3],[10,[[14,[11,13]]]],[7,[[14,[23,13]]]],[[10,8],[[14,[9,13]]]],[[10,[28,[8]]],[[14,[11,13]]]],[4,[[14,[29,13]]]],[7,[[14,[29,13]]]],[6,[[14,[[30,[29]],13]]]],[[1,31]],[[2,31]],[[3,31]],[[11,32],9],[9,[[14,[16,13]]]],[[1,1]],[[2,2]],[[3,3]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],22],[[2,2],22],[[3,3],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,22],[1,22],[2,22],[3,22],[1,22],[2,22],[3,22],[11,22],[16,22],[16,22],[16,22],[16,22],[10,20],[11,32],[16,9],[4,9],[7,9],[10,27],[6,11],[10,20],[16,[[21,[20]]]],[[[34,[33]]],[[14,[10,13]]]],[12,[[21,[[14,[10,13]]]]]],[27,[[21,[9]]]],[7,[[21,[[14,[23,13]]]]]],[1,1],[2,2],[3,3],[10,8],[6,32],[9,8],[[1,1],[[21,[19]]]],[[2,2],[[21,[19]]]],[[3,3],[[21,[19]]]],[10,33],[[1,1]],[[2,2]],[[3,3]],[[9,1,29,20],[[14,[4,13]]]],[[11,1,[28,[29]],20],[[14,[6,13]]]],[[1,1,22]],[[2,2,22]],[[3,3,22]],[[4,29],[[14,[13]]]],[[6,[28,[29]]],[[14,[13]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1]],[[2,2]],[[3,3]],[[1,1],1],[[2,2],2],[[3,3],3],[23,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[1,1]],[[2,2]],[[3,3]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[1,1],1],[[2,2],2],[[3,3],3],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[13,25],26],[[13,25],26],[[38,25],26],[39,13],[[]],[[]],[[]],[[]],[40],[13,[[21,[41]]]],[[],36],[[],14],[[],14],[[],14],[[],14],[[],37],[[],37],0,0],"c":[],"p":[[3,"LineRequestFlags"],[3,"EventRequestFlags"],[3,"LineFlags"],[3,"LineHandle"],[6,"RawFd"],[3,"MultiLineHandle"],[3,"LineEventHandle"],[15,"u32"],[3,"Line"],[3,"Chip"],[3,"Lines"],[3,"ChipIterator"],[3,"Error"],[4,"Result"],[4,"IoctlKind"],[3,"LineInfo"],[4,"LineDirection"],[4,"EventType"],[4,"Ordering"],[15,"str"],[4,"Option"],[15,"bool"],[3,"LineEvent"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"LineIterator"],[15,"slice"],[15,"u8"],[3,"Vec"],[8,"Hasher"],[15,"usize"],[3,"Path"],[8,"AsRef"],[15,"u64"],[3,"String"],[3,"TypeId"],[4,"ErrorKind"],[3,"Error"],[3,"Demand"],[8,"Error"],[13,"Ioctl"]]},\
"i2cdev":{"doc":"i2cdev","t":"AAAQQIIIQKKKLKLLKLKLLKKLKKKCDSSSNDDEGSNSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGDDLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLL","n":["core","linux","mock","Error","Error","I2CDevice","I2CMessage","I2CTransfer","Message","read","read","smbus_process_block","smbus_process_word","smbus_read_block_data","smbus_read_byte","smbus_read_byte_data","smbus_read_i2c_block_data","smbus_read_word_data","smbus_write_block_data","smbus_write_byte","smbus_write_byte_data","smbus_write_i2c_block_data","smbus_write_quick","smbus_write_word_data","transfer","write","write","I2CMessage","I2CMessageFlags","IGNORE_ACK","IGNORE_NACK","INVERT_COMMAND","Io","LinuxI2CBus","LinuxI2CDevice","LinuxI2CError","LinuxI2CMessage","NO_START","Nix","READ","STOP","TEN_BIT_ADDRESS","USE_RECEIVE_LENGTH","all","as_raw_fd","as_raw_fd","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone_into","cmp","complement","contains","difference","empty","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_new","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","into","is_all","is_empty","new","new","not","partial_cmp","provide","read","read","remove","set","set_slave_address","set_smbus_pec","smbus_process_block","smbus_process_word","smbus_read_block_data","smbus_read_byte","smbus_read_byte_data","smbus_read_i2c_block_data","smbus_read_word_data","smbus_write_block_data","smbus_write_byte","smbus_write_byte_data","smbus_write_i2c_block_data","smbus_write_quick","smbus_write_word_data","sub","sub_assign","symmetric_difference","to_owned","to_string","toggle","transfer","transfer","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","write","write","I2CRegisterMap","I2CResult","MockI2CDevice","MockI2CMessage","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","from","from","from","into","into","into","new","new","read","read","regmap","smbus_process_block","smbus_read_block_data","smbus_read_i2c_block_data","smbus_write_block_data","smbus_write_i2c_block_data","smbus_write_quick","transfer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write_regs"],"q":[[0,"i2cdev"],[3,"i2cdev::core"],[27,"i2cdev::linux"],[147,"i2cdev::mock"]],"d":["Core I2C abstractions","Linux I2C device support","Mock I2C device","Error type","I2C transfer error type","Interface to an I2C Slave Device from an I2C Master","Read/Write I2C message","Interface to an I2C Bus from an I2C Master","I2C transfer message type","Read data from the device to fill the provided slice","Read data from device","Select a register, send 1 to 31 bytes of data to it, and …","Select a register, send 16 bits of data to it, and read 16 …","Read a block of up to 32 bytes from a device","Read a single byte from a device, without specifying a …","Read a single byte from a device, from a designated …","Read a block of up to 32 bytes from a device","Read 2 bytes from a given register on a device (lsb first)","Write a block of up to 32 bytes to a device","Write a single byte to a device, without specifying a …","Write a single byte to a specific register on a device","Write a block of up to 32 bytes from a device","This sends a single bit to the device, at the place of the …","Write 2 bytes to a given register on a device (lsb first)","Performs multiple serially chained I2C read/write …","Write the provided buffer to the device","Write data to device","","Various flags used by the i2c_rdwr ioctl on Linux. For …","Force message to ignore acknowledgement","Force this message to ignore I2C negative acknowlegements","If you need to invert a ‘read’ command bit to a ‘…","Input/output error","Linux I2C bus","Concrete linux I2C device","Linux I2C errors","Linux I2C message","Avoid sending an I2C start condition on this message","OS error","Read data, from slave to master","Force an I2C stop condition on this message","Use ten bit addressing on this message","Allow the client to specify how many bytes it will send","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","Create a new I2CDevice for the specified path, without …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Create a new I2CDevice for the specified path","Create a new LinuxI2CBus for the specified path","Returns the complement of this set of flags.","","","Read data from the device to fill the provided slice","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Set the slave address for this device","Enable/Disable PEC support for this device","Select a register, send 1 to 31 bytes of data to it, and …","Select a register, send 16 bits of data to it, and read 16 …","Read a block of up to 32 bytes from a device","Read a single byte from a device, without specifying a …","Read a single byte from a device, from a designated …","Read a block of up to 32 bytes from a device via …","Read 2 bytes form a given register on a device","Write a block of up to 32 bytes to a device","Write a single byte to a sdevice, without specifying a …","Write a single byte to a specific register on a device","Write a block of up to 32 bytes from a device via …","This sends a single bit to the device, at the place of the …","Write 2 bytes to a given register on a device","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Issue the provided sequence of I2C transactions","Issue the provided sequence of I2C transactions","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Write the provided buffer to the device","","Mock I2C device register map","I2C mock result type","Mock I2C device exposing a register map","Mock I2C message","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new mock I2C register map","Create a new mock I2C device","","","I2C register map","","","","","","","Issue the provided sequence of I2C transactions","","","","","","","","","","Write data to device","","Set several registers starting at the given offset"],"i":[0,0,0,33,34,0,0,0,34,33,35,33,33,33,33,33,33,33,33,33,33,33,33,33,34,33,35,0,0,8,8,8,12,0,0,0,0,8,12,8,8,8,8,8,9,11,8,8,8,8,8,8,8,9,11,12,8,9,11,12,8,12,8,8,8,8,8,8,8,8,8,8,12,12,8,8,8,8,8,9,9,11,12,12,12,8,8,8,8,8,8,8,8,8,9,11,12,8,8,8,9,11,8,8,12,9,25,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,12,8,9,11,9,11,12,8,9,11,12,8,9,11,12,8,8,9,25,0,0,0,0,28,30,29,28,30,29,28,29,28,30,29,28,30,29,28,29,30,29,29,29,29,29,29,29,29,29,28,30,29,28,30,29,28,30,29,30,29,28],"f":[0,0,0,0,0,0,0,0,0,[[[2,[1]]],3],[[[2,[1]]]],[[1,[2,[1]]],[[3,[[4,[1]]]]]],[[1,5],[[3,[5]]]],[1,[[3,[[4,[1]]]]]],[[],[[3,[1]]]],[1,[[3,[1]]]],[[1,1],[[3,[[4,[1]]]]]],[1,[[3,[5]]]],[[1,[2,[1]]],3],[1,3],[[1,1],3],[[1,[2,[1]]],3],[6,3],[[1,5],3],[2,[[3,[7]]]],[[[2,[1]]],3],[[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[9,10],[11,10],[[8,8],8],[[8,8]],[[8,8],8],[[8,8]],[8,5],[[8,8],8],[[8,8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,[[14,[13]]]],[8,8],[[]],[[8,8],15],[8,8],[[8,8],6],[[8,8],8],[[],8],[[8,8],6],[[],6],[[8,16]],[[12,17],18],[[12,17],18],[[8,17],18],[[8,17],18],[[8,17],18],[[8,17],18],[[8,17],18],[[[20,[19]],5],[[3,[9,12]]]],[[]],[[]],[[]],[21,12],[22,12],[[]],[5,[[14,[8]]]],[5,8],[5,8],[16,8],[[8,23]],[[8,8]],[[8,8],8],[[8,8],6],[[]],[[]],[[]],[[]],[8,6],[8,6],[[[20,[19]],5],[[3,[9,12]]]],[[[20,[19]]],[[3,[11,12]]]],[8,8],[[8,8],[[14,[15]]]],[24],[[9,[2,[1]]],[[3,[12]]]],[[[2,[1]]],25],[[8,8]],[[8,8,6]],[[9,5],[[3,[12]]]],[[9,6],[[3,[12]]]],[[9,1,[2,[1]]],[[3,[[4,[1]],12]]]],[[9,1,5],[[3,[5,12]]]],[[9,1],[[3,[[4,[1]],12]]]],[9,[[3,[1,12]]]],[[9,1],[[3,[1,12]]]],[[9,1,1],[[3,[[4,[1]],12]]]],[[9,1],[[3,[5,12]]]],[[9,1,[2,[1]]],[[3,[12]]]],[[9,1],[[3,[12]]]],[[9,1,1],[[3,[12]]]],[[9,1,[2,[1]]],[[3,[12]]]],[[9,6],[[3,[12]]]],[[9,1,5],[[3,[12]]]],[[8,8],8],[[8,8]],[[8,8],8],[[]],[[],26],[[8,8]],[[9,2],[[3,[7,12]]]],[[11,2],[[3,[7,12]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],27],[[],27],[[],27],[[],27],[[8,8],8],[[9,[2,[1]]],[[3,[12]]]],[[[2,[1]]],25],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],29],[[[2,[1]]],30],[[29,[2,[1]]],31],0,[[29,1,[2,[1]]],[[31,[[4,[1]]]]]],[[29,1],[[31,[[4,[1]]]]]],[[29,1,1],[[31,[[4,[1]]]]]],[[29,1,[2,[1]]],31],[[29,1,[2,[1]]],31],[[29,6],31],[[29,2],[[3,[7]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],27],[[],27],[[],27],[[[2,[1]]],30],[[29,[2,[1]]],31],[[28,32,[2,[1]]]]],"c":[],"p":[[15,"u8"],[15,"slice"],[4,"Result"],[3,"Vec"],[15,"u16"],[15,"bool"],[15,"u32"],[3,"I2CMessageFlags"],[3,"LinuxI2CDevice"],[6,"RawFd"],[3,"LinuxI2CBus"],[4,"LinuxI2CError"],[8,"Error"],[4,"Option"],[4,"Ordering"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"Path"],[8,"AsRef"],[6,"Error"],[3,"Error"],[8,"Hasher"],[3,"Demand"],[6,"LinuxI2CMessage"],[3,"String"],[3,"TypeId"],[3,"I2CRegisterMap"],[3,"MockI2CDevice"],[3,"MockI2CMessage"],[6,"I2CResult"],[15,"usize"],[8,"I2CDevice"],[8,"I2CTransfer"],[8,"I2CMessage"]]},\
"icm20689":{"doc":"","t":"EDNEEDDQNNNNNNNNNIDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLL","n":["AccelRange","Builder","Comm","Error","GyroRange","I2cInterface","ICM20689","InterfaceError","Pin","Range_1000dps","Range_16g","Range_2000dps","Range_250dps","Range_2g","Range_4g","Range_500dps","Range_8g","SensorInterface","SpiInterface","UnknownChipId","Unresponsive","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_identity","clone","clone","clone_into","clone_into","default","default","fmt","fmt","fmt","from","from","from","from","from","from","from","get_raw_accel","get_raw_gyro","get_scaled_accel","get_scaled_gyro","into","into","into","into","into","into","into","new","new","new_i2c","new_spi","read_vec3_i16","read_vec3_i16","read_vec3_i16","register_read","register_read","register_read","register_write","register_write","register_write","release","set_accel_range","set_gyro_range","setup","soft_reset","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","using_spi","using_spi","using_spi"],"q":[[0,"icm20689"]],"d":["The accelerometer has a user-programmable accelerometer …","","Sensor communication error","Errors in this crate","The gyroscope has a programmable full-scale range of …","","","Interface associated error type","Pin setting error","±1000","±16g","±2000","±250","±2g","±4g","±500","±8g","A method of communicating with the sensor","This combines the SPI peripheral and associated control …","Unrecognized chip ID","Sensor not responding","","","","","","","","","","","","","","","Read the sensor identifier and return true if they match a …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new driver using I2C interface","Create a new driver using SPI interface","read a vector of three i16 from the given register address","","","Read a single byte from a register address","","","Write a single byte to a register address","","","Release owned resources","Set the full scale range of the accelerometer","Set the full scale range of the gyroscope","give the sensor interface a chance to set up","Perform a soft reset on the sensor","","","","","","","","","","","","","","","","","","","","","","","","some features are enabled for SPI only","",""],"i":[0,0,10,0,0,0,0,1,10,7,8,7,7,8,8,7,8,0,0,10,10,19,23,24,2,10,7,8,19,23,24,2,10,7,8,2,7,8,7,8,7,8,10,7,8,19,23,24,2,10,7,8,2,2,2,2,19,23,24,2,10,7,8,19,23,24,24,1,19,23,1,19,23,1,19,23,23,2,2,2,2,7,8,19,23,24,2,10,7,8,19,23,24,2,10,7,8,19,23,24,2,10,7,8,1,19,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],[4,[3]]],[[6,[5]]]],[7,7],[8,8],[[]],[[]],[[],7],[[],8],[[[10,[9,9]],11],12],[[7,11],12],[[8,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[6,[[14,[13]]]]]],[[[2,[1]]],[[6,[[14,[13]]]]]],[[[2,[1]]],[[6,[[14,[15]]]]]],[[[2,[1]]],[[6,[[14,[15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[16,17,18]],3],[[19,[[0,[16,17,18]]]]]],[[[0,[[20,[3]],[21,[3]]]],22],[[23,[[0,[[20,[3]],[21,[3]]]],22]]]],[[24,[0,[17,16,18]],3],[[2,[[19,[[0,[17,16,18]]]]]]]],[[[0,[[21,[3]],[20,[3]]]],22],[[2,[[23,[[0,[[21,[3]],[20,[3]]]],22]]]]]],[3,[[6,[[14,[13]]]]]],[[[19,[[0,[16,17,18]]]],3],[[6,[[14,[13]]]]]],[[[23,[[0,[[20,[3]],[21,[3]]]],22]],3],[[6,[[14,[13]]]]]],[3,[[6,[3]]]],[[[19,[[0,[16,17,18]]]],3],[[6,[3]]]],[[[23,[[0,[[20,[3]],[21,[3]]]],22]],3],[[6,[3]]]],[[3,3],6],[[[19,[[0,[16,17,18]]]],3,3],6],[[[23,[[0,[[20,[3]],[21,[3]]]],22]],3,3],6],[[[23,[[0,[[20,[3]],[21,[3]]]],22]]]],[[[2,[1]],8],6],[[[2,[1]],7],6],[[[2,[1]],[4,[3]]],6],[[[2,[1]],[4,[3]]],6],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],5],[[[19,[[0,[16,17,18]]]]],5],[[[23,[[0,[[20,[3]],[21,[3]]]],22]]],5]],"c":[],"p":[[8,"SensorInterface"],[3,"ICM20689"],[15,"u8"],[8,"DelayMs"],[15,"bool"],[4,"Result"],[4,"GyroRange"],[4,"AccelRange"],[8,"Debug"],[4,"Error"],[3,"Formatter"],[6,"Result"],[15,"i16"],[15,"array"],[15,"f32"],[8,"Read"],[8,"Write"],[8,"WriteRead"],[3,"I2cInterface"],[8,"Write"],[8,"Transfer"],[8,"OutputPin"],[3,"SpiInterface"],[3,"Builder"],[3,"TypeId"]]},\
"ioctl_rs":{"doc":"","t":"RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFFFFFFF","n":["FIOASYNC","FIOCLEX","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDRARP","SIOCGARP","SIOCGIFADDR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFSLAVE","SIOCGPGRP","SIOCGRARP","SIOCGSTAMP","SIOCSARP","SIOCSIFADDR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNETMASK","SIOCSIFSLAVE","SIOCSPGRP","SIOCSRARP","TCFLSH","TCGETA","TCGETS","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETSF","TCSETSW","TCXONC","TIOCCONS","TIOCEXCL","TIOCGETD","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGSERIAL","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","ioctl","tiocexcl","tiocmbic","tiocmbis","tiocmget","tiocmset","tiocnxcl"],"q":[[0,"ioctl_rs"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Put the terminal in exclusive mode.","Clear the indicated modem bits.","Set the indicated modem bits.","Get the status of modem bits.","Set the status of modem bits.","Disable exclusive mode."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[1,3],2],[[1,3],2],[1,[[2,[3]]]],[[1,3],2],[1,2]],"c":[],"p":[[6,"RawFd"],[6,"Result"],[6,"c_int"]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"","n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ABS_CNT","ABS_MAX","ACCOUNTING","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","ADFS_SUPER_MAGIC","ADJ_ESTERROR","ADJ_FREQUENCY","ADJ_MAXERROR","ADJ_MICRO","ADJ_NANO","ADJ_OFFSET","ADJ_OFFSET_SINGLESHOT","ADJ_OFFSET_SS_READ","ADJ_SETOFFSET","ADJ_STATUS","ADJ_TAI","ADJ_TICK","ADJ_TIMECONST","AFFS_SUPER_MAGIC","AFS_SUPER_MAGIC","AF_ALG","AF_APPLETALK","AF_ASH","AF_ATMPVC","AF_ATMSVC","AF_AX25","AF_BLUETOOTH","AF_BRIDGE","AF_CAIF","AF_CAN","AF_DECnet","AF_ECONET","AF_IB","AF_IEEE802154","AF_INET","AF_INET6","AF_IPX","AF_IRDA","AF_ISDN","AF_IUCV","AF_KEY","AF_LLC","AF_LOCAL","AF_MPLS","AF_NETBEUI","AF_NETLINK","AF_NETROM","AF_NFC","AF_PACKET","AF_PHONET","AF_PPPOX","AF_RDS","AF_ROSE","AF_ROUTE","AF_RXRPC","AF_SECURITY","AF_SNA","AF_TIPC","AF_UNIX","AF_UNSPEC","AF_VSOCK","AF_WANPIPE","AF_X25","AF_XDP","AIO_ALLDONE","AIO_CANCELED","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_V4MAPPED","ALG_OP_DECRYPT","ALG_OP_ENCRYPT","ALG_SET_AEAD_ASSOCLEN","ALG_SET_AEAD_AUTHSIZE","ALG_SET_IV","ALG_SET_KEY","ALG_SET_OP","ALT_DIGITS","AM_STR","ARPD_FLUSH","ARPD_LOOKUP","ARPD_UPDATE","ARPHRD_ADAPT","ARPHRD_APPLETLK","ARPHRD_ARCNET","ARPHRD_ASH","ARPHRD_ATM","ARPHRD_AX25","ARPHRD_BIF","ARPHRD_CAN","ARPHRD_CHAOS","ARPHRD_CISCO","ARPHRD_CSLIP","ARPHRD_CSLIP6","ARPHRD_DDCMP","ARPHRD_DLCI","ARPHRD_ECONET","ARPHRD_EETHER","ARPHRD_ETHER","ARPHRD_EUI64","ARPHRD_FCAL","ARPHRD_FCFABRIC","ARPHRD_FCPL","ARPHRD_FCPP","ARPHRD_FDDI","ARPHRD_FRAD","ARPHRD_HDLC","ARPHRD_HIPPI","ARPHRD_HWX25","ARPHRD_IEEE1394","ARPHRD_IEEE802","ARPHRD_IEEE80211","ARPHRD_IEEE80211_PRISM","ARPHRD_IEEE80211_RADIOTAP","ARPHRD_IEEE802154","ARPHRD_IEEE802_TR","ARPHRD_INFINIBAND","ARPHRD_IPDDP","ARPHRD_IPGRE","ARPHRD_IRDA","ARPHRD_LAPB","ARPHRD_LOCALTLK","ARPHRD_LOOPBACK","ARPHRD_METRICOM","ARPHRD_NETROM","ARPHRD_NONE","ARPHRD_PIMREG","ARPHRD_PPP","ARPHRD_PRONET","ARPHRD_RAWHDLC","ARPHRD_ROSE","ARPHRD_RSRVD","ARPHRD_SIT","ARPHRD_SKIP","ARPHRD_SLIP","ARPHRD_SLIP6","ARPHRD_TUNNEL","ARPHRD_TUNNEL6","ARPHRD_VOID","ARPHRD_X25","ARPOP_InREPLY","ARPOP_InREQUEST","ARPOP_NAK","ARPOP_REPLY","ARPOP_REQUEST","ARPOP_RREPLY","ARPOP_RREQUEST","ATF_COM","ATF_DONTPUB","ATF_MAGIC","ATF_NETMASK","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_BASE","AT_BASE_PLATFORM","AT_CLKTCK","AT_EACCESS","AT_EGID","AT_EMPTY_PATH","AT_ENTRY","AT_EUID","AT_EXECFD","AT_EXECFN","AT_FDCWD","AT_FLAGS","AT_GID","AT_HWCAP","AT_HWCAP2","AT_IGNORE","AT_NOTELF","AT_NO_AUTOMOUNT","AT_NULL","AT_PAGESZ","AT_PHDR","AT_PHENT","AT_PHNUM","AT_PLATFORM","AT_RANDOM","AT_RECURSIVE","AT_REMOVEDIR","AT_SECURE","AT_STATX_DONT_SYNC","AT_STATX_FORCE_SYNC","AT_STATX_SYNC_AS_STAT","AT_STATX_SYNC_TYPE","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AT_SYSINFO_EHDR","AT_UID","AUTOFS_SUPER_MAGIC","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BINDERFS_SUPER_MAGIC","BLKIOMIN","BLKIOOPT","BLKPBSZGET","BLKSSZGET","BOOT_TIME","BOTHER","BPF_ABS","BPF_ADD","BPF_ALU","BPF_AND","BPF_B","BPF_DIV","BPF_FS_MAGIC","BPF_H","BPF_IMM","BPF_IND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JSET","BPF_JUMP","BPF_K","BPF_LD","BPF_LDX","BPF_LEN","BPF_LL_OFF","BPF_LSH","BPF_MAXINSNS","BPF_MEM","BPF_MEMWORDS","BPF_MISC","BPF_MISCOP","BPF_MOD","BPF_MSH","BPF_MUL","BPF_NEG","BPF_NET_OFF","BPF_OR","BPF_RET","BPF_RSH","BPF_RVAL","BPF_ST","BPF_STMT","BPF_STX","BPF_SUB","BPF_W","BPF_X","BPF_XOR","BRKINT","BS0","BS1","BSDLY","BTRFS_SUPER_MAGIC","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_MCEERR_AO","BUS_MCEERR_AR","BUS_OBJERR","CANFD_BRS","CANFD_ESI","CANFD_MAX_DLC","CANFD_MAX_DLEN","CANFD_MTU","CAN_BCM","CAN_EFF_FLAG","CAN_EFF_ID_BITS","CAN_EFF_MASK","CAN_ERR_FLAG","CAN_ERR_MASK","CAN_INV_FILTER","CAN_ISOTP","CAN_J1939","CAN_MAX_DLC","CAN_MAX_DLEN","CAN_MCNET","CAN_MTU","CAN_NPROTO","CAN_RAW","CAN_RAW_ERR_FILTER","CAN_RAW_FD_FRAMES","CAN_RAW_FILTER","CAN_RAW_FILTER_MAX","CAN_RAW_JOIN_FILTERS","CAN_RAW_LOOPBACK","CAN_RAW_RECV_OWN_MSGS","CAN_RTR_FLAG","CAN_SFF_ID_BITS","CAN_SFF_MASK","CAN_TP16","CAN_TP20","CBAUD","CBAUDEX","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CIBAUD","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_TAI","CLOCK_THREAD_CPUTIME_ID","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CLOSE_RANGE_CLOEXEC","CLOSE_RANGE_UNSHARE","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CMSPAR","CODA_SUPER_MAGIC","CODESET","CPU_ALLOC_SIZE","CPU_CLR","CPU_COUNT","CPU_COUNT_S","CPU_EQUAL","CPU_ISSET","CPU_SET","CPU_SETSIZE","CPU_ZERO","CR0","CR1","CR2","CR3","CRAMFS_MAGIC","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTRL_ATTR_FAMILY_ID","CTRL_ATTR_FAMILY_NAME","CTRL_ATTR_HDRSIZE","CTRL_ATTR_MAXATTR","CTRL_ATTR_MCAST_GROUPS","CTRL_ATTR_MCAST_GRP_ID","CTRL_ATTR_MCAST_GRP_NAME","CTRL_ATTR_MCAST_GRP_UNSPEC","CTRL_ATTR_OPS","CTRL_ATTR_OP_FLAGS","CTRL_ATTR_OP_ID","CTRL_ATTR_OP_UNSPEC","CTRL_ATTR_UNSPEC","CTRL_ATTR_VERSION","CTRL_CMD_DELFAMILY","CTRL_CMD_DELMCAST_GRP","CTRL_CMD_DELOPS","CTRL_CMD_GETFAMILY","CTRL_CMD_GETMCAST_GRP","CTRL_CMD_GETOPS","CTRL_CMD_NEWFAMILY","CTRL_CMD_NEWMCAST_GRP","CTRL_CMD_NEWOPS","CTRL_CMD_UNSPEC","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DCCP_SERVICE_LIST_MAX_LEN","DCCP_SOCKOPT_AVAILABLE_CCIDS","DCCP_SOCKOPT_CCID","DCCP_SOCKOPT_CCID_RX_INFO","DCCP_SOCKOPT_CCID_TX_INFO","DCCP_SOCKOPT_CHANGE_L","DCCP_SOCKOPT_CHANGE_R","DCCP_SOCKOPT_GET_CUR_MPS","DCCP_SOCKOPT_PACKET_SIZE","DCCP_SOCKOPT_QPOLICY_ID","DCCP_SOCKOPT_QPOLICY_TXQLEN","DCCP_SOCKOPT_RECV_CSCOV","DCCP_SOCKOPT_RX_CCID","DCCP_SOCKOPT_SEND_CSCOV","DCCP_SOCKOPT_SERVER_TIMEWAIT","DCCP_SOCKOPT_SERVICE","DCCP_SOCKOPT_TX_CCID","DEAD_PROCESS","DEBUGFS_MAGIC","DEVPTS_SUPER_MAGIC","DIR","DS","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","ECRYPTFS_SUPER_MAGIC","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EFLAGS","EFS_SUPER_MAGIC","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EI_ABIVERSION","EI_CLASS","EI_DATA","EI_MAG0","EI_MAG1","EI_MAG2","EI_MAG3","EI_NIDENT","EI_OSABI","EI_PAD","EI_VERSION","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELFCLASS32","ELFCLASS64","ELFCLASSNONE","ELFCLASSNUM","ELFDATA2LSB","ELFDATA2MSB","ELFDATANONE","ELFDATANUM","ELFMAG0","ELFMAG1","ELFMAG2","ELFMAG3","ELFOSABI_AIX","ELFOSABI_ARM","ELFOSABI_ARM_AEABI","ELFOSABI_FREEBSD","ELFOSABI_GNU","ELFOSABI_HPUX","ELFOSABI_IRIX","ELFOSABI_LINUX","ELFOSABI_MODESTO","ELFOSABI_NETBSD","ELFOSABI_NONE","ELFOSABI_OPENBSD","ELFOSABI_SOLARIS","ELFOSABI_STANDALONE","ELFOSABI_SYSV","ELFOSABI_TRU64","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","EM_386","EM_68HC05","EM_68HC08","EM_68HC11","EM_68HC12","EM_68HC16","EM_68K","EM_860","EM_88K","EM_960","EM_AARCH64","EM_ALPHA","EM_ARC","EM_ARC_A5","EM_ARM","EM_AVR","EM_COLDFIRE","EM_CRIS","EM_D10V","EM_D30V","EM_FAKE_ALPHA","EM_FIREPATH","EM_FR20","EM_FR30","EM_FX66","EM_H8S","EM_H8_300","EM_H8_300H","EM_H8_500","EM_HUANY","EM_IA_64","EM_JAVELIN","EM_M32","EM_M32R","EM_ME16","EM_MIPS","EM_MIPS_RS3_LE","EM_MIPS_X","EM_MMA","EM_MMIX","EM_MN10200","EM_MN10300","EM_NCPU","EM_NDR1","EM_NONE","EM_OPENRISC","EM_PARISC","EM_PCP","EM_PDSP","EM_PJ","EM_PPC","EM_PPC64","EM_PRISM","EM_RCE","EM_RH32","EM_S370","EM_S390","EM_SH","EM_SPARC","EM_SPARC32PLUS","EM_SPARCV9","EM_ST100","EM_ST19","EM_ST7","EM_ST9PLUS","EM_STARCORE","EM_SVX","EM_TILEGX","EM_TILEPRO","EM_TINYJ","EM_TRICORE","EM_V800","EM_V850","EM_VAX","EM_VPP500","EM_X86_64","EM_XTENSA","EM_ZSP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOATTR","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ES","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETH_ALEN","ETH_DATA_LEN","ETH_FCS_LEN","ETH_FRAME_LEN","ETH_HLEN","ETH_P_1588","ETH_P_8021AD","ETH_P_8021AH","ETH_P_8021Q","ETH_P_80221","ETH_P_802_2","ETH_P_802_3","ETH_P_802_3_MIN","ETH_P_802_EX1","ETH_P_AARP","ETH_P_AF_IUCV","ETH_P_ALL","ETH_P_AOE","ETH_P_ARCNET","ETH_P_ARP","ETH_P_ATALK","ETH_P_ATMFATE","ETH_P_ATMMPOA","ETH_P_AX25","ETH_P_BATMAN","ETH_P_BPQ","ETH_P_CAIF","ETH_P_CANFD","ETH_P_CONTROL","ETH_P_CUST","ETH_P_DDCMP","ETH_P_DEC","ETH_P_DIAG","ETH_P_DNA_DL","ETH_P_DNA_RC","ETH_P_DNA_RT","ETH_P_DSA","ETH_P_ECONET","ETH_P_EDSA","ETH_P_FCOE","ETH_P_FIP","ETH_P_HDLC","ETH_P_IEEE802154","ETH_P_IEEEPUP","ETH_P_IEEEPUPAT","ETH_P_IP","ETH_P_IPV6","ETH_P_IPX","ETH_P_IRDA","ETH_P_LAT","ETH_P_LINK_CTL","ETH_P_LOCALTALK","ETH_P_LOOP","ETH_P_LOOPBACK","ETH_P_MACSEC","ETH_P_MOBITEX","ETH_P_MPLS_MC","ETH_P_MPLS_UC","ETH_P_MVRP","ETH_P_PAE","ETH_P_PAUSE","ETH_P_PHONET","ETH_P_PPPTALK","ETH_P_PPP_DISC","ETH_P_PPP_MP","ETH_P_PPP_SES","ETH_P_PRP","ETH_P_PUP","ETH_P_PUPAT","ETH_P_QINQ1","ETH_P_QINQ2","ETH_P_QINQ3","ETH_P_RARP","ETH_P_SCA","ETH_P_SLOW","ETH_P_SNAP","ETH_P_TDLS","ETH_P_TEB","ETH_P_TIPC","ETH_P_TRAILER","ETH_P_TR_802_2","ETH_P_WAN_PPP","ETH_P_WCCP","ETH_P_X25","ETH_ZLEN","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","ET_CORE","ET_DYN","ET_EXEC","ET_HIOS","ET_HIPROC","ET_LOOS","ET_LOPROC","ET_NONE","ET_NUM","ET_REL","EUCLEAN","EUNATCH","EUSERS","EV_CNT","EV_CURRENT","EV_MAX","EV_NONE","EV_NUM","EWOULDBLOCK","EXDEV","EXFULL","EXIT_FAILURE","EXIT_SUCCESS","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","EXTA","EXTB","EXTPROC","Elf32_Addr","Elf32_Chdr","Elf32_Ehdr","Elf32_Half","Elf32_Off","Elf32_Phdr","Elf32_Section","Elf32_Shdr","Elf32_Sym","Elf32_Word","Elf64_Addr","Elf64_Chdr","Elf64_Ehdr","Elf64_Half","Elf64_Off","Elf64_Phdr","Elf64_Section","Elf64_Shdr","Elf64_Sxword","Elf64_Sym","Elf64_Word","Elf64_Xword","F2FS_SUPER_MAGIC","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FANOTIFY_METADATA_VERSION","FAN_ACCESS","FAN_ACCESS_PERM","FAN_ALLOW","FAN_CLASS_CONTENT","FAN_CLASS_NOTIF","FAN_CLASS_PRE_CONTENT","FAN_CLOEXEC","FAN_CLOSE","FAN_CLOSE_NOWRITE","FAN_CLOSE_WRITE","FAN_DENY","FAN_EVENT_ON_CHILD","FAN_MARK_ADD","FAN_MARK_DONT_FOLLOW","FAN_MARK_FILESYSTEM","FAN_MARK_FLUSH","FAN_MARK_IGNORED_MASK","FAN_MARK_IGNORED_SURV_MODIFY","FAN_MARK_INODE","FAN_MARK_MOUNT","FAN_MARK_ONLYDIR","FAN_MARK_REMOVE","FAN_MODIFY","FAN_NOFD","FAN_NONBLOCK","FAN_ONDIR","FAN_OPEN","FAN_OPEN_PERM","FAN_Q_OVERFLOW","FAN_UNLIMITED_MARKS","FAN_UNLIMITED_QUEUE","FDPIC_FUNCPTRS","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FF_CNT","FF_MAX","FICLONE","FICLONERANGE","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIONBIO","FIONCLEX","FIONREAD","FIOQSIZE","FLUSHO","FOPEN_MAX","FS","FS_BASE","FUSE_SUPER_MAGIC","FUTEXFS_SUPER_MAGIC","FUTEX_BITSET_MATCH_ANY","FUTEX_CLOCK_REALTIME","FUTEX_CMD_MASK","FUTEX_CMP_REQUEUE","FUTEX_CMP_REQUEUE_PI","FUTEX_FD","FUTEX_LOCK_PI","FUTEX_LOCK_PI2","FUTEX_OP","FUTEX_OP_ADD","FUTEX_OP_ANDN","FUTEX_OP_CMP_EQ","FUTEX_OP_CMP_GE","FUTEX_OP_CMP_GT","FUTEX_OP_CMP_LE","FUTEX_OP_CMP_LT","FUTEX_OP_CMP_NE","FUTEX_OP_OPARG_SHIFT","FUTEX_OP_OR","FUTEX_OP_SET","FUTEX_OP_XOR","FUTEX_PRIVATE_FLAG","FUTEX_REQUEUE","FUTEX_TRYLOCK_PI","FUTEX_UNLOCK_PI","FUTEX_WAIT","FUTEX_WAIT_BITSET","FUTEX_WAIT_REQUEUE_PI","FUTEX_WAKE","FUTEX_WAKE_BITSET","FUTEX_WAKE_OP","F_ADD_SEALS","F_CANCELLK","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLEASE","F_GETLK","F_GETOWN","F_GETPIPE_SZ","F_GET_SEALS","F_LOCK","F_NOTIFY","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_OK","F_RDLCK","F_SEAL_FUTURE_WRITE","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLEASE","F_SETLK","F_SETLKW","F_SETOWN","F_SETPIPE_SZ","F_TEST","F_TLOCK","F_ULOCK","F_UNLCK","F_WRLCK","GENL_ADMIN_PERM","GENL_CMD_CAP_DO","GENL_CMD_CAP_DUMP","GENL_CMD_CAP_HASPOL","GENL_ID_CTRL","GENL_ID_PMCRAID","GENL_ID_VFS_DQUOT","GENL_MAX_ID","GENL_MIN_ID","GENL_NAMSIZ","GENL_UNS_ADMIN_PERM","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRND_INSECURE","GRND_NONBLOCK","GRND_RANDOM","GRPQUOTA","GS","GS_BASE","HOSTFS_SUPER_MAGIC","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","HUGETLB_FLAG_ENCODE_16GB","HUGETLB_FLAG_ENCODE_16MB","HUGETLB_FLAG_ENCODE_1GB","HUGETLB_FLAG_ENCODE_1MB","HUGETLB_FLAG_ENCODE_256MB","HUGETLB_FLAG_ENCODE_2GB","HUGETLB_FLAG_ENCODE_2MB","HUGETLB_FLAG_ENCODE_32MB","HUGETLB_FLAG_ENCODE_512KB","HUGETLB_FLAG_ENCODE_512MB","HUGETLB_FLAG_ENCODE_64KB","HUGETLB_FLAG_ENCODE_8MB","HUGETLB_FLAG_ENCODE_MASK","HUGETLB_FLAG_ENCODE_SHIFT","HUPCL","HWTSTAMP_FILTER_ALL","HWTSTAMP_FILTER_NONE","HWTSTAMP_FILTER_NTP_ALL","HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V1_L4_EVENT","HWTSTAMP_FILTER_PTP_V1_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_SYNC","HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L4_EVENT","HWTSTAMP_FILTER_PTP_V2_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_SYNC","HWTSTAMP_FILTER_SOME","HWTSTAMP_TX_OFF","HWTSTAMP_TX_ON","HWTSTAMP_TX_ONESTEP_P2P","HWTSTAMP_TX_ONESTEP_SYNC","IBSHIFT","ICANON","ICRNL","IEXTEN","IFA_ADDRESS","IFA_ANYCAST","IFA_BROADCAST","IFA_CACHEINFO","IFA_FLAGS","IFA_F_DADFAILED","IFA_F_DEPRECATED","IFA_F_HOMEADDRESS","IFA_F_MANAGETEMPADDR","IFA_F_MCAUTOJOIN","IFA_F_NODAD","IFA_F_NOPREFIXROUTE","IFA_F_OPTIMISTIC","IFA_F_PERMANENT","IFA_F_SECONDARY","IFA_F_STABLE_PRIVACY","IFA_F_TEMPORARY","IFA_F_TENTATIVE","IFA_LABEL","IFA_LOCAL","IFA_MULTICAST","IFA_UNSPEC","IFF_ALLMULTI","IFF_ATTACH_QUEUE","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DETACH_QUEUE","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_MULTI_QUEUE","IFF_NOARP","IFF_NOFILTER","IFF_NOTRAILERS","IFF_NO_PI","IFF_ONE_QUEUE","IFF_PERSIST","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_TUN_EXCL","IFF_UP","IFF_VNET_HDR","IFLA_ADDRESS","IFLA_AF_SPEC","IFLA_ALLMULTI","IFLA_ALT_IFNAME","IFLA_BROADCAST","IFLA_CARRIER","IFLA_CARRIER_CHANGES","IFLA_CARRIER_DOWN_COUNT","IFLA_CARRIER_UP_COUNT","IFLA_COST","IFLA_EVENT","IFLA_EXT_MASK","IFLA_GROUP","IFLA_GRO_MAX_SIZE","IFLA_GSO_MAX_SEGS","IFLA_GSO_MAX_SIZE","IFLA_IFALIAS","IFLA_IFNAME","IFLA_IF_NETNSID","IFLA_INFO_DATA","IFLA_INFO_KIND","IFLA_INFO_SLAVE_DATA","IFLA_INFO_SLAVE_KIND","IFLA_INFO_UNSPEC","IFLA_INFO_XSTATS","IFLA_LINK","IFLA_LINKINFO","IFLA_LINKMODE","IFLA_LINK_NETNSID","IFLA_MAP","IFLA_MASTER","IFLA_MAX_MTU","IFLA_MIN_MTU","IFLA_MTU","IFLA_NET_NS_FD","IFLA_NET_NS_PID","IFLA_NEW_IFINDEX","IFLA_NEW_NETNSID","IFLA_NUM_RX_QUEUES","IFLA_NUM_TX_QUEUES","IFLA_NUM_VF","IFLA_OPERSTATE","IFLA_PAD","IFLA_PARENT_DEV_BUS_NAME","IFLA_PARENT_DEV_NAME","IFLA_PERM_ADDRESS","IFLA_PHYS_PORT_ID","IFLA_PHYS_PORT_NAME","IFLA_PHYS_SWITCH_ID","IFLA_PORT_SELF","IFLA_PRIORITY","IFLA_PROMISCUITY","IFLA_PROP_LIST","IFLA_PROTINFO","IFLA_PROTO_DOWN","IFLA_PROTO_DOWN_REASON","IFLA_QDISC","IFLA_STATS","IFLA_STATS64","IFLA_TARGET_NETNSID","IFLA_TSO_MAX_SEGS","IFLA_TSO_MAX_SIZE","IFLA_TXQLEN","IFLA_UNSPEC","IFLA_VFINFO_LIST","IFLA_VF_PORTS","IFLA_WEIGHT","IFLA_WIRELESS","IFLA_XDP","IFNAMSIZ","IF_LINK_MODE_DEFAULT","IF_LINK_MODE_DORMANT","IF_LINK_MODE_TESTING","IF_NAMESIZE","IF_OPER_DORMANT","IF_OPER_DOWN","IF_OPER_LOWERLAYERDOWN","IF_OPER_NOTPRESENT","IF_OPER_TESTING","IF_OPER_UNKNOWN","IF_OPER_UP","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INPUT_PROP_CNT","INPUT_PROP_MAX","INT_MAX","INT_MIN","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_EXCL_UNLINK","IN_IGNORED","IN_ISDIR","IN_MASK_ADD","IN_MASK_CREATE","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IP6T_SO_ORIGINAL_DST","IPC_CREAT","IPC_EXCL","IPC_INFO","IPC_NOWAIT","IPC_PRIVATE","IPC_RMID","IPC_SET","IPC_STAT","IPDEFTTL","IPOPT_CLASS","IPOPT_CLASS_MASK","IPOPT_CONTROL","IPOPT_COPIED","IPOPT_COPY","IPOPT_END","IPOPT_EOL","IPOPT_LSRR","IPOPT_MEASUREMENT","IPOPT_MINOFF","IPOPT_NOOP","IPOPT_NOP","IPOPT_NUMBER","IPOPT_NUMBER_MASK","IPOPT_OFFSET","IPOPT_OLEN","IPOPT_OPTVAL","IPOPT_RA","IPOPT_RESERVED1","IPOPT_RESERVED2","IPOPT_RR","IPOPT_SEC","IPOPT_SID","IPOPT_SSRR","IPOPT_TIMESTAMP","IPOPT_TS","IPOPT_TS_PRESPEC","IPOPT_TS_TSANDADDR","IPOPT_TS_TSONLY","IPPROTO_AH","IPPROTO_BEETPH","IPPROTO_COMP","IPPROTO_DCCP","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_ENCAP","IPPROTO_ESP","IPPROTO_FRAGMENT","IPPROTO_GRE","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IGMP","IPPROTO_IP","IPPROTO_IPIP","IPPROTO_IPV6","IPPROTO_MAX","IPPROTO_MH","IPPROTO_MPLS","IPPROTO_MPTCP","IPPROTO_MTP","IPPROTO_NONE","IPPROTO_PIM","IPPROTO_PUP","IPPROTO_RAW","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_SCTP","IPPROTO_TCP","IPPROTO_TP","IPPROTO_UDP","IPPROTO_UDPLITE","IPTOS_ECN","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOT_ECT","IPTOS_LOWDELAY","IPTOS_MINCOST","IPTOS_PREC","IPTOS_PREC_CRITIC_ECP","IPTOS_PREC_FLASH","IPTOS_PREC_FLASHOVERRIDE","IPTOS_PREC_IMMEDIATE","IPTOS_PREC_INTERNETCONTROL","IPTOS_PREC_MASK","IPTOS_PREC_NETCONTROL","IPTOS_PREC_PRIORITY","IPTOS_PREC_ROUTINE","IPTOS_RELIABILITY","IPTOS_THROUGHPUT","IPTOS_TOS","IPTOS_TOS_MASK","IPV6_2292DSTOPTS","IPV6_2292HOPLIMIT","IPV6_2292HOPOPTS","IPV6_2292PKTINFO","IPV6_2292PKTOPTIONS","IPV6_2292RTHDR","IPV6_ADDRFORM","IPV6_ADDR_PREFERENCES","IPV6_ADD_MEMBERSHIP","IPV6_AUTHHDR","IPV6_AUTOFLOWLABEL","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_DROP_MEMBERSHIP","IPV6_DSTOPTS","IPV6_FLOWINFO","IPV6_FLOWINFO_FLOWLABEL","IPV6_FLOWINFO_PRIORITY","IPV6_FLOWINFO_SEND","IPV6_FLOWLABEL_MGR","IPV6_FREEBIND","IPV6_HDRINCL","IPV6_HOPLIMIT","IPV6_HOPOPTS","IPV6_IPSEC_POLICY","IPV6_JOIN_ANYCAST","IPV6_LEAVE_ANYCAST","IPV6_MINHOPCOUNT","IPV6_MTU","IPV6_MTU_DISCOVER","IPV6_MULTICAST_ALL","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_NEXTHOP","IPV6_ORIGDSTADDR","IPV6_PATHMTU","IPV6_PKTINFO","IPV6_PMTUDISC_DO","IPV6_PMTUDISC_DONT","IPV6_PMTUDISC_INTERFACE","IPV6_PMTUDISC_OMIT","IPV6_PMTUDISC_PROBE","IPV6_PMTUDISC_WANT","IPV6_PREFER_SRC_CGA","IPV6_PREFER_SRC_COA","IPV6_PREFER_SRC_HOME","IPV6_PREFER_SRC_NONCGA","IPV6_PREFER_SRC_PUBLIC","IPV6_PREFER_SRC_PUBTMP_DEFAULT","IPV6_PREFER_SRC_TMP","IPV6_RECVDSTOPTS","IPV6_RECVERR","IPV6_RECVFRAGSIZE","IPV6_RECVHOPLIMIT","IPV6_RECVHOPOPTS","IPV6_RECVORIGDSTADDR","IPV6_RECVPATHMTU","IPV6_RECVPKTINFO","IPV6_RECVRTHDR","IPV6_RECVTCLASS","IPV6_ROUTER_ALERT","IPV6_ROUTER_ALERT_ISOLATE","IPV6_RTHDR","IPV6_RTHDRDSTOPTS","IPV6_RTHDR_LOOSE","IPV6_RTHDR_STRICT","IPV6_TCLASS","IPV6_TRANSPARENT","IPV6_UNICAST_HOPS","IPV6_UNICAST_IF","IPV6_V6ONLY","IPV6_XFRM_POLICY","IPVERSION","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BIND_ADDRESS_NO_PORT","IP_BLOCK_SOURCE","IP_CHECKSUM","IP_DEFAULT_MULTICAST_LOOP","IP_DEFAULT_MULTICAST_TTL","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_FREEBIND","IP_HDRINCL","IP_IPSEC_POLICY","IP_MINTTL","IP_MSFILTER","IP_MTU","IP_MTU_DISCOVER","IP_MULTICAST_ALL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_NODEFRAG","IP_OPTIONS","IP_ORIGDSTADDR","IP_PASSSEC","IP_PKTINFO","IP_PKTOPTIONS","IP_PMTUDISC_DO","IP_PMTUDISC_DONT","IP_PMTUDISC_INTERFACE","IP_PMTUDISC_OMIT","IP_PMTUDISC_PROBE","IP_PMTUDISC_WANT","IP_RECVERR","IP_RECVFRAGSIZE","IP_RECVOPTS","IP_RECVORIGDSTADDR","IP_RECVTOS","IP_RECVTTL","IP_RETOPTS","IP_ROUTER_ALERT","IP_TOS","IP_TRANSPARENT","IP_TTL","IP_UNBLOCK_SOURCE","IP_UNICAST_IF","IP_XFRM_POLICY","ISIG","ISOFS_SUPER_MAGIC","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","J1939_EE_INFO_NONE","J1939_EE_INFO_RX_ABORT","J1939_EE_INFO_RX_DPO","J1939_EE_INFO_RX_RTS","J1939_EE_INFO_TX_ABORT","J1939_FILTER_MAX","J1939_IDLE_ADDR","J1939_MAX_UNICAST_ADDR","J1939_NLA_BYTES_ACKED","J1939_NLA_DEST_ADDR","J1939_NLA_DEST_NAME","J1939_NLA_PAD","J1939_NLA_PGN","J1939_NLA_SRC_ADDR","J1939_NLA_SRC_NAME","J1939_NLA_TOTAL_SIZE","J1939_NO_ADDR","J1939_NO_NAME","J1939_NO_PGN","J1939_PGN_ADDRESS_CLAIMED","J1939_PGN_ADDRESS_COMMANDED","J1939_PGN_MAX","J1939_PGN_PDU1_MAX","J1939_PGN_REQUEST","JFFS2_SUPER_MAGIC","KERNEL_VERSION","KEXEC_ARCH_MASK","KEXEC_FILE_NO_INITRAMFS","KEXEC_FILE_ON_CRASH","KEXEC_FILE_UNLOAD","KEXEC_ON_CRASH","KEXEC_PRESERVE_CONTEXT","KEYCTL_ASSUME_AUTHORITY","KEYCTL_CAPABILITIES","KEYCTL_CAPS0_BIG_KEY","KEYCTL_CAPS0_CAPABILITIES","KEYCTL_CAPS0_DIFFIE_HELLMAN","KEYCTL_CAPS0_INVALIDATE","KEYCTL_CAPS0_MOVE","KEYCTL_CAPS0_PERSISTENT_KEYRINGS","KEYCTL_CAPS0_PUBLIC_KEY","KEYCTL_CAPS0_RESTRICT_KEYRING","KEYCTL_CAPS1_NS_KEYRING_NAME","KEYCTL_CAPS1_NS_KEY_TAG","KEYCTL_CHOWN","KEYCTL_CLEAR","KEYCTL_DESCRIBE","KEYCTL_DH_COMPUTE","KEYCTL_GET_KEYRING_ID","KEYCTL_GET_PERSISTENT","KEYCTL_GET_SECURITY","KEYCTL_INSTANTIATE","KEYCTL_INSTANTIATE_IOV","KEYCTL_INVALIDATE","KEYCTL_JOIN_SESSION_KEYRING","KEYCTL_LINK","KEYCTL_MOVE","KEYCTL_NEGATE","KEYCTL_PKEY_DECRYPT","KEYCTL_PKEY_ENCRYPT","KEYCTL_PKEY_QUERY","KEYCTL_PKEY_SIGN","KEYCTL_PKEY_VERIFY","KEYCTL_READ","KEYCTL_REJECT","KEYCTL_RESTRICT_KEYRING","KEYCTL_REVOKE","KEYCTL_SEARCH","KEYCTL_SESSION_TO_PARENT","KEYCTL_SETPERM","KEYCTL_SET_REQKEY_KEYRING","KEYCTL_SET_TIMEOUT","KEYCTL_SUPPORTS_DECRYPT","KEYCTL_SUPPORTS_ENCRYPT","KEYCTL_SUPPORTS_SIGN","KEYCTL_SUPPORTS_VERIFY","KEYCTL_UNLINK","KEYCTL_UPDATE","KEY_CNT","KEY_MAX","KEY_REQKEY_DEFL_DEFAULT","KEY_REQKEY_DEFL_GROUP_KEYRING","KEY_REQKEY_DEFL_NO_CHANGE","KEY_REQKEY_DEFL_PROCESS_KEYRING","KEY_REQKEY_DEFL_REQUESTOR_KEYRING","KEY_REQKEY_DEFL_SESSION_KEYRING","KEY_REQKEY_DEFL_THREAD_KEYRING","KEY_REQKEY_DEFL_USER_KEYRING","KEY_REQKEY_DEFL_USER_SESSION_KEYRING","KEY_SPEC_GROUP_KEYRING","KEY_SPEC_PROCESS_KEYRING","KEY_SPEC_REQKEY_AUTH_KEY","KEY_SPEC_REQUESTOR_KEYRING","KEY_SPEC_SESSION_KEYRING","KEY_SPEC_THREAD_KEYRING","KEY_SPEC_USER_KEYRING","KEY_SPEC_USER_SESSION_KEYRING","LC_ADDRESS","LC_ADDRESS_MASK","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_IDENTIFICATION","LC_IDENTIFICATION_MASK","LC_MEASUREMENT","LC_MEASUREMENT_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NAME","LC_NAME_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_PAPER","LC_PAPER_MASK","LC_TELEPHONE","LC_TELEPHONE_MASK","LC_TIME","LC_TIME_MASK","LED_CNT","LED_MAX","LINUX_REBOOT_CMD_CAD_OFF","LINUX_REBOOT_CMD_CAD_ON","LINUX_REBOOT_CMD_HALT","LINUX_REBOOT_CMD_KEXEC","LINUX_REBOOT_CMD_POWER_OFF","LINUX_REBOOT_CMD_RESTART","LINUX_REBOOT_CMD_RESTART2","LINUX_REBOOT_CMD_SW_SUSPEND","LINUX_REBOOT_MAGIC1","LINUX_REBOOT_MAGIC2","LINUX_REBOOT_MAGIC2A","LINUX_REBOOT_MAGIC2B","LINUX_REBOOT_MAGIC2C","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LM_ID_BASE","LM_ID_NEWLM","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_KERN","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","Lmid_t","MADV_COLD","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_DONTNEED_LOCKED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_KEEPONFORK","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_PAGEOUT","MADV_POPULATE_READ","MADV_POPULATE_WRITE","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MADV_WIPEONFORK","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_HUGE_MASK","MAP_HUGE_SHIFT","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MAXTC","MAXTTL","MAX_ADDR_LEN","MAX_IPOPTLEN","MAX_LINKS","MCAST_BLOCK_SOURCE","MCAST_EXCLUDE","MCAST_INCLUDE","MCAST_JOIN_GROUP","MCAST_JOIN_SOURCE_GROUP","MCAST_LEAVE_GROUP","MCAST_LEAVE_SOURCE_GROUP","MCAST_MSFILTER","MCAST_UNBLOCK_SOURCE","MCL_CURRENT","MCL_FUTURE","MEMBARRIER_CMD_GLOBAL","MEMBARRIER_CMD_GLOBAL_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE","MEMBARRIER_CMD_QUERY","MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE","MFD_ALLOW_SEALING","MFD_CLOEXEC","MFD_HUGETLB","MFD_HUGE_16GB","MFD_HUGE_16MB","MFD_HUGE_1GB","MFD_HUGE_1MB","MFD_HUGE_256MB","MFD_HUGE_2GB","MFD_HUGE_2MB","MFD_HUGE_32MB","MFD_HUGE_512KB","MFD_HUGE_512MB","MFD_HUGE_64KB","MFD_HUGE_8MB","MFD_HUGE_MASK","MFD_HUGE_SHIFT","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX3_SUPER_MAGIC","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MINSIGSTKSZ","MLOCK_ONFAULT","MMAP_PAGE_ZERO","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MPOL_BIND","MPOL_DEFAULT","MPOL_F_NUMA_BALANCING","MPOL_F_RELATIVE_NODES","MPOL_F_STATIC_NODES","MPOL_INTERLEAVE","MPOL_LOCAL","MPOL_PREFERRED","MREMAP_DONTUNMAP","MREMAP_FIXED","MREMAP_MAYMOVE","MSC_CNT","MSC_MAX","MSDOS_SUPER_MAGIC","MSG_CMSG_CLOEXEC","MSG_CONFIRM","MSG_COPY","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_EXCEPT","MSG_FASTOPEN","MSG_FIN","MSG_INFO","MSG_MORE","MSG_NOERROR","MSG_NOSIGNAL","MSG_NOTIFICATION","MSG_OOB","MSG_PEEK","MSG_RST","MSG_STAT","MSG_SYN","MSG_TRUNC","MSG_TRYHARD","MSG_WAITALL","MSG_WAITFORONE","MSG_ZEROCOPY","MS_ACTIVE","MS_ASYNC","MS_BIND","MS_DIRSYNC","MS_INVALIDATE","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNC","MS_SYNCHRONOUS","MS_UNBINDABLE","M_ARENA_MAX","M_ARENA_TEST","M_CHECK_ACTION","M_GRAIN","M_KEEP","M_MMAP_MAX","M_MMAP_THRESHOLD","M_MXFAST","M_NLBLKS","M_PERTURB","M_TOP_PAD","M_TRIM_THRESHOLD","NCCS","NCP_SUPER_MAGIC","NDA_CACHEINFO","NDA_DST","NDA_IFINDEX","NDA_LINK_NETNSID","NDA_LLADDR","NDA_MASTER","NDA_PORT","NDA_PROBES","NDA_SRC_VNI","NDA_UNSPEC","NDA_VLAN","NDA_VNI","NETLINK_ADD_MEMBERSHIP","NETLINK_AUDIT","NETLINK_BROADCAST_ERROR","NETLINK_CAP_ACK","NETLINK_CONNECTOR","NETLINK_CRYPTO","NETLINK_DNRTMSG","NETLINK_DROP_MEMBERSHIP","NETLINK_ECRYPTFS","NETLINK_EXT_ACK","NETLINK_FIB_LOOKUP","NETLINK_FIREWALL","NETLINK_GENERIC","NETLINK_GET_STRICT_CHK","NETLINK_INET_DIAG","NETLINK_IP6_FW","NETLINK_ISCSI","NETLINK_KOBJECT_UEVENT","NETLINK_LISTEN_ALL_NSID","NETLINK_LIST_MEMBERSHIPS","NETLINK_NETFILTER","NETLINK_NFLOG","NETLINK_NO_ENOBUFS","NETLINK_PKTINFO","NETLINK_RDMA","NETLINK_ROUTE","NETLINK_RX_RING","NETLINK_SCSITRANSPORT","NETLINK_SELINUX","NETLINK_SOCK_DIAG","NETLINK_TX_RING","NETLINK_UNUSED","NETLINK_USERSOCK","NETLINK_XFRM","NEW_TIME","NFNETLINK_V0","NFNLGRP_ACCT_QUOTA","NFNLGRP_CONNTRACK_DESTROY","NFNLGRP_CONNTRACK_EXP_DESTROY","NFNLGRP_CONNTRACK_EXP_NEW","NFNLGRP_CONNTRACK_EXP_UPDATE","NFNLGRP_CONNTRACK_NEW","NFNLGRP_CONNTRACK_UPDATE","NFNLGRP_NFTABLES","NFNLGRP_NFTRACE","NFNLGRP_NONE","NFNL_BATCH_GENID","NFNL_BATCH_UNSPEC","NFNL_MSG_BATCH_BEGIN","NFNL_MSG_BATCH_END","NFNL_SUBSYS_ACCT","NFNL_SUBSYS_COUNT","NFNL_SUBSYS_CTHELPER","NFNL_SUBSYS_CTNETLINK","NFNL_SUBSYS_CTNETLINK_EXP","NFNL_SUBSYS_CTNETLINK_TIMEOUT","NFNL_SUBSYS_HOOK","NFNL_SUBSYS_IPSET","NFNL_SUBSYS_NFTABLES","NFNL_SUBSYS_NFT_COMPAT","NFNL_SUBSYS_NONE","NFNL_SUBSYS_OSF","NFNL_SUBSYS_QUEUE","NFNL_SUBSYS_ULOG","NFPROTO_ARP","NFPROTO_BRIDGE","NFPROTO_DECNET","NFPROTO_INET","NFPROTO_IPV4","NFPROTO_IPV6","NFPROTO_NETDEV","NFPROTO_NUMPROTO","NFPROTO_UNSPEC","NFQA_CAP_LEN","NFQA_CFG_CMD","NFQA_CFG_FLAGS","NFQA_CFG_F_CONNTRACK","NFQA_CFG_F_FAIL_OPEN","NFQA_CFG_F_GSO","NFQA_CFG_F_MAX","NFQA_CFG_F_SECCTX","NFQA_CFG_F_UID_GID","NFQA_CFG_MASK","NFQA_CFG_PARAMS","NFQA_CFG_QUEUE_MAXLEN","NFQA_CFG_UNSPEC","NFQA_CT","NFQA_CT_INFO","NFQA_EXP","NFQA_GID","NFQA_HWADDR","NFQA_IFINDEX_INDEV","NFQA_IFINDEX_OUTDEV","NFQA_IFINDEX_PHYSINDEV","NFQA_IFINDEX_PHYSOUTDEV","NFQA_L2HDR","NFQA_MARK","NFQA_PACKET_HDR","NFQA_PAYLOAD","NFQA_PRIORITY","NFQA_SECCTX","NFQA_SKB_CSUMNOTREADY","NFQA_SKB_CSUM_NOTVERIFIED","NFQA_SKB_GSO","NFQA_SKB_INFO","NFQA_TIMESTAMP","NFQA_UID","NFQA_UNSPEC","NFQA_VERDICT_HDR","NFQA_VLAN","NFQA_VLAN_PROTO","NFQA_VLAN_TCI","NFQA_VLAN_UNSPEC","NFQNL_CFG_CMD_BIND","NFQNL_CFG_CMD_NONE","NFQNL_CFG_CMD_PF_BIND","NFQNL_CFG_CMD_PF_UNBIND","NFQNL_CFG_CMD_UNBIND","NFQNL_COPY_META","NFQNL_COPY_NONE","NFQNL_COPY_PACKET","NFQNL_MSG_CONFIG","NFQNL_MSG_PACKET","NFQNL_MSG_VERDICT","NFQNL_MSG_VERDICT_BATCH","NFS_SUPER_MAGIC","NFT_BREAK","NFT_BYTEORDER_HTON","NFT_BYTEORDER_NTOH","NFT_CHAIN_MAXNAMELEN","NFT_CMP_EQ","NFT_CMP_GT","NFT_CMP_GTE","NFT_CMP_LT","NFT_CMP_LTE","NFT_CMP_NEQ","NFT_CONTINUE","NFT_CT_BYTES","NFT_CT_DIRECTION","NFT_CT_DST","NFT_CT_EXPIRATION","NFT_CT_HELPER","NFT_CT_L3PROTOCOL","NFT_CT_LABELS","NFT_CT_MARK","NFT_CT_PKTS","NFT_CT_PROTOCOL","NFT_CT_PROTO_DST","NFT_CT_PROTO_SRC","NFT_CT_SECMARK","NFT_CT_SRC","NFT_CT_STATE","NFT_CT_STATUS","NFT_DATA_RESERVED_MASK","NFT_DATA_VALUE","NFT_DATA_VALUE_MAXLEN","NFT_DATA_VERDICT","NFT_DYNSET_F_INV","NFT_DYNSET_OP_ADD","NFT_DYNSET_OP_UPDATE","NFT_GOTO","NFT_JUMP","NFT_LIMIT_F_INV","NFT_LIMIT_PKTS","NFT_LIMIT_PKT_BYTES","NFT_LOOKUP_F_INV","NFT_META_BRI_IIFNAME","NFT_META_BRI_OIFNAME","NFT_META_CGROUP","NFT_META_CPU","NFT_META_IIF","NFT_META_IIFGROUP","NFT_META_IIFNAME","NFT_META_IIFTYPE","NFT_META_L4PROTO","NFT_META_LEN","NFT_META_MARK","NFT_META_NFPROTO","NFT_META_NFTRACE","NFT_META_OIF","NFT_META_OIFGROUP","NFT_META_OIFNAME","NFT_META_OIFTYPE","NFT_META_PKTTYPE","NFT_META_PRANDOM","NFT_META_PRIORITY","NFT_META_PROTOCOL","NFT_META_RTCLASSID","NFT_META_SECMARK","NFT_META_SKGID","NFT_META_SKUID","NFT_MSG_DELCHAIN","NFT_MSG_DELOBJ","NFT_MSG_DELRULE","NFT_MSG_DELSET","NFT_MSG_DELSETELEM","NFT_MSG_DELTABLE","NFT_MSG_GETCHAIN","NFT_MSG_GETGEN","NFT_MSG_GETOBJ","NFT_MSG_GETOBJ_RESET","NFT_MSG_GETRULE","NFT_MSG_GETSET","NFT_MSG_GETSETELEM","NFT_MSG_GETTABLE","NFT_MSG_MAX","NFT_MSG_NEWCHAIN","NFT_MSG_NEWGEN","NFT_MSG_NEWOBJ","NFT_MSG_NEWRULE","NFT_MSG_NEWSET","NFT_MSG_NEWSETELEM","NFT_MSG_NEWTABLE","NFT_MSG_TRACE","NFT_NAT_DNAT","NFT_NAT_SNAT","NFT_NG_INCREMENTAL","NFT_NG_RANDOM","NFT_OBJ_MAXNAMELEN","NFT_PAYLOAD_CSUM_INET","NFT_PAYLOAD_CSUM_NONE","NFT_PAYLOAD_LL_HEADER","NFT_PAYLOAD_NETWORK_HEADER","NFT_PAYLOAD_TRANSPORT_HEADER","NFT_QUEUE_FLAG_BYPASS","NFT_QUEUE_FLAG_CPU_FANOUT","NFT_QUEUE_FLAG_MASK","NFT_QUOTA_F_INV","NFT_RANGE_EQ","NFT_RANGE_NEQ","NFT_REG32_00","NFT_REG32_01","NFT_REG32_02","NFT_REG32_03","NFT_REG32_04","NFT_REG32_05","NFT_REG32_06","NFT_REG32_07","NFT_REG32_08","NFT_REG32_09","NFT_REG32_10","NFT_REG32_11","NFT_REG32_12","NFT_REG32_13","NFT_REG32_14","NFT_REG32_15","NFT_REG32_SIZE","NFT_REG_1","NFT_REG_2","NFT_REG_3","NFT_REG_4","NFT_REG_SIZE","NFT_REG_VERDICT","NFT_REJECT_ICMPX_ADMIN_PROHIBITED","NFT_REJECT_ICMPX_HOST_UNREACH","NFT_REJECT_ICMPX_NO_ROUTE","NFT_REJECT_ICMPX_PORT_UNREACH","NFT_REJECT_ICMPX_UNREACH","NFT_REJECT_ICMP_UNREACH","NFT_REJECT_TCP_RST","NFT_RETURN","NFT_SET_ANONYMOUS","NFT_SET_CONSTANT","NFT_SET_ELEM_INTERVAL_END","NFT_SET_EVAL","NFT_SET_INTERVAL","NFT_SET_MAP","NFT_SET_MAXNAMELEN","NFT_SET_POL_MEMORY","NFT_SET_POL_PERFORMANCE","NFT_SET_TIMEOUT","NFT_TABLE_MAXNAMELEN","NFT_TRACETYPE_POLICY","NFT_TRACETYPE_RETURN","NFT_TRACETYPE_RULE","NFT_TRACETYPE_UNSPEC","NFT_USERDATA_MAXLEN","NFULA_CFG_CMD","NFULA_CFG_FLAGS","NFULA_CFG_MODE","NFULA_CFG_NLBUFSIZ","NFULA_CFG_QTHRESH","NFULA_CFG_TIMEOUT","NFULA_CFG_UNSPEC","NFULA_CT","NFULA_CT_INFO","NFULA_GID","NFULA_HWADDR","NFULA_HWHEADER","NFULA_HWLEN","NFULA_HWTYPE","NFULA_IFINDEX_INDEV","NFULA_IFINDEX_OUTDEV","NFULA_IFINDEX_PHYSINDEV","NFULA_IFINDEX_PHYSOUTDEV","NFULA_L2HDR","NFULA_MARK","NFULA_PACKET_HDR","NFULA_PAYLOAD","NFULA_PREFIX","NFULA_SEQ","NFULA_SEQ_GLOBAL","NFULA_TIMESTAMP","NFULA_UID","NFULA_UNSPEC","NFULA_VLAN","NFULA_VLAN_PROTO","NFULA_VLAN_TCI","NFULA_VLAN_UNSPEC","NFULNL_CFG_CMD_BIND","NFULNL_CFG_CMD_NONE","NFULNL_CFG_CMD_PF_BIND","NFULNL_CFG_CMD_PF_UNBIND","NFULNL_CFG_CMD_UNBIND","NFULNL_CFG_F_CONNTRACK","NFULNL_CFG_F_SEQ","NFULNL_CFG_F_SEQ_GLOBAL","NFULNL_COPY_META","NFULNL_COPY_NONE","NFULNL_COPY_PACKET","NFULNL_MSG_CONFIG","NFULNL_MSG_PACKET","NF_ACCEPT","NF_DROP","NF_INET_FORWARD","NF_INET_LOCAL_IN","NF_INET_LOCAL_OUT","NF_INET_NUMHOOKS","NF_INET_POST_ROUTING","NF_INET_PRE_ROUTING","NF_IP6_FORWARD","NF_IP6_LOCAL_IN","NF_IP6_LOCAL_OUT","NF_IP6_NUMHOOKS","NF_IP6_POST_ROUTING","NF_IP6_PRE_ROUTING","NF_IP6_PRI_CONNTRACK","NF_IP6_PRI_CONNTRACK_DEFRAG","NF_IP6_PRI_CONNTRACK_HELPER","NF_IP6_PRI_FILTER","NF_IP6_PRI_FIRST","NF_IP6_PRI_LAST","NF_IP6_PRI_MANGLE","NF_IP6_PRI_NAT_DST","NF_IP6_PRI_NAT_SRC","NF_IP6_PRI_RAW","NF_IP6_PRI_SECURITY","NF_IP6_PRI_SELINUX_FIRST","NF_IP6_PRI_SELINUX_LAST","NF_IP_FORWARD","NF_IP_LOCAL_IN","NF_IP_LOCAL_OUT","NF_IP_NUMHOOKS","NF_IP_POST_ROUTING","NF_IP_PRE_ROUTING","NF_IP_PRI_CONNTRACK","NF_IP_PRI_CONNTRACK_CONFIRM","NF_IP_PRI_CONNTRACK_DEFRAG","NF_IP_PRI_CONNTRACK_HELPER","NF_IP_PRI_FILTER","NF_IP_PRI_FIRST","NF_IP_PRI_LAST","NF_IP_PRI_MANGLE","NF_IP_PRI_NAT_DST","NF_IP_PRI_NAT_SRC","NF_IP_PRI_RAW","NF_IP_PRI_SECURITY","NF_IP_PRI_SELINUX_FIRST","NF_IP_PRI_SELINUX_LAST","NF_MAX_VERDICT","NF_NETDEV_INGRESS","NF_NETDEV_NUMHOOKS","NF_QUEUE","NF_REPEAT","NF_STOLEN","NF_STOP","NF_VERDICT_BITS","NF_VERDICT_FLAG_QUEUE_BYPASS","NF_VERDICT_MASK","NF_VERDICT_QBITS","NF_VERDICT_QMASK","NILFS_SUPER_MAGIC","NI_DGRAM","NI_MAXHOST","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSERV","NL0","NL1","NLA_ALIGN","NLA_ALIGNTO","NLA_F_NESTED","NLA_F_NET_BYTEORDER","NLA_TYPE_MASK","NLDLY","NLMSG_DONE","NLMSG_ERROR","NLMSG_MIN_TYPE","NLMSG_NOOP","NLMSG_OVERRUN","NLM_F_ACK","NLM_F_APPEND","NLM_F_ATOMIC","NLM_F_CREATE","NLM_F_DUMP","NLM_F_DUMP_FILTERED","NLM_F_DUMP_INTR","NLM_F_ECHO","NLM_F_EXCL","NLM_F_MATCH","NLM_F_MULTI","NLM_F_REPLACE","NLM_F_REQUEST","NLM_F_ROOT","NOEXPR","NOFLSH","NOSTR","NSFS_MAGIC","NTF_EXT_LEARNED","NTF_MASTER","NTF_OFFLOADED","NTF_PROXY","NTF_ROUTER","NTF_SELF","NTF_USE","NTP_API","NT_ASRS","NT_AUXV","NT_FPREGSET","NT_GWINDOWS","NT_LWPSINFO","NT_LWPSTATUS","NT_PLATFORM","NT_PRCRED","NT_PRFPREG","NT_PRFPXREG","NT_PRPSINFO","NT_PRSTATUS","NT_PRXREG","NT_PSINFO","NT_PSTATUS","NT_TASKSTRUCT","NT_UTSNAME","NUD_DELAY","NUD_FAILED","NUD_INCOMPLETE","NUD_NOARP","NUD_NONE","NUD_PERMANENT","NUD_PROBE","NUD_REACHABLE","NUD_STALE","OCFS2_SUPER_MAGIC","OCRNL","OFDEL","OFILL","OLCUC","OLD_TIME","ONLCR","ONLRET","ONOCR","OPENPROM_SUPER_MAGIC","OPEN_TREE_CLOEXEC","OPEN_TREE_CLONE","OPOST","ORIG_RAX","OVERLAYFS_SUPER_MAGIC","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","PACKET_ADD_MEMBERSHIP","PACKET_DROP_MEMBERSHIP","PACKET_MR_ALLMULTI","PACKET_MR_MULTICAST","PACKET_MR_PROMISC","PACKET_MR_UNICAST","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_ALG","PF_APPLETALK","PF_ASH","PF_ATMPVC","PF_ATMSVC","PF_AX25","PF_BLUETOOTH","PF_BRIDGE","PF_CAIF","PF_CAN","PF_DECnet","PF_ECONET","PF_IB","PF_IEEE802154","PF_INET","PF_INET6","PF_IPX","PF_IRDA","PF_ISDN","PF_IUCV","PF_KEY","PF_LLC","PF_LOCAL","PF_MASKOS","PF_MASKPROC","PF_MPLS","PF_NETBEUI","PF_NETLINK","PF_NETROM","PF_NFC","PF_PACKET","PF_PHONET","PF_PPPOX","PF_R","PF_RDS","PF_ROSE","PF_ROUTE","PF_RXRPC","PF_SECURITY","PF_SNA","PF_TIPC","PF_UNIX","PF_UNSPEC","PF_VSOCK","PF_W","PF_WANPIPE","PF_X","PF_X25","PF_XDP","PIDFD_NONBLOCK","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSCHEDPARAM","POSIX_SPAWN_SETSCHEDULER","POSIX_SPAWN_SETSID","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_USEVFORK","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_SUPER_MAGIC","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","PR_CAPBSET_DROP","PR_CAPBSET_READ","PR_CAP_AMBIENT","PR_CAP_AMBIENT_CLEAR_ALL","PR_CAP_AMBIENT_IS_SET","PR_CAP_AMBIENT_LOWER","PR_CAP_AMBIENT_RAISE","PR_ENDIAN_BIG","PR_ENDIAN_LITTLE","PR_ENDIAN_PPC_LITTLE","PR_FPEMU_NOPRINT","PR_FPEMU_SIGFPE","PR_FP_EXC_ASYNC","PR_FP_EXC_DISABLED","PR_FP_EXC_DIV","PR_FP_EXC_INV","PR_FP_EXC_NONRECOV","PR_FP_EXC_OVF","PR_FP_EXC_PRECISE","PR_FP_EXC_RES","PR_FP_EXC_SW_ENABLE","PR_FP_EXC_UND","PR_FP_MODE_FR","PR_FP_MODE_FRE","PR_GET_CHILD_SUBREAPER","PR_GET_DUMPABLE","PR_GET_ENDIAN","PR_GET_FPEMU","PR_GET_FPEXC","PR_GET_FP_MODE","PR_GET_KEEPCAPS","PR_GET_NAME","PR_GET_NO_NEW_PRIVS","PR_GET_PDEATHSIG","PR_GET_SECCOMP","PR_GET_SECUREBITS","PR_GET_SPECULATION_CTRL","PR_GET_THP_DISABLE","PR_GET_TID_ADDRESS","PR_GET_TIMERSLACK","PR_GET_TIMING","PR_GET_TSC","PR_GET_UNALIGN","PR_MCE_KILL","PR_MCE_KILL_CLEAR","PR_MCE_KILL_DEFAULT","PR_MCE_KILL_EARLY","PR_MCE_KILL_GET","PR_MCE_KILL_LATE","PR_MCE_KILL_SET","PR_MPX_DISABLE_MANAGEMENT","PR_MPX_ENABLE_MANAGEMENT","PR_SCHED_CORE","PR_SCHED_CORE_CREATE","PR_SCHED_CORE_GET","PR_SCHED_CORE_MAX","PR_SCHED_CORE_SCOPE_PROCESS_GROUP","PR_SCHED_CORE_SCOPE_THREAD","PR_SCHED_CORE_SCOPE_THREAD_GROUP","PR_SCHED_CORE_SHARE_FROM","PR_SCHED_CORE_SHARE_TO","PR_SET_CHILD_SUBREAPER","PR_SET_DUMPABLE","PR_SET_ENDIAN","PR_SET_FPEMU","PR_SET_FPEXC","PR_SET_FP_MODE","PR_SET_KEEPCAPS","PR_SET_MM","PR_SET_MM_ARG_END","PR_SET_MM_ARG_START","PR_SET_MM_AUXV","PR_SET_MM_BRK","PR_SET_MM_END_CODE","PR_SET_MM_END_DATA","PR_SET_MM_ENV_END","PR_SET_MM_ENV_START","PR_SET_MM_EXE_FILE","PR_SET_MM_MAP","PR_SET_MM_MAP_SIZE","PR_SET_MM_START_BRK","PR_SET_MM_START_CODE","PR_SET_MM_START_DATA","PR_SET_MM_START_STACK","PR_SET_NAME","PR_SET_NO_NEW_PRIVS","PR_SET_PDEATHSIG","PR_SET_PTRACER","PR_SET_PTRACER_ANY","PR_SET_SECCOMP","PR_SET_SECUREBITS","PR_SET_SPECULATION_CTRL","PR_SET_THP_DISABLE","PR_SET_TIMERSLACK","PR_SET_TIMING","PR_SET_TSC","PR_SET_UNALIGN","PR_SET_VMA","PR_SET_VMA_ANON_NAME","PR_SPEC_DISABLE","PR_SPEC_DISABLE_NOEXEC","PR_SPEC_ENABLE","PR_SPEC_FORCE_DISABLE","PR_SPEC_INDIRECT_BRANCH","PR_SPEC_NOT_AFFECTED","PR_SPEC_PRCTL","PR_SPEC_STORE_BYPASS","PR_TASK_PERF_EVENTS_DISABLE","PR_TASK_PERF_EVENTS_ENABLE","PR_TIMING_STATISTICAL","PR_TIMING_TIMESTAMP","PR_TSC_ENABLE","PR_TSC_SIGSEGV","PR_UNALIGN_NOPRINT","PR_UNALIGN_SIGBUS","PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","PTHREAD_MUTEX_ADAPTIVE_NP","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_MUTEX_ROBUST","PTHREAD_MUTEX_STALLED","PTHREAD_PRIO_INHERIT","PTHREAD_PRIO_NONE","PTHREAD_PRIO_PROTECT","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_GET_RSEQ_CONFIGURATION","PTRACE_GET_SYSCALL_INFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_MASK","PTRACE_O_SUSPEND_SECCOMP","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKSIGINFO_SHARED","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSCALL_INFO_ENTRY","PTRACE_SYSCALL_INFO_EXIT","PTRACE_SYSCALL_INFO_NONE","PTRACE_SYSCALL_INFO_SECCOMP","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","PT_DYNAMIC","PT_GNU_EH_FRAME","PT_GNU_RELRO","PT_GNU_STACK","PT_HIOS","PT_HIPROC","PT_HISUNW","PT_INTERP","PT_LOAD","PT_LOOS","PT_LOPROC","PT_LOSUNW","PT_NOTE","PT_NULL","PT_NUM","PT_PHDR","PT_SHLIB","PT_SUNWBSS","PT_SUNWSTACK","PT_TLS","P_ALL","P_PGID","P_PID","P_PIDFD","QCMD","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QNX4_SUPER_MAGIC","QNX6_SUPER_MAGIC","Q_GETFMT","Q_GETINFO","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETINFO","Q_SETQUOTA","Q_SYNC","R10","R11","R12","R13","R14","R15","R8","R9","RADIXCHAR","RAND_MAX","RAX","RBP","RBX","RB_AUTOBOOT","RB_DISABLE_CAD","RB_ENABLE_CAD","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RCX","RDI","RDTGROUP_SUPER_MAGIC","RDX","READ_IMPLIES_EXEC","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_CR2","REG_CSGSFS","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EEND","REG_EESCAPE","REG_EFL","REG_ENOSYS","REG_EPAREN","REG_ERANGE","REG_ERPAREN","REG_ERR","REG_ESIZE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_NEWLINE","REG_NOMATCH","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_OLDMASK","REG_R10","REG_R11","REG_R12","REG_R13","REG_R14","REG_R15","REG_R8","REG_R9","REG_RAX","REG_RBP","REG_RBX","REG_RCX","REG_RDI","REG_RDX","REG_RIP","REG_RSI","REG_RSP","REG_STARTEND","REG_TRAPNO","REISERFS_SUPER_MAGIC","REL_CNT","REL_MAX","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","REP_CNT","REP_MAX","RESOLVE_BENEATH","RESOLVE_CACHED","RESOLVE_IN_ROOT","RESOLVE_NO_MAGICLINKS","RESOLVE_NO_SYMLINKS","RESOLVE_NO_XDEV","RIP","RLIM64_INFINITY","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NLIMITS","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RLIM_SAVED_CUR","RLIM_SAVED_MAX","RSI","RSP","RTA_CACHEINFO","RTA_DST","RTA_ENCAP","RTA_ENCAP_TYPE","RTA_EXPIRES","RTA_FLOW","RTA_GATEWAY","RTA_IIF","RTA_MARK","RTA_METRICS","RTA_MFC_STATS","RTA_MP_ALGO","RTA_MULTIPATH","RTA_NEWDST","RTA_OIF","RTA_PAD","RTA_PREF","RTA_PREFSRC","RTA_PRIORITY","RTA_PROTOINFO","RTA_SESSION","RTA_SRC","RTA_TABLE","RTA_TTL_PROPAGATE","RTA_UID","RTA_UNSPEC","RTA_VIA","RTCF_DIRECTSRC","RTCF_DOREDIRECT","RTCF_LOG","RTCF_MASQ","RTCF_NAT","RTCF_VALVE","RTEXT_FILTER_BRVLAN","RTEXT_FILTER_BRVLAN_COMPRESSED","RTEXT_FILTER_CFM_CONFIG","RTEXT_FILTER_CFM_STATUS","RTEXT_FILTER_MRP","RTEXT_FILTER_SKIP_STATS","RTEXT_FILTER_VF","RTF_ADDRCLASSMASK","RTF_ADDRCONF","RTF_ALLONLINK","RTF_BROADCAST","RTF_CACHE","RTF_DEFAULT","RTF_DYNAMIC","RTF_FLOW","RTF_GATEWAY","RTF_HOST","RTF_INTERFACE","RTF_IRTT","RTF_LINKRT","RTF_LOCAL","RTF_MODIFIED","RTF_MSS","RTF_MTU","RTF_MULTICAST","RTF_NAT","RTF_NOFORWARD","RTF_NONEXTHOP","RTF_NOPMTUDISC","RTF_POLICY","RTF_REINSTATE","RTF_REJECT","RTF_STATIC","RTF_THROW","RTF_UP","RTF_WINDOW","RTF_XRESOLVE","RTLD_DEEPBIND","RTLD_DEFAULT","RTLD_DI_CONFIGADDR","RTLD_DI_LINKMAP","RTLD_DI_LMID","RTLD_DI_ORIGIN","RTLD_DI_PROFILENAME","RTLD_DI_PROFILEOUT","RTLD_DI_SERINFO","RTLD_DI_SERINFOSIZE","RTLD_DI_TLS_DATA","RTLD_DI_TLS_MODID","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTMGRP_DECnet_IFADDR","RTMGRP_DECnet_ROUTE","RTMGRP_IPV4_IFADDR","RTMGRP_IPV4_MROUTE","RTMGRP_IPV4_ROUTE","RTMGRP_IPV4_RULE","RTMGRP_IPV6_IFADDR","RTMGRP_IPV6_IFINFO","RTMGRP_IPV6_MROUTE","RTMGRP_IPV6_PREFIX","RTMGRP_IPV6_ROUTE","RTMGRP_LINK","RTMGRP_NEIGH","RTMGRP_NOTIFY","RTMGRP_TC","RTMSG_AR_FAILED","RTMSG_CONTROL","RTMSG_DELDEVICE","RTMSG_DELROUTE","RTMSG_DELRULE","RTMSG_NEWDEVICE","RTMSG_NEWROUTE","RTMSG_NEWRULE","RTMSG_OVERRUN","RTM_DELACTION","RTM_DELADDR","RTM_DELADDRLABEL","RTM_DELLINK","RTM_DELMDB","RTM_DELNEIGH","RTM_DELNETCONF","RTM_DELNSID","RTM_DELQDISC","RTM_DELROUTE","RTM_DELRULE","RTM_DELTCLASS","RTM_DELTFILTER","RTM_F_CLONED","RTM_F_EQUALIZE","RTM_F_FIB_MATCH","RTM_F_LOOKUP_TABLE","RTM_F_NOTIFY","RTM_F_PREFIX","RTM_GETACTION","RTM_GETADDR","RTM_GETADDRLABEL","RTM_GETANYCAST","RTM_GETDCB","RTM_GETLINK","RTM_GETMDB","RTM_GETMULTICAST","RTM_GETNEIGH","RTM_GETNEIGHTBL","RTM_GETNETCONF","RTM_GETNSID","RTM_GETQDISC","RTM_GETROUTE","RTM_GETRULE","RTM_GETSTATS","RTM_GETTCLASS","RTM_GETTFILTER","RTM_NEWACTION","RTM_NEWADDR","RTM_NEWADDRLABEL","RTM_NEWCACHEREPORT","RTM_NEWLINK","RTM_NEWMDB","RTM_NEWNDUSEROPT","RTM_NEWNEIGH","RTM_NEWNEIGHTBL","RTM_NEWNETCONF","RTM_NEWNSID","RTM_NEWPREFIX","RTM_NEWQDISC","RTM_NEWROUTE","RTM_NEWRULE","RTM_NEWSTATS","RTM_NEWTCLASS","RTM_NEWTFILTER","RTM_SETDCB","RTM_SETLINK","RTM_SETNEIGHTBL","RTNLGRP_BRVLAN","RTNLGRP_DCB","RTNLGRP_DECnet_IFADDR","RTNLGRP_DECnet_ROUTE","RTNLGRP_DECnet_RULE","RTNLGRP_IPV4_IFADDR","RTNLGRP_IPV4_MROUTE","RTNLGRP_IPV4_MROUTE_R","RTNLGRP_IPV4_NETCONF","RTNLGRP_IPV4_ROUTE","RTNLGRP_IPV4_RULE","RTNLGRP_IPV6_IFADDR","RTNLGRP_IPV6_IFINFO","RTNLGRP_IPV6_MROUTE","RTNLGRP_IPV6_MROUTE_R","RTNLGRP_IPV6_NETCONF","RTNLGRP_IPV6_PREFIX","RTNLGRP_IPV6_ROUTE","RTNLGRP_IPV6_RULE","RTNLGRP_LINK","RTNLGRP_MCTP_IFADDR","RTNLGRP_MDB","RTNLGRP_MPLS_NETCONF","RTNLGRP_MPLS_ROUTE","RTNLGRP_ND_USEROPT","RTNLGRP_NEIGH","RTNLGRP_NEXTHOP","RTNLGRP_NONE","RTNLGRP_NOP2","RTNLGRP_NOP4","RTNLGRP_NOTIFY","RTNLGRP_NSID","RTNLGRP_PHONET_IFADDR","RTNLGRP_PHONET_ROUTE","RTNLGRP_STATS","RTNLGRP_TC","RTNLGRP_TUNNEL","RTN_ANYCAST","RTN_BLACKHOLE","RTN_BROADCAST","RTN_LOCAL","RTN_MULTICAST","RTN_NAT","RTN_PROHIBIT","RTN_THROW","RTN_UNICAST","RTN_UNREACHABLE","RTN_UNSPEC","RTN_XRESOLVE","RTPROT_BOOT","RTPROT_KERNEL","RTPROT_REDIRECT","RTPROT_STATIC","RTPROT_UNSPEC","RT_ADDRCLASS","RT_CLASS_DEFAULT","RT_CLASS_LOCAL","RT_CLASS_MAIN","RT_CLASS_MAX","RT_CLASS_UNSPEC","RT_LOCALADDR","RT_SCOPE_HOST","RT_SCOPE_LINK","RT_SCOPE_NOWHERE","RT_SCOPE_SITE","RT_SCOPE_UNIVERSE","RT_TABLE_COMPAT","RT_TABLE_DEFAULT","RT_TABLE_LOCAL","RT_TABLE_MAIN","RT_TABLE_UNSPEC","RT_TOS","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","RUSAGE_THREAD","RWF_APPEND","RWF_DSYNC","RWF_HIPRI","RWF_NOWAIT","RWF_SYNC","R_OK","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCHED_BATCH","SCHED_FIFO","SCHED_IDLE","SCHED_OTHER","SCHED_RESET_ON_FORK","SCHED_RR","SCM_CREDENTIALS","SCM_J1939_DEST_ADDR","SCM_J1939_DEST_NAME","SCM_J1939_ERRQUEUE","SCM_J1939_PRIO","SCM_RIGHTS","SCM_TIMESTAMP","SCM_TIMESTAMPING","SCM_TIMESTAMPING_OPT_STATS","SCM_TIMESTAMPING_PKTINFO","SCM_TIMESTAMPNS","SCM_TXTIME","SCM_WIFI_STATUS","SCTP_ABORT","SCTP_ADAPTATION_LAYER","SCTP_ADDR_OVER","SCTP_ALL_ASSOC","SCTP_ASSOCINFO","SCTP_AUTHINFO","SCTP_AUTH_ACTIVE_KEY","SCTP_AUTH_CHUNK","SCTP_AUTH_DEACTIVATE_KEY","SCTP_AUTH_DELETE_KEY","SCTP_AUTH_KEY","SCTP_AUTOCLOSE","SCTP_AUTO_ASCONF","SCTP_CONTEXT","SCTP_CURRENT_ASSOC","SCTP_DEFAULT_SEND_PARAM","SCTP_DEFAULT_SNDINFO","SCTP_DELAYED_ACK","SCTP_DELAYED_ACK_TIME","SCTP_DELAYED_SACK","SCTP_DISABLE_FRAGMENTS","SCTP_DSTADDRV4","SCTP_DSTADDRV6","SCTP_ENABLE_CHANGE_ASSOC_REQ","SCTP_ENABLE_RESET_ASSOC_REQ","SCTP_ENABLE_RESET_STREAM_REQ","SCTP_ENABLE_STRRESET_MASK","SCTP_EOF","SCTP_EVENTS","SCTP_FRAGMENT_INTERLEAVE","SCTP_FUTURE_ASSOC","SCTP_GET_ASSOC_ID_LIST","SCTP_GET_ASSOC_NUMBER","SCTP_GET_PEER_ADDR_INFO","SCTP_HMAC_IDENT","SCTP_INIT","SCTP_INITMSG","SCTP_I_WANT_MAPPED_V4_ADDR","SCTP_LOCAL_AUTH_CHUNKS","SCTP_MAXSEG","SCTP_MAX_BURST","SCTP_NODELAY","SCTP_NOTIFICATION","SCTP_NXTINFO","SCTP_PARTIAL_DELIVERY_POINT","SCTP_PEER_ADDR_PARAMS","SCTP_PEER_ADDR_THLDS","SCTP_PEER_ADDR_THLDS_V2","SCTP_PEER_AUTH_CHUNKS","SCTP_PRIMARY_ADDR","SCTP_PRINFO","SCTP_PR_INDEX","SCTP_PR_POLICY","SCTP_PR_PRIO_ENABLED","SCTP_PR_RTX_ENABLED","SCTP_PR_SCTP_ALL","SCTP_PR_SCTP_MASK","SCTP_PR_SCTP_MAX","SCTP_PR_SCTP_NONE","SCTP_PR_SCTP_PRIO","SCTP_PR_SCTP_RTX","SCTP_PR_SCTP_TTL","SCTP_PR_SET_POLICY","SCTP_PR_TTL_ENABLED","SCTP_RCVINFO","SCTP_RECVNXTINFO","SCTP_RECVRCVINFO","SCTP_REUSE_PORT","SCTP_RTOINFO","SCTP_SACK_IMMEDIATELY","SCTP_SENDALL","SCTP_SET_PEER_PRIMARY_ADDR","SCTP_SNDINFO","SCTP_SNDRCV","SCTP_STATUS","SCTP_STREAM_RESET_INCOMING","SCTP_STREAM_RESET_OUTGOING","SCTP_UNORDERED","SECCOMP_FILTER_FLAG_LOG","SECCOMP_FILTER_FLAG_SPEC_ALLOW","SECCOMP_FILTER_FLAG_TSYNC","SECCOMP_GET_ACTION_AVAIL","SECCOMP_GET_NOTIF_SIZES","SECCOMP_MODE_DISABLED","SECCOMP_MODE_FILTER","SECCOMP_MODE_STRICT","SECCOMP_RET_ACTION","SECCOMP_RET_ACTION_FULL","SECCOMP_RET_ALLOW","SECCOMP_RET_DATA","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SECCOMP_SET_MODE_FILTER","SECCOMP_SET_MODE_STRICT","SECURITYFS_MAGIC","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SELFMAG","SELINUX_MAGIC","SEM_FAILED","SFD_CLOEXEC","SFD_NONBLOCK","SHM_EXEC","SHM_HUGETLB","SHM_LOCK","SHM_NORESERVE","SHM_R","SHM_RDONLY","SHM_REMAP","SHM_RND","SHM_UNLOCK","SHM_W","SHORT_INODE","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGEV_THREAD_ID","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMAX","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDIFADDR","SIOCDRARP","SIOCETHTOOL","SIOCGARP","SIOCGHWTSTAMP","SIOCGIFADDR","SIOCGIFBR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFCOUNT","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFPFLAGS","SIOCGIFSLAVE","SIOCGIFTXQLEN","SIOCGMIIPHY","SIOCGMIIREG","SIOCGRARP","SIOCGSKNS","SIOCOUTQNSD","SIOCSARP","SIOCSHWTSTAMP","SIOCSIFADDR","SIOCSIFBR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFHWBROADCAST","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNETMASK","SIOCSIFPFLAGS","SIOCSIFSLAVE","SIOCSIFTXQLEN","SIOCSMIIREG","SIOCSRARP","SIOCWANDEV","SIOGIFINDEX","SI_LOAD_SHIFT","SKF_AD_ALU_XOR_X","SKF_AD_CPU","SKF_AD_HATYPE","SKF_AD_IFINDEX","SKF_AD_MARK","SKF_AD_MAX","SKF_AD_NLATTR","SKF_AD_NLATTR_NEST","SKF_AD_OFF","SKF_AD_PAY_OFFSET","SKF_AD_PKTTYPE","SKF_AD_PROTOCOL","SKF_AD_QUEUE","SKF_AD_RANDOM","SKF_AD_RXHASH","SKF_AD_VLAN_TAG","SKF_AD_VLAN_TAG_PRESENT","SKF_AD_VLAN_TPID","SKF_LL_OFF","SKF_NET_OFF","SK_MEMINFO_BACKLOG","SK_MEMINFO_DROPS","SK_MEMINFO_FWD_ALLOC","SK_MEMINFO_OPTMEM","SK_MEMINFO_RCVBUF","SK_MEMINFO_RMEM_ALLOC","SK_MEMINFO_SNDBUF","SK_MEMINFO_WMEM_ALLOC","SK_MEMINFO_WMEM_QUEUED","SMACK_MAGIC","SMB_SUPER_MAGIC","SND_CNT","SND_MAX","SOCK_CLOEXEC","SOCK_DCCP","SOCK_DGRAM","SOCK_NONBLOCK","SOCK_PACKET","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOF_TIMESTAMPING_OPT_CMSG","SOF_TIMESTAMPING_OPT_ID","SOF_TIMESTAMPING_OPT_PKTINFO","SOF_TIMESTAMPING_OPT_STATS","SOF_TIMESTAMPING_OPT_TSONLY","SOF_TIMESTAMPING_OPT_TX_SWHW","SOF_TIMESTAMPING_RAW_HARDWARE","SOF_TIMESTAMPING_RX_HARDWARE","SOF_TIMESTAMPING_RX_SOFTWARE","SOF_TIMESTAMPING_SOFTWARE","SOF_TIMESTAMPING_SYS_HARDWARE","SOF_TIMESTAMPING_TX_ACK","SOF_TIMESTAMPING_TX_HARDWARE","SOF_TIMESTAMPING_TX_SCHED","SOF_TIMESTAMPING_TX_SOFTWARE","SOF_TXTIME_DEADLINE_MODE","SOF_TXTIME_REPORT_ERRORS","SOL_AAL","SOL_ALG","SOL_ATM","SOL_BLUETOOTH","SOL_CAIF","SOL_CAN_BASE","SOL_CAN_J1939","SOL_CAN_RAW","SOL_DCCP","SOL_DECNET","SOL_ICMPV6","SOL_IP","SOL_IPV6","SOL_IRDA","SOL_IUCV","SOL_LLC","SOL_NETBEUI","SOL_NETLINK","SOL_NFC","SOL_PACKET","SOL_PNPIPE","SOL_PPPOL2TP","SOL_RAW","SOL_RDS","SOL_RXRPC","SOL_SOCKET","SOL_TCP","SOL_TIPC","SOL_UDP","SOL_X25","SOL_XDP","SOMAXCONN","SO_ACCEPTCONN","SO_ATTACH_BPF","SO_ATTACH_FILTER","SO_ATTACH_REUSEPORT_CBPF","SO_ATTACH_REUSEPORT_EBPF","SO_BINDTODEVICE","SO_BINDTOIFINDEX","SO_BPF_EXTENSIONS","SO_BROADCAST","SO_BSDCOMPAT","SO_BUSY_POLL","SO_CNX_ADVICE","SO_COOKIE","SO_DEBUG","SO_DETACH_BPF","SO_DETACH_FILTER","SO_DETACH_REUSEPORT_BPF","SO_DOMAIN","SO_DONTROUTE","SO_EE_OFFENDER","SO_EE_ORIGIN_ICMP","SO_EE_ORIGIN_ICMP6","SO_EE_ORIGIN_LOCAL","SO_EE_ORIGIN_NONE","SO_EE_ORIGIN_TIMESTAMPING","SO_EE_ORIGIN_TXSTATUS","SO_ERROR","SO_GET_FILTER","SO_INCOMING_CPU","SO_INCOMING_NAPI_ID","SO_J1939_ERRQUEUE","SO_J1939_FILTER","SO_J1939_PROMISC","SO_J1939_SEND_PRIO","SO_KEEPALIVE","SO_LINGER","SO_LOCK_FILTER","SO_MARK","SO_MAX_PACING_RATE","SO_MEMINFO","SO_NOFCS","SO_NO_CHECK","SO_OOBINLINE","SO_ORIGINAL_DST","SO_PASSCRED","SO_PASSSEC","SO_PEEK_OFF","SO_PEERCRED","SO_PEERGROUPS","SO_PEERNAME","SO_PEERSEC","SO_PRIORITY","SO_PROTOCOL","SO_RCVBUF","SO_RCVBUFFORCE","SO_RCVLOWAT","SO_RCVTIMEO","SO_RCVTIMEO_NEW","SO_REUSEADDR","SO_REUSEPORT","SO_RXQ_OVFL","SO_SECURITY_AUTHENTICATION","SO_SECURITY_ENCRYPTION_NETWORK","SO_SECURITY_ENCRYPTION_TRANSPORT","SO_SELECT_ERR_QUEUE","SO_SNDBUF","SO_SNDBUFFORCE","SO_SNDLOWAT","SO_SNDTIMEO","SO_SNDTIMEO_NEW","SO_TIMESTAMP","SO_TIMESTAMPING","SO_TIMESTAMPING_NEW","SO_TIMESTAMPNS","SO_TIMESTAMPNS_NEW","SO_TIMESTAMP_NEW","SO_TXTIME","SO_TYPE","SO_WIFI_STATUS","SO_ZEROCOPY","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SS","SS_DISABLE","SS_ONSTACK","STATX_ALL","STATX_ATIME","STATX_ATTR_APPEND","STATX_ATTR_AUTOMOUNT","STATX_ATTR_COMPRESSED","STATX_ATTR_DAX","STATX_ATTR_ENCRYPTED","STATX_ATTR_IMMUTABLE","STATX_ATTR_MOUNT_ROOT","STATX_ATTR_NODUMP","STATX_ATTR_VERITY","STATX_BASIC_STATS","STATX_BLOCKS","STATX_BTIME","STATX_CTIME","STATX_DIOALIGN","STATX_GID","STATX_INO","STATX_MNT_ID","STATX_MODE","STATX_MTIME","STATX_NLINK","STATX_SIZE","STATX_TYPE","STATX_UID","STATX__RESERVED","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","STICKY_TIMEOUTS","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","SW_CNT","SW_MAX","SYNC_FILE_RANGE_WAIT_AFTER","SYNC_FILE_RANGE_WAIT_BEFORE","SYNC_FILE_RANGE_WRITE","SYN_CNT","SYN_MAX","SYSFS_MAGIC","SYS__sysctl","SYS_accept","SYS_accept4","SYS_access","SYS_acct","SYS_add_key","SYS_adjtimex","SYS_afs_syscall","SYS_alarm","SYS_arch_prctl","SYS_bind","SYS_bpf","SYS_brk","SYS_capget","SYS_capset","SYS_chdir","SYS_chmod","SYS_chown","SYS_chroot","SYS_clock_adjtime","SYS_clock_getres","SYS_clock_gettime","SYS_clock_nanosleep","SYS_clock_settime","SYS_clone","SYS_clone3","SYS_close","SYS_close_range","SYS_connect","SYS_copy_file_range","SYS_creat","SYS_create_module","SYS_delete_module","SYS_dup","SYS_dup2","SYS_dup3","SYS_epoll_create","SYS_epoll_create1","SYS_epoll_ctl","SYS_epoll_ctl_old","SYS_epoll_pwait","SYS_epoll_pwait2","SYS_epoll_wait","SYS_epoll_wait_old","SYS_eventfd","SYS_eventfd2","SYS_execve","SYS_execveat","SYS_exit","SYS_exit_group","SYS_faccessat","SYS_faccessat2","SYS_fadvise64","SYS_fallocate","SYS_fanotify_init","SYS_fanotify_mark","SYS_fchdir","SYS_fchmod","SYS_fchmodat","SYS_fchown","SYS_fchownat","SYS_fcntl","SYS_fdatasync","SYS_fgetxattr","SYS_finit_module","SYS_flistxattr","SYS_flock","SYS_fork","SYS_fremovexattr","SYS_fsconfig","SYS_fsetxattr","SYS_fsmount","SYS_fsopen","SYS_fspick","SYS_fstat","SYS_fstatfs","SYS_fsync","SYS_ftruncate","SYS_futex","SYS_futex_waitv","SYS_futimesat","SYS_get_kernel_syms","SYS_get_mempolicy","SYS_get_robust_list","SYS_get_thread_area","SYS_getcpu","SYS_getcwd","SYS_getdents","SYS_getdents64","SYS_getegid","SYS_geteuid","SYS_getgid","SYS_getgroups","SYS_getitimer","SYS_getpeername","SYS_getpgid","SYS_getpgrp","SYS_getpid","SYS_getpmsg","SYS_getppid","SYS_getpriority","SYS_getrandom","SYS_getresgid","SYS_getresuid","SYS_getrlimit","SYS_getrusage","SYS_getsid","SYS_getsockname","SYS_getsockopt","SYS_gettid","SYS_gettimeofday","SYS_getuid","SYS_getxattr","SYS_init_module","SYS_inotify_add_watch","SYS_inotify_init","SYS_inotify_init1","SYS_inotify_rm_watch","SYS_io_cancel","SYS_io_destroy","SYS_io_getevents","SYS_io_setup","SYS_io_submit","SYS_io_uring_enter","SYS_io_uring_register","SYS_io_uring_setup","SYS_ioctl","SYS_ioperm","SYS_iopl","SYS_ioprio_get","SYS_ioprio_set","SYS_kcmp","SYS_kexec_file_load","SYS_kexec_load","SYS_keyctl","SYS_kill","SYS_landlock_add_rule","SYS_landlock_create_ruleset","SYS_landlock_restrict_self","SYS_lchown","SYS_lgetxattr","SYS_link","SYS_linkat","SYS_listen","SYS_listxattr","SYS_llistxattr","SYS_lookup_dcookie","SYS_lremovexattr","SYS_lseek","SYS_lsetxattr","SYS_lstat","SYS_madvise","SYS_mbind","SYS_membarrier","SYS_memfd_create","SYS_memfd_secret","SYS_migrate_pages","SYS_mincore","SYS_mkdir","SYS_mkdirat","SYS_mknod","SYS_mknodat","SYS_mlock","SYS_mlock2","SYS_mlockall","SYS_mmap","SYS_modify_ldt","SYS_mount","SYS_mount_setattr","SYS_move_mount","SYS_move_pages","SYS_mprotect","SYS_mq_getsetattr","SYS_mq_notify","SYS_mq_open","SYS_mq_timedreceive","SYS_mq_timedsend","SYS_mq_unlink","SYS_mremap","SYS_msgctl","SYS_msgget","SYS_msgrcv","SYS_msgsnd","SYS_msync","SYS_munlock","SYS_munlockall","SYS_munmap","SYS_name_to_handle_at","SYS_nanosleep","SYS_newfstatat","SYS_nfsservctl","SYS_open","SYS_open_by_handle_at","SYS_open_tree","SYS_openat","SYS_openat2","SYS_pause","SYS_perf_event_open","SYS_personality","SYS_pidfd_getfd","SYS_pidfd_open","SYS_pidfd_send_signal","SYS_pipe","SYS_pipe2","SYS_pivot_root","SYS_pkey_alloc","SYS_pkey_free","SYS_pkey_mprotect","SYS_poll","SYS_ppoll","SYS_prctl","SYS_pread64","SYS_preadv","SYS_preadv2","SYS_prlimit64","SYS_process_madvise","SYS_process_mrelease","SYS_process_vm_readv","SYS_process_vm_writev","SYS_pselect6","SYS_ptrace","SYS_putpmsg","SYS_pwrite64","SYS_pwritev","SYS_pwritev2","SYS_query_module","SYS_quotactl","SYS_quotactl_fd","SYS_read","SYS_readahead","SYS_readlink","SYS_readlinkat","SYS_readv","SYS_reboot","SYS_recvfrom","SYS_recvmmsg","SYS_recvmsg","SYS_remap_file_pages","SYS_removexattr","SYS_rename","SYS_renameat","SYS_renameat2","SYS_request_key","SYS_restart_syscall","SYS_rmdir","SYS_rseq","SYS_rt_sigaction","SYS_rt_sigpending","SYS_rt_sigprocmask","SYS_rt_sigqueueinfo","SYS_rt_sigreturn","SYS_rt_sigsuspend","SYS_rt_sigtimedwait","SYS_rt_tgsigqueueinfo","SYS_sched_get_priority_max","SYS_sched_get_priority_min","SYS_sched_getaffinity","SYS_sched_getattr","SYS_sched_getparam","SYS_sched_getscheduler","SYS_sched_rr_get_interval","SYS_sched_setaffinity","SYS_sched_setattr","SYS_sched_setparam","SYS_sched_setscheduler","SYS_sched_yield","SYS_seccomp","SYS_security","SYS_select","SYS_semctl","SYS_semget","SYS_semop","SYS_semtimedop","SYS_sendfile","SYS_sendmmsg","SYS_sendmsg","SYS_sendto","SYS_set_mempolicy","SYS_set_mempolicy_home_node","SYS_set_robust_list","SYS_set_thread_area","SYS_set_tid_address","SYS_setdomainname","SYS_setfsgid","SYS_setfsuid","SYS_setgid","SYS_setgroups","SYS_sethostname","SYS_setitimer","SYS_setns","SYS_setpgid","SYS_setpriority","SYS_setregid","SYS_setresgid","SYS_setresuid","SYS_setreuid","SYS_setrlimit","SYS_setsid","SYS_setsockopt","SYS_settimeofday","SYS_setuid","SYS_setxattr","SYS_shmat","SYS_shmctl","SYS_shmdt","SYS_shmget","SYS_shutdown","SYS_sigaltstack","SYS_signalfd","SYS_signalfd4","SYS_socket","SYS_socketpair","SYS_splice","SYS_stat","SYS_statfs","SYS_statx","SYS_swapoff","SYS_swapon","SYS_symlink","SYS_symlinkat","SYS_sync","SYS_sync_file_range","SYS_syncfs","SYS_sysfs","SYS_sysinfo","SYS_syslog","SYS_tee","SYS_tgkill","SYS_time","SYS_timer_create","SYS_timer_delete","SYS_timer_getoverrun","SYS_timer_gettime","SYS_timer_settime","SYS_timerfd_create","SYS_timerfd_gettime","SYS_timerfd_settime","SYS_times","SYS_tkill","SYS_truncate","SYS_tuxcall","SYS_umask","SYS_umount2","SYS_uname","SYS_unlink","SYS_unlinkat","SYS_unshare","SYS_uselib","SYS_userfaultfd","SYS_ustat","SYS_utime","SYS_utimensat","SYS_utimes","SYS_vfork","SYS_vhangup","SYS_vmsplice","SYS_vserver","SYS_wait4","SYS_waitid","SYS_write","SYS_writev","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCA_CHAIN","TCA_DUMP_INVISIBLE","TCA_FCNT","TCA_HW_OFFLOAD","TCA_KIND","TCA_OPTIONS","TCA_PAD","TCA_RATE","TCA_STAB","TCA_STATS","TCA_STATS2","TCA_UNSPEC","TCA_XSTATS","TCFLSH","TCGETA","TCGETS","TCGETS2","TCGETX","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_CC_INFO","TCP_CM_INQ","TCP_CONGESTION","TCP_COOKIE_TRANSACTIONS","TCP_CORK","TCP_DEFER_ACCEPT","TCP_FASTOPEN","TCP_FASTOPEN_CONNECT","TCP_FASTOPEN_KEY","TCP_FASTOPEN_NO_COOKIE","TCP_INFO","TCP_INQ","TCP_KEEPCNT","TCP_KEEPIDLE","TCP_KEEPINTVL","TCP_LINGER2","TCP_MAXSEG","TCP_MD5SIG","TCP_MD5SIG_EXT","TCP_MD5SIG_MAXKEYLEN","TCP_NODELAY","TCP_NOTSENT_LOWAT","TCP_QUEUE_SEQ","TCP_QUICKACK","TCP_REPAIR","TCP_REPAIR_OPTIONS","TCP_REPAIR_QUEUE","TCP_REPAIR_WINDOW","TCP_SAVED_SYN","TCP_SAVE_SYN","TCP_SYNCNT","TCP_THIN_DUPACK","TCP_THIN_LINEAR_TIMEOUTS","TCP_TIMESTAMP","TCP_ULP","TCP_USER_TIMEOUT","TCP_WINDOW_CLAMP","TCP_ZEROCOPY_RECEIVE","TCSADRAIN","TCSAFLUSH","TCSANOW","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETS2","TCSETSF","TCSETSF2","TCSETSW","TCSETSW2","TCSETX","TCSETXF","TCSETXW","TCXONC","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TFD_TIMER_CANCEL_ON_SET","THOUSEP","TIMER_ABSTIME","TIME_BAD","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCONS","TIOCEXCL","TIOCGDEV","TIOCGETD","TIOCGEXCL","TIOCGICOUNT","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGPKT","TIOCGPTLCK","TIOCGPTN","TIOCGPTPEER","TIOCGRS485","TIOCGSERIAL","TIOCGSID","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMIWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSBRK","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSIG","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSPTLCK","TIOCSRS485","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","TIOCVHANGUP","TMPFS_MAGIC","TMP_MAX","TOSTOP","TRACEFS_MAGIC","TUN_READQ_SIZE","TUN_TAP_DEV","TUN_TUN_DEV","TUN_TYPE_MASK","T_FMT","T_FMT_AMPM","UDF_SUPER_MAGIC","UDP_CORK","UDP_ENCAP","UDP_GRO","UDP_NO_CHECK6_RX","UDP_NO_CHECK6_TX","UDP_SEGMENT","UINPUT_MAX_NAME_SIZE","UINPUT_VERSION","UIO_MAXIOV","UMOUNT_NOFOLLOW","UNAME26","USBDEVICE_SUPER_MAGIC","USER_PROCESS","USRQUOTA","UTIME_NOW","UTIME_OMIT","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_LOCAL","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WHOLE_SECONDS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_EXITCODE","W_OK","W_STOPCODE","XATTR_CREATE","XATTR_REPLACE","XENFS_SUPER_MAGIC","XFS_SUPER_MAGIC","XTABS","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_2_SYMLINKS","_PC_ALLOC_SIZE_MIN","_PC_ASYNC_IO","_PC_CHOWN_RESTRICTED","_PC_FILESIZEBITS","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_PRIO_IO","_PC_REC_INCR_XFER_SIZE","_PC_REC_MAX_XFER_SIZE","_PC_REC_MIN_XFER_SIZE","_PC_REC_XFER_ALIGN","_PC_SOCK_MAXBUF","_PC_SYMLINK_MAX","_PC_SYNC_IO","_PC_VDISABLE","_POSIX_VDISABLE","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_C_VERSION","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_AVPHYS_PAGES","_SC_BARRIERS","_SC_BASE","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHARCLASS_NAME_MAX","_SC_CHAR_BIT","_SC_CHAR_MAX","_SC_CHAR_MIN","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_C_LANG_SUPPORT","_SC_C_LANG_SUPPORT_R","_SC_DELAYTIMER_MAX","_SC_DEVICE_IO","_SC_DEVICE_SPECIFIC","_SC_DEVICE_SPECIFIC_R","_SC_EQUIV_CLASS_MAX","_SC_EXPR_NEST_MAX","_SC_FD_MGMT","_SC_FIFO","_SC_FILE_ATTRIBUTES","_SC_FILE_LOCKING","_SC_FILE_SYSTEM","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_INT_MAX","_SC_INT_MIN","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LEVEL1_DCACHE_ASSOC","_SC_LEVEL1_DCACHE_LINESIZE","_SC_LEVEL1_DCACHE_SIZE","_SC_LEVEL1_ICACHE_ASSOC","_SC_LEVEL1_ICACHE_LINESIZE","_SC_LEVEL1_ICACHE_SIZE","_SC_LEVEL2_CACHE_ASSOC","_SC_LEVEL2_CACHE_LINESIZE","_SC_LEVEL2_CACHE_SIZE","_SC_LEVEL3_CACHE_ASSOC","_SC_LEVEL3_CACHE_LINESIZE","_SC_LEVEL3_CACHE_SIZE","_SC_LEVEL4_CACHE_ASSOC","_SC_LEVEL4_CACHE_LINESIZE","_SC_LEVEL4_CACHE_SIZE","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_LONG_BIT","_SC_MAPPED_FILES","_SC_MB_LEN_MAX","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_MULTI_PROCESS","_SC_NETWORKING","_SC_NGROUPS_MAX","_SC_NL_ARGMAX","_SC_NL_LANGMAX","_SC_NL_MSGMAX","_SC_NL_NMAX","_SC_NL_SETMAX","_SC_NL_TEXTMAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_NZERO","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PII","_SC_PII_INTERNET","_SC_PII_INTERNET_DGRAM","_SC_PII_INTERNET_STREAM","_SC_PII_OSI","_SC_PII_OSI_CLTS","_SC_PII_OSI_COTS","_SC_PII_OSI_M","_SC_PII_SOCKET","_SC_PII_XTI","_SC_PIPE","_SC_POLL","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_REGEX_VERSION","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SCHAR_MAX","_SC_SCHAR_MIN","_SC_SELECT","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SHRT_MAX","_SC_SHRT_MIN","_SC_SIGNALS","_SC_SIGQUEUE_MAX","_SC_SINGLE_PROCESS","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SSIZE_MAX","_SC_SS_REPL_MAX","_SC_STREAMS","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_SYSTEM_DATABASE","_SC_SYSTEM_DATABASE_R","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_ROBUST_PRIO_INHERIT","_SC_THREAD_ROBUST_PRIO_PROTECT","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_T_IOV_MAX","_SC_UCHAR_MAX","_SC_UINT_MAX","_SC_UIO_MAXIOV","_SC_ULONG_MAX","_SC_USER_GROUPS","_SC_USER_GROUPS_R","_SC_USHRT_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_V7_ILP32_OFF32","_SC_V7_ILP32_OFFBIG","_SC_V7_LP64_OFF64","_SC_V7_LPBIG_OFFBIG","_SC_VERSION","_SC_WORD_BIT","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_SC_XOPEN_XPG2","_SC_XOPEN_XPG3","_SC_XOPEN_XPG4","__NFT_REG_MAX","__SIZEOF_PTHREAD_BARRIERATTR_T","__SIZEOF_PTHREAD_BARRIER_T","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__UT_HOSTSIZE","__UT_LINESIZE","__UT_NAMESIZE","__WALL","__WCLONE","__WNOTHREAD","__c_anonymous_ifr_ifru","__c_anonymous_ifru_map","__c_anonymous_ptrace_syscall_info_data","__c_anonymous_ptrace_syscall_info_entry","__c_anonymous_ptrace_syscall_info_exit","__c_anonymous_ptrace_syscall_info_seccomp","__c_anonymous_sockaddr_can_can_addr","__c_anonymous_sockaddr_can_j1939","__c_anonymous_sockaddr_can_tp","__errno_location","__exit_status","__fsword_t","__glibc_reserved1","__glibc_reserved2","__glibc_reserved3","__glibc_reserved4","__key","__priority_which_t","__rlimit_resource_t","__s16","__s32","__s64","__seq","__statx_timestamp_pad1","__syscall_ulong_t","__timeval","__u16","__u32","__u64","__u8","__unused1","__unused10","__unused11","__unused2","__unused3","__unused4","__unused5","__unused6","__unused7","__unused8","__unused9","_exit","_f","_libc_fpstate","_libc_fpxreg","_libc_xmmreg","_st","_xmm","abort","abs","absflat","absfuzz","absinfo","absmax","absmin","accept","accept4","access","acct","actime","addmntent","addr","addr","addr_mask","addrinfo","adjtime","adjtimex","af_alg_iv","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arch","arch","arena","arena","args","args","args","arp_dev","arp_flags","arp_flags","arp_ha","arp_ha","arp_netmask","arp_netmask","arp_pa","arp_pa","arpd_request","arphdr","arpreq","arpreq_old","asctime_r","atexit","atof","atoi","atol","atoll","attack_length","attack_level","auth_keynumber","backtrace","base_addr","bind","blkcnt64_t","blkcnt_t","blksize_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brk","bsearch","bufferram","bustype","button","c_cc","c_cc","c_cflag","c_cflag","c_char","c_double","c_float","c_iflag","c_iflag","c_int","c_ispeed","c_ispeed","c_lflag","c_lflag","c_line","c_line","c_long","c_longlong","c_oflag","c_oflag","c_ospeed","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","can_addr","can_dlc","can_err_mask_t","can_family","can_filter","can_frame","can_id","can_id","can_id","can_ifindex","can_mask","canfd_frame","canid_t","cc_t","center","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","cgroup","ch_addralign","ch_addralign","ch_reserved","ch_size","ch_size","ch_type","ch_type","chdir","child_tid","chmod","chown","chroot","clearenv","clearerr","clock_adjtime","clock_getcpuclockid","clock_getres","clock_gettime","clock_nanosleep","clock_settime","clock_t","clockid","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_args","close","closedir","closelog","cmd","cmsg_len","cmsg_level","cmsg_type","cmsghdr","code","code","code","codes_ptr","codes_size","connect","constant","cookie","copy_file_range","cpu_set_t","creat","creat64","cs","ctermid","ctime_r","cuid","currency_symbol","custom_data","custom_len","cwd","cwd","d_ino","d_ino","d_name","d_name","d_off","d_off","d_reclen","d_reclen","d_type","d_type","daemon","data","data","deadband","decimal_point","delay","dest_offset","dev","dev_t","difftime","direction","dirent","dirent64","dirfd","dirname","dl_iterate_phdr","dl_phdr_info","dladdr","dladdr1","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlinfo","dlmopen","dlopen","dlpi_addr","dlpi_adds","dlpi_name","dlpi_phdr","dlpi_phnum","dlpi_subs","dlpi_tls_data","dlpi_tls_modid","dlsym","dma","domainname","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curinodes","dqb_curspace","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_valid","dqblk","drand48","ds","dup","dup2","dup3","duplocale","e_ehsize","e_ehsize","e_entry","e_entry","e_exit","e_flags","e_flags","e_ident","e_ident","e_machine","e_machine","e_phentsize","e_phentsize","e_phnum","e_phnum","e_phoff","e_phoff","e_shentsize","e_shentsize","e_shnum","e_shnum","e_shoff","e_shoff","e_shstrndx","e_shstrndx","e_termination","e_type","e_type","e_version","e_version","eaccess","ee_code","ee_data","ee_errno","ee_info","ee_origin","ee_pad","ee_type","effect","effect_id","eflags","element","end_level","endgrent","endmntent","endpwent","endservent","endspent","endutxent","entry","envelope","envelope","envelope","epoll_create","epoll_create1","epoll_ctl","epoll_event","epoll_pwait","epoll_wait","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","erand48","errcnt","error","es","esterror","esterror","euidaccess","event_len","eventfd","events","events","execl","execle","execlp","execv","execve","execvp","execvpe","exit","exit","exit_signal","explicit_bzero","exponent","f_bavail","f_bavail","f_bavail","f_bavail","f_bfree","f_bfree","f_bfree","f_bfree","f_blocks","f_blocks","f_blocks","f_blocks","f_bsize","f_bsize","f_bsize","f_bsize","f_favail","f_favail","f_ffree","f_ffree","f_ffree","f_ffree","f_files","f_files","f_files","f_files","f_flag","f_flag","f_flags","f_frsize","f_frsize","f_frsize","f_frsize","f_fsid","f_fsid","f_fsid","f_fsid","f_namelen","f_namelen","f_namemax","f_namemax","f_spare","f_type","f_type","faccessat","fade_length","fade_level","fallocate","fallocate64","fanotify_event_metadata","fanotify_init","fanotify_mark","fanotify_response","fchdir","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd","fd","fd_set","fdatasync","fdopen","fdopendir","feof","ferror","fexecve","ff_condition_effect","ff_constant_effect","ff_effect","ff_effects_max","ff_effects_max","ff_envelope","ff_periodic_effect","ff_ramp_effect","ff_replay","ff_rumble_effect","ff_trigger","fflush","fgetc","fgetgrent_r","fgetpos","fgetpos64","fgetpwent_r","fgets","fgetspent_r","fgetxattr","file_clone_range","fileno","filter","flag","flags","flags","flags","flags","flags","flags","flags","flags","flat","flistxattr","flock","flock","flock64","fmemopen","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fop","fop","fopen","fopen64","fordblks","fordblks","fork","forkpty","fpathconf","fpos64_t","fpos_t","fpregs","fprintf","fputc","fputs","frac_digits","fread","fread_unlocked","free","freeaddrinfo","freehigh","freeifaddrs","freelocale","freeram","freeswap","fremovexattr","freopen","freopen64","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fs","fs_base","fsblkcnt_t","fscanf","fseek","fseeko","fseeko64","fsetpos","fsetpos64","fsetxattr","fsfilcnt_t","fsid_t","fsmblks","fsmblks","fstat","fstat64","fstatat","fstatat64","fstatfs","fstatfs64","fstatvfs","fstatvfs64","fsync","ftell","ftello","ftello64","ftok","ftruncate","ftruncate64","ftw","ftw","futimens","futimes","fuzz","fwrite","gai_strerror","genlmsghdr","getaddrinfo","getauxval","getchar","getchar_unlocked","getcontext","getcwd","getdomainname","getdtablesize","getegid","getentropy","getenv","geteuid","getgid","getgrent","getgrent_r","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","getifaddrs","getline","getloadavg","getlogin","getmntent","getmntent_r","getnameinfo","getopt","getopt_long","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprotobyname","getprotobynumber","getpt","getpwent","getpwent_r","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrandom","getresgid","getresuid","getrlimit","getrlimit64","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","getspent","getspent_r","getspnam","getspnam_r","gettid","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid","gid_t","gl_flags","gl_flags","gl_offs","gl_offs","gl_pathc","gl_pathc","gl_pathv","gl_pathv","glob","glob64","glob64_t","glob_t","globfree","globfree64","gmtime","gmtime_r","gnu_basename","gnu_get_libc_release","gnu_get_libc_version","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","greg_t","gregs","group","group","grouping","gs","gs_base","h_addr_list","h_addrtype","h_aliases","h_length","h_name","ha","has_arg","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hasmntopt","hblkhd","hblkhd","hblks","hblks","hostent","hstrerror","hwtstamp_config","i387","iconv","iconv_close","iconv_open","iconv_t","id","id","id","id_t","idtype_t","if_freenameindex","if_index","if_indextoname","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_flags","ifa_ifu","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifr6_addr","ifr6_ifindex","ifr6_prefixlen","ifr_ifru","ifr_name","ifreq","ifru_addr","ifru_broadaddr","ifru_data","ifru_dstaddr","ifru_flags","ifru_hwaddr","ifru_ifindex","ifru_map","ifru_metric","ifru_mtu","ifru_netmask","ifru_newname","ifru_slave","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_ifreq","in6_pktinfo","in6_rtmsg","in_addr","in_addr_t","in_pktinfo","in_port_t","index","initgroups","ino64_t","ino_t","inotify_add_watch","inotify_event","inotify_init","inotify_init1","inotify_rm_watch","input_absinfo","input_event","input_id","input_keymap_entry","input_mask","instruction_pointer","instruction_pointer","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","interval","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","ioperm","iopl","iov_base","iov_len","iovec","ip","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","irq","is_error","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_interval","it_value","it_value","itimerspec","itimerval","iv","ivlen","j1939","j1939_filter","jf","jitcnt","jitter","jrand48","jt","k","keepcost","keepcost","key_t","keycode","kill","killpg","l_len","l_len","l_linger","l_onoff","l_pid","l_pid","l_start","l_start","l_type","l_type","l_whence","l_whence","labs","lchown","lcong48","lconv","left_coeff","left_saturation","len","len","len","len","length","level","lgetxattr","linger","link","linkat","lio_listio","listen","listxattr","llistxattr","loads","locale_t","localeconv","localtime","localtime_r","lockf","loff_t","login_tty","lrand48","lremovexattr","lseek","lseek64","lsetxattr","lstat","lstat64","lutimes","machine","madvise","magic","magnitude","major","makecontext","makedev","mallinfo","mallinfo","mallinfo2","mallinfo2","malloc","malloc_info","malloc_trim","malloc_usable_size","mallopt","mask","mask","max_align_t","maxerror","maxerror","maximum","mcontext_t","mem_end","mem_start","mem_unit","memalign","memchr","memcmp","memcpy","memfd_create","memmem","memmove","memrchr","memset","metadata_len","mincore","minimum","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkostemp","mkostemps","mkstemp","mkstemps","mktime","mlock","mlock2","mlockall","mmap","mmap64","mmsghdr","mnt_dir","mnt_freq","mnt_fsname","mnt_opts","mnt_passno","mnt_type","mntent","mode","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mq_attr","mq_close","mq_curmsgs","mq_flags","mq_getattr","mq_maxmsg","mq_msgsize","mq_open","mq_receive","mq_send","mq_setattr","mq_timedreceive","mq_timedsend","mq_unlink","mqd_t","mr_address","mr_alen","mr_ifindex","mr_type","mrand48","mremap","msg","msg_control","msg_controllen","msg_ctime","msg_flags","msg_hdr","msg_iov","msg_iovlen","msg_len","msg_lrpid","msg_lspid","msg_name","msg_namelen","msg_perm","msg_qbytes","msg_qnum","msg_rtime","msg_stime","msgctl","msgget","msghdr","msginfo","msglen_t","msgmap","msgmax","msgmnb","msgmni","msgpool","msgqnum_t","msgrcv","msgseg","msgsnd","msgssz","msgtql","msqid_ds","msync","munlock","munlockall","munmap","mxcr_mask","mxcr_mask","mxcsr","mxcsr","n_cs_precedes","n_sep_by_space","n_sign_posn","name","name","name","name","name","name_mask","name_t","nanosleep","negative_sign","newlocale","nfds_t","nice","nl_family","nl_groups","nl_item","nl_langinfo","nl_langinfo_l","nl_mmap_hdr","nl_mmap_req","nl_pid","nl_pktinfo","nla_len","nla_type","nlattr","nlink_t","nlmsg_flags","nlmsg_len","nlmsg_pid","nlmsg_seq","nlmsg_type","nlmsgerr","nlmsghdr","nm_block_nr","nm_block_size","nm_frame_nr","nm_frame_size","nm_gid","nm_group","nm_len","nm_pid","nm_status","nm_uid","nodename","nr","nr","nr","nr","nrand48","ntp_adjtime","ntp_gettime","ntptimeval","nxt_assoc_id","nxt_flags","nxt_length","nxt_ppid","nxt_sid","off","off64_t","off_t","offset","offset","old","op","open","open64","open_how","open_memstream","open_wmemstream","openat","openat64","opendir","openlog","openpty","option","ordblks","ordblks","orig_rax","p_aliases","p_align","p_align","p_cs_precedes","p_filesz","p_filesz","p_flags","p_flags","p_memsz","p_memsz","p_name","p_offset","p_offset","p_paddr","p_paddr","p_proto","p_sep_by_space","p_sign_posn","p_type","p_type","p_vaddr","p_vaddr","packet_mreq","pad","pad","pad","parent_tid","passwd","pathconf","pause","pclose","period","perror","personality","pgn","pgn","pgn_mask","pgn_t","phase","pid","pid","pid_t","pidfd","pipe","pipe2","poll","pollfd","popen","port","positive_sign","posix_basename","posix_fadvise","posix_fadvise64","posix_fallocate","posix_fallocate64","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addchdir_np","posix_spawn_file_actions_addclose","posix_spawn_file_actions_addclosefrom_np","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addfchdir_np","posix_spawn_file_actions_addopen","posix_spawn_file_actions_addtcsetpgrp_np","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getschedparam","posix_spawnattr_getschedpolicy","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setschedparam","posix_spawnattr_setschedpolicy","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppoll","ppsfreq","pr_policy","pr_value","prctl","pread","pread64","preadv","preadv2","preadv64","preadv64v2","precision","printf","priority_t","prlimit","prlimit64","process_vm_readv","process_vm_writev","procs","product","protoent","pselect","pthread_atfork","pthread_attr_destroy","pthread_attr_getaffinity_np","pthread_attr_getguardsize","pthread_attr_getstack","pthread_attr_init","pthread_attr_setaffinity_np","pthread_attr_setdetachstate","pthread_attr_setstacksize","pthread_attr_t","pthread_barrier_destroy","pthread_barrier_init","pthread_barrier_t","pthread_barrier_wait","pthread_barrierattr_destroy","pthread_barrierattr_getpshared","pthread_barrierattr_init","pthread_barrierattr_setpshared","pthread_barrierattr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getclock","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setclock","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_getaffinity_np","pthread_getattr_np","pthread_getcpuclockid","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_consistent","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_timedlock","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getprotocol","pthread_mutexattr_getpshared","pthread_mutexattr_getrobust","pthread_mutexattr_init","pthread_mutexattr_setprotocol","pthread_mutexattr_setpshared","pthread_mutexattr_setrobust","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getkind_np","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setkind_np","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setaffinity_np","pthread_setname_np","pthread_setschedparam","pthread_setschedprio","pthread_setspecific","pthread_sigmask","pthread_sigqueue","pthread_spin_destroy","pthread_spin_init","pthread_spin_lock","pthread_spin_trylock","pthread_spin_unlock","pthread_spinlock_t","pthread_t","ptrace","ptrace_peeksiginfo_args","ptrace_rseq_configuration","ptrace_syscall_info","ptrdiff_t","ptsname","ptsname_r","putchar","putchar_unlocked","putenv","puts","pututxline","pw_dir","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwrite64","pwritev","pwritev2","pwritev64","pwritev64v2","qsort","qsort_r","quotactl","r10","r11","r12","r13","r14","r15","r8","r9","raise","rand","rax","rbp","rbx","rcv_assoc_id","rcv_context","rcv_cumtsn","rcv_flags","rcv_ppid","rcv_sid","rcv_ssn","rcv_tsn","rcx","rdi","rdp","rdp","rdx","read","readahead","readdir","readdir64","readdir64_r","readdir_r","readlink","readlinkat","readv","realloc","reallocarray","realpath","reboot","recv","recvfrom","recvmmsg","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","regs","release","remap_file_pages","remove","removexattr","rename","renameat","renameat2","replay","req","request_id","request_id","res_init","reserved","reserved","resolution","resolve","response","ret_data","retval","retval","revents","rewind","rewinddir","right_coeff","right_saturation","rip","rip","rip","rlim64_t","rlim_cur","rlim_cur","rlim_max","rlim_max","rlim_t","rlimit","rlimit64","rm_eo","rm_so","rmdir","rseq_abi_pointer","rseq_abi_size","rsi","rsp","rt_class","rt_dev","rt_dst","rt_flags","rt_gateway","rt_genmask","rt_irtt","rt_metric","rt_mtu","rt_pad1","rt_pad2","rt_pad3","rt_pad4","rt_tos","rt_window","rtentry","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","rx_filter","rx_id","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_family","sa_family_t","sa_flags","sa_mask","sa_restorer","sa_sigaction","salg_family","salg_feat","salg_mask","salg_name","salg_type","sbrk","scancode","scanf","sched_get_priority_max","sched_get_priority_min","sched_getaffinity","sched_getcpu","sched_getparam","sched_getscheduler","sched_param","sched_priority","sched_rr_get_interval","sched_setaffinity","sched_setparam","sched_setscheduler","sched_yield","sctp_assoc_t","sctp_authinfo","sctp_initmsg","sctp_nxtinfo","sctp_prinfo","sctp_rcvinfo","sctp_sndinfo","sctp_sndrcvinfo","seccomp","seccomp_data","seccomp_data","seccomp_notif","seccomp_notif_resp","seccomp_notif_sizes","seed48","seekdir","select","sem_close","sem_ctime","sem_destroy","sem_flg","sem_getvalue","sem_init","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_perm","sem_post","sem_t","sem_timedwait","sem_trywait","sem_unlink","sem_wait","semaem","sembuf","semctl","semget","semid_ds","seminfo","semmap","semmni","semmns","semmnu","semmsl","semop","semopm","semume","semusz","semvmx","send","sendfile","sendfile64","sendmmsg","sendmsg","sendto","servent","set_tid","set_tid_size","setbuf","setcontext","setdomainname","setegid","setenv","seteuid","setfsgid","setfsuid","setgid","setgrent","setgroups","sethostid","sethostname","setlocale","setlogmask","setmntent","setns","setpgid","setpriority","setpwent","setregid","setresgid","setresuid","setreuid","setrlimit","setrlimit64","setservent","setsid","setsockopt","setspent","settimeofday","setuid","setutxent","setvbuf","setxattr","sgetspent_r","sh_addr","sh_addr","sh_addralign","sh_addralign","sh_entsize","sh_entsize","sh_flags","sh_flags","sh_info","sh_info","sh_link","sh_link","sh_name","sh_name","sh_offset","sh_offset","sh_size","sh_size","sh_type","sh_type","sharedram","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_code","si_errno","si_pid","si_signo","si_status","si_stime","si_uid","si_utime","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_thread_id","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","signal","signalfd","signalfd_siginfo","signature","significand","sigpending","sigprocmask","sigset_t","sigsuspend","sigtimedwait","sigval","sigwait","sigwaitinfo","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sinfo_assoc_id","sinfo_context","sinfo_cumtsn","sinfo_flags","sinfo_ppid","sinfo_ssn","sinfo_stream","sinfo_timetolive","sinfo_tsn","sinit_max_attempts","sinit_max_init_timeo","sinit_max_instreams","sinit_num_ostreams","sival_ptr","size_t","sleep","sll_addr","sll_family","sll_halen","sll_hatype","sll_ifindex","sll_pkttype","sll_protocol","smblks","smblks","snd_assoc_id","snd_context","snd_flags","snd_ppid","snd_sid","snprintf","sock_extended_err","sock_filter","sock_fprog","sock_txtime","sockaddr","sockaddr_alg","sockaddr_can","sockaddr_in","sockaddr_in6","sockaddr_ll","sockaddr_nl","sockaddr_storage","sockaddr_un","sockaddr_vm","socket","socketpair","socklen_t","sp_expire","sp_flag","sp_inact","sp_lstchg","sp_max","sp_min","sp_namp","sp_pwdp","sp_warn","speed_t","splice","sprintf","spwd","srand","srand48","src_fd","src_length","src_offset","ss","ss_family","ss_flags","ss_size","ss_sp","sscanf","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","ssize_t","st_atime","st_atime","st_atime_nsec","st_atime_nsec","st_blksize","st_blksize","st_blocks","st_blocks","st_ctime","st_ctime","st_ctime_nsec","st_ctime_nsec","st_dev","st_dev","st_gid","st_gid","st_info","st_info","st_ino","st_ino","st_mode","st_mode","st_mtime","st_mtime","st_mtime_nsec","st_mtime_nsec","st_name","st_name","st_nlink","st_nlink","st_other","st_other","st_rdev","st_rdev","st_shndx","st_shndx","st_size","st_size","st_size","st_size","st_space","st_uid","st_uid","st_value","st_value","stabil","stack","stack_pointer","stack_size","stack_t","stamp","start_code","start_level","start_stack","stat","stat","stat64","stat64","statfs","statfs","statfs64","statfs64","status","statvfs","statvfs","statvfs64","statvfs64","statx","statx","statx_timestamp","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strchrnul","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strong_magnitude","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtoul","strtoull","strxfrm","stx_atime","stx_attributes","stx_attributes_mask","stx_blksize","stx_blocks","stx_btime","stx_ctime","stx_dev_major","stx_dev_minor","stx_dio_mem_align","stx_dio_offset_align","stx_gid","stx_ino","stx_mask","stx_mnt_id","stx_mode","stx_mtime","stx_nlink","stx_rdev_major","stx_rdev_minor","stx_size","stx_uid","sun_family","sun_path","suseconds_t","sval","svm_cid","svm_family","svm_port","svm_reserved1","svm_zero","swapcontext","swapoff","swapon","swd","swd","symlink","symlinkat","sync","sync_file_range","syncfs","syscall","sysconf","sysctl","sysinfo","sysinfo","syslog","sysname","system","tai","tai","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","tee","telldir","termios","termios2","thousands_sep","tick","time","time","time","time","time_t","timegm","timer_create","timer_delete","timer_getoverrun","timer_gettime","timer_settime","timer_t","timerfd_create","timerfd_gettime","timerfd_settime","times","timespec","timeval","timex","timezone","tls","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpfile64","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","totalhigh","totalram","totalswap","toupper","tp","trigger","truncate","truncate64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_nsec","tv_sec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","tx_id","tx_type","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u64","u_ar0","u_comm","u_debugreg","u_dsize","u_fpstate","u_fpvalid","u_ssize","u_tsize","uc_flags","uc_link","uc_mcontext","uc_sigmask","uc_stack","ucontext_t","ucred","uid","uid","uid_t","uinput_abs_setup","uinput_ff_erase","uinput_ff_upload","uinput_setup","uinput_user_dev","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","umount","umount2","uname","ungetc","unlink","unlinkat","unlockpt","unsetenv","unshare","uordblks","uordblks","updated","uptime","useconds_t","uselocale","user","user_fpregs_struct","user_regs_struct","usleep","usmblks","usmblks","ut_addr_v6","ut_exit","ut_host","ut_id","ut_line","ut_pid","ut_session","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpname","utmpx","utmpxname","utsname","val","value","value","vendor","vers","version","version","version","vfork","vhangup","vmsplice","wait","wait4","waitid","waitpid","waveform","wchar_t","wcslen","wcstombs","wd","weak_magnitude","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xmm_space"],"q":[[0,"libc"]],"dmaximum number of services provided on the same listening …uth Header","","IP Payload Comp. Protocol","DCCP","IP6 destination option","exterior gateway protocol","encapsulation header","IP6 Encap Sec. Payload","IP6 fragmentation header","General Routing Encap.","Hop-by-hop option header","","","xns idp","group mgmt protocol","","for compatibility","","","","","Multipath TCP","","IP6 no next header","Protocol indep. multicast","pup","raw IP packet","IP6 routing header","resource reservation","SCTP","","tp-4 w/ class negotiationhe <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of thisquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","GNU version of <code>basename(3)</code>, defined in <code>string.h</codeinterface name, e.g. “en0”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeversion of <code>basename(3)</code>, defined in <code>libgen.h</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,3],4],0,0,0,0,0,0,0,0,0,0,[2,2],0,0,0,0,0,0,0,0,[2,2],0,[[1,2],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,6],[7,5],[8,8],[[7,5],5],[8,8],0,0,0,[9,10],[[11,12]],[12,9],[[11,12],9],[[12,12],13],[[11,12],13],[[11,12]],0,[12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,14]],[[9,14],13],[[9,14]],0,[14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9,9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,15],0,0,[15,15],0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[16,16,16],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,[16,13],0,0,0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],[9,9],[9,13],[9,13],0,0,0,0,0,0,0,[[9,9]],[9,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[17,18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,13],0,[9,9],0,[9,13],[9,13],[9,13],[9,13],0,0,0,[9,9],[9,9],0,[[9,9],9],0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[18,18],[44,44],[45,45],[46,46],[47,47],[14,14],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[12,12],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[17,17],[114,114],[115,115],[116,116],[117,117],[4,4],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[7,7],[5,5],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[188,188],[189,189],[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[20,20],13],[[21,21],13],[[22,22],13],[[23,23],13],[[24,24],13],[[25,25],13],[[26,26],13],[[27,27],13],[[28,28],13],[[29,29],13],[[30,30],13],[[31,31],13],[[32,32],13],[[33,33],13],[[34,34],13],[[35,35],13],[[36,36],13],[[40,40],13],[[41,41],13],[[42,42],13],[[43,43],13],[[18,18],13],[[44,44],13],[[45,45],13],[[46,46],13],[[47,47],13],[[14,14],13],[[48,48],13],[[49,49],13],[[50,50],13],[[51,51],13],[[52,52],13],[[53,53],13],[[54,54],13],[[55,55],13],[[56,56],13],[[57,57],13],[[58,58],13],[[59,59],13],[[60,60],13],[[61,61],13],[[62,62],13],[[63,63],13],[[65,65],13],[[66,66],13],[[67,67],13],[[68,68],13],[[69,69],13],[[70,70],13],[[71,71],13],[[72,72],13],[[73,73],13],[[12,12],13],[[74,74],13],[[75,75],13],[[76,76],13],[[77,77],13],[[78,78],13],[[79,79],13],[[80,80],13],[[81,81],13],[[82,82],13],[[83,83],13],[[84,84],13],[[85,85],13],[[86,86],13],[[87,87],13],[[88,88],13],[[89,89],13],[[90,90],13],[[91,91],13],[[92,92],13],[[93,93],13],[[94,94],13],[[95,95],13],[[96,96],13],[[97,97],13],[[98,98],13],[[99,99],13],[[100,100],13],[[101,101],13],[[102,102],13],[[103,103],13],[[104,104],13],[[105,105],13],[[106,106],13],[[107,107],13],[[108,108],13],[[109,109],13],[[110,110],13],[[111,111],13],[[112,112],13],[[113,113],13],[[17,17],13],[[114,114],13],[[115,115],13],[[116,116],13],[[117,117],13],[[4,4],13],[[118,118],13],[[119,119],13],[[120,120],13],[[121,121],13],[[122,122],13],[[123,123],13],[[124,124],13],[[125,125],13],[[126,126],13],[[127,127],13],[[128,128],13],[[129,129],13],[[130,130],13],[[131,131],13],[[132,132],13],[[133,133],13],[[134,134],13],[[135,135],13],[[136,136],13],[[137,137],13],[[138,138],13],[[139,139],13],[[140,140],13],[[141,141],13],[[144,144],13],[[148,148],13],[[149,149],13],[[150,150],13],[[151,151],13],[[152,152],13],[[153,153],13],[[7,7],13],[[5,5],13],[[154,154],13],[[155,155],13],[[156,156],13],[[157,157],13],[[158,158],13],[[159,159],13],[[160,160],13],[[161,161],13],[[162,162],13],[[163,163],13],[[164,164],13],[[165,165],13],[[166,166],13],[[167,167],13],[[168,168],13],[[169,169],13],[[170,170],13],[[171,171],13],[[172,172],13],[[173,173],13],[[174,174],13],[[175,175],13],[[176,176],13],[[177,177],13],[[178,178],13],[[179,179],13],[[180,180],13],[[181,181],13],[[182,182],13],[[183,183],13],[[184,184],13],[[185,185],13],[[186,186],13],[[187,187],13],[[188,188],13],[[189,189],13],[[190,190],13],[[191,191],13],[[192,192],13],[[193,193],13],[[194,194],13],[[195,195],13],[[196,196],13],[[197,197],13],[[198,198],13],[[199,199],13],[[200,200],13],[[201,201],13],[[203,203],13],[[204,204],13],[[205,205],13],[[206,206],13],[[207,207],13],[[208,208],13],[[209,209],13],[[210,210],13],[[211,211],13],[[212,212],13],[[213,213],13],[[214,214],13],[[217,217],13],[[218,218],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[19,219],220],[[20,219],220],[[21,219],220],[[22,219],220],[[23,219],220],[[24,219],220],[[25,219],220],[[26,219],220],[[27,219],220],[[28,219],220],[[29,219],220],[[30,219],220],[[31,219],220],[[32,219],220],[[33,219],220],[[34,219],220],[[35,219],220],[[36,219],220],[[37,219],220],[[38,219],220],[[39,219],220],[[40,219],220],[[41,219],220],[[42,219],220],[[43,219],220],[[18,219],220],[[44,219],220],[[45,219],220],[[46,219],220],[[47,219],220],[[14,219],220],[[48,219],220],[[49,219],220],[[50,219],220],[[51,219],220],[[52,219],220],[[53,219],220],[[54,219],220],[[55,219],220],[[56,219],220],[[57,219],220],[[58,219],220],[[59,219],220],[[60,219],220],[[61,219],220],[[62,219],220],[[63,219],220],[[221,219],[[223,[222]]]],[[64,219],220],[[65,219],220],[[66,219],220],[[67,219],220],[[68,219],220],[[69,219],220],[[70,219],220],[[71,219],220],[[72,219],220],[[73,219],220],[[12,219],220],[[74,219],220],[[75,219],220],[[76,219],220],[[77,219],220],[[78,219],220],[[79,219],220],[[80,219],220],[[81,219],220],[[82,219],220],[[83,219],220],[[84,219],220],[[85,219],220],[[86,219],220],[[87,219],220],[[88,219],220],[[89,219],220],[[90,219],220],[[91,219],220],[[92,219],220],[[93,219],220],[[94,219],220],[[95,219],220],[[96,219],220],[[97,219],220],[[98,219],220],[[99,219],220],[[100,219],220],[[101,219],220],[[102,219],220],[[103,219],220],[[104,219],220],[[105,219],220],[[106,219],220],[[107,219],220],[[108,219],220],[[109,219],220],[[110,219],220],[[111,219],220],[[112,219],220],[[113,219],220],[[17,219],220],[[114,219],220],[[115,219],220],[[116,219],220],[[117,219],220],[[4,219],220],[[118,219],220],[[119,219],220],[[120,219],220],[[121,219],220],[[122,219],220],[[123,219],220],[[124,219],220],[[125,219],220],[[126,219],220],[[127,219],220],[[128,219],220],[[129,219],220],[[130,219],220],[[131,219],220],[[132,219],220],[[133,219],220],[[134,219],220],[[135,219],220],[[136,219],220],[[137,219],220],[[138,219],220],[[139,219],220],[[140,219],220],[[141,219],220],[[142,219],220],[[143,219],220],[[144,219],220],[[148,219],220],[[149,219],220],[[150,219],220],[[151,219],220],[[152,219],220],[[153,219],220],[[7,219],220],[[5,219],220],[[154,219],220],[[155,219],220],[[156,219],220],[[157,219],220],[[158,219],220],[[159,219],220],[[160,219],220],[[161,219],220],[[162,219],220],[[163,219],220],[[164,219],220],[[165,219],220],[[166,219],220],[[167,219],220],[[168,219],220],[[169,219],220],[[170,219],220],[[171,219],220],[[172,219],220],[[173,219],220],[[174,219],220],[[175,219],220],[[176,219],220],[[177,219],220],[[178,219],220],[[179,219],220],[[180,219],220],[[181,219],220],[[182,219],220],[[183,219],220],[[184,219],220],[[185,219],220],[[186,219],220],[[187,219],220],[[188,219],220],[[189,219],220],[[190,219],220],[[191,219],220],[[192,219],220],[[193,219],220],[[194,219],220],[[195,219],220],[[196,219],220],[[197,219],220],[[198,219],220],[[199,219],220],[[200,219],220],[[201,219],220],[[203,219],220],[[204,219],220],[[205,219],220],[[206,219],220],[[207,219],220],[[208,219],220],[[209,219],220],[[210,219],220],[[211,219],220],[[212,219],220],[[213,219],220],[[214,219],220],[[217,219],220],[[218,219],220],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[20,224]],[[21,224]],[[22,224]],[[23,224]],[[24,224]],[[25,224]],[[26,224]],[[27,224]],[[28,224]],[[29,224]],[[30,224]],[[31,224]],[[32,224]],[[33,224]],[[34,224]],[[35,224]],[[36,224]],[[40,224]],[[41,224]],[[42,224]],[[43,224]],[[18,224]],[[44,224]],[[45,224]],[[46,224]],[[47,224]],[[14,224]],[[48,224]],[[49,224]],[[50,224]],[[51,224]],[[52,224]],[[53,224]],[[54,224]],[[55,224]],[[56,224]],[[57,224]],[[58,224]],[[59,224]],[[60,224]],[[61,224]],[[62,224]],[[63,224]],[[65,224]],[[66,224]],[[67,224]],[[68,224]],[[69,224]],[[70,224]],[[71,224]],[[72,224]],[[73,224]],[[12,224]],[[74,224]],[[75,224]],[[76,224]],[[77,224]],[[78,224]],[[79,224]],[[80,224]],[[81,224]],[[82,224]],[[83,224]],[[84,224]],[[85,224]],[[86,224]],[[87,224]],[[88,224]],[[89,224]],[[90,224]],[[91,224]],[[92,224]],[[93,224]],[[94,224]],[[95,224]],[[96,224]],[[97,224]],[[98,224]],[[99,224]],[[100,224]],[[101,224]],[[102,224]],[[103,224]],[[104,224]],[[105,224]],[[106,224]],[[107,224]],[[108,224]],[[109,224]],[[110,224]],[[111,224]],[[112,224]],[[113,224]],[[17,224]],[[114,224]],[[115,224]],[[116,224]],[[117,224]],[[4,224]],[[118,224]],[[119,224]],[[120,224]],[[121,224]],[[122,224]],[[123,224]],[[124,224]],[[125,224]],[[126,224]],[[127,224]],[[128,224]],[[129,224]],[[130,224]],[[131,224]],[[132,224]],[[133,224]],[[134,224]],[[135,224]],[[136,224]],[[137,224]],[[138,224]],[[139,224]],[[140,224]],[[141,224]],[[144,224]],[[148,224]],[[149,224]],[[150,224]],[[151,224]],[[152,224]],[[153,224]],[[7,224]],[[5,224]],[[154,224]],[[155,224]],[[156,224]],[[157,224]],[[158,224]],[[159,224]],[[160,224]],[[161,224]],[[162,224]],[[163,224]],[[164,224]],[[165,224]],[[166,224]],[[167,224]],[[168,224]],[[169,224]],[[170,224]],[[171,224]],[[172,224]],[[173,224]],[[174,224]],[[175,224]],[[176,224]],[[177,224]],[[178,224]],[[179,224]],[[180,224]],[[181,224]],[[182,224]],[[183,224]],[[184,224]],[[185,224]],[[186,224]],[[187,224]],[[188,224]],[[189,224]],[[190,224]],[[191,224]],[[192,224]],[[193,224]],[[194,224]],[[195,224]],[[196,224]],[[197,224]],[[198,224]],[[199,224]],[[200,224]],[[201,224]],[[203,224]],[[204,224]],[[205,224]],[[206,224]],[[207,224]],[[208,224]],[[209,224]],[[210,224]],[[211,224]],[[212,224]],[[213,224]],[[214,224]],[[217,224]],[[218,224]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[225,8],0,[[8,8],225],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[225,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[182,221],0,0,[182,226],0,[182,9],[182,227],[182,228],[182,227],[182,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],[[],229],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[701,1354,3332,4234,4597,6713,6714,6715,6716,6976,6977,8820,8821,8822,8823,8874],"p":[[6,"__u16"],[6,"__u32"],[6,"__u8"],[3,"sock_filter"],[3,"cmsghdr"],[6,"c_uchar"],[3,"msghdr"],[6,"c_uint"],[6,"c_int"],[6,"size_t"],[15,"usize"],[3,"cpu_set_t"],[15,"bool"],[3,"fd_set"],[15,"u8"],[15,"u32"],[3,"sock_extended_err"],[3,"sockaddr"],[4,"DIR"],[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[4,"FILE"],[4,"fpos_t"],[4,"timezone"],[3,"in_addr"],[3,"ip_mreq"],[3,"ip_mreqn"],[3,"ip_mreq_source"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"lconv"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"in6_rtmsg"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"mmsghdr"],[3,"epoll_event"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"utsname"],[3,"sigevent"],[4,"fpos64_t"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"fsid_t"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"uinput_ff_upload"],[3,"uinput_ff_erase"],[3,"uinput_abs_setup"],[3,"dl_phdr_info"],[3,"Elf32_Ehdr"],[3,"Elf64_Ehdr"],[3,"Elf32_Sym"],[3,"Elf64_Sym"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"Elf32_Shdr"],[3,"Elf64_Shdr"],[3,"ucred"],[3,"mntent"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"inotify_event"],[3,"fanotify_response"],[3,"sockaddr_vm"],[3,"regmatch_t"],[3,"__c_anonymous_sockaddr_can_tp"],[3,"__c_anonymous_sockaddr_can_j1939"],[3,"can_filter"],[3,"j1939_filter"],[3,"sock_fprog"],[3,"seccomp_data"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nlattr"],[3,"file_clone_range"],[3,"__c_anonymous_ifru_map"],[3,"in6_ifreq"],[3,"option"],[3,"sctp_initmsg"],[3,"sctp_sndrcvinfo"],[3,"sctp_sndinfo"],[3,"sctp_rcvinfo"],[3,"sctp_nxtinfo"],[3,"sctp_prinfo"],[3,"sctp_authinfo"],[3,"sockaddr_nl"],[3,"dirent"],[3,"dirent64"],[3,"sockaddr_alg"],[3,"uinput_setup"],[3,"uinput_user_dev"],[3,"af_alg_iv"],[3,"mq_attr"],[19,"__c_anonymous_ifr_ifru"],[3,"ifreq"],[3,"hwtstamp_config"],[3,"sock_txtime"],[19,"__c_anonymous_sockaddr_can_can_addr"],[3,"sockaddr_can"],[3,"statx"],[3,"statx_timestamp"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"glob64_t"],[3,"termios"],[3,"mallinfo"],[3,"mallinfo2"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"rtentry"],[3,"timex"],[3,"ntptimeval"],[3,"regex_t"],[3,"Elf64_Chdr"],[3,"Elf32_Chdr"],[3,"seminfo"],[3,"ptrace_peeksiginfo_args"],[3,"__c_anonymous_ptrace_syscall_info_entry"],[3,"__c_anonymous_ptrace_syscall_info_exit"],[3,"__c_anonymous_ptrace_syscall_info_seccomp"],[3,"ptrace_syscall_info"],[19,"__c_anonymous_ptrace_syscall_info_data"],[3,"utmpx"],[3,"sigset_t"],[3,"sysinfo"],[3,"msqid_ds"],[3,"semid_ds"],[3,"sigaction"],[3,"statfs"],[3,"flock"],[3,"flock64"],[3,"siginfo_t"],[3,"stack_t"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"seccomp_notif_sizes"],[3,"ptrace_rseq_configuration"],[3,"user_fpregs_struct"],[3,"ucontext_t"],[3,"statvfs"],[3,"max_align_t"],[3,"clone_args"],[3,"sem_t"],[3,"termios2"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_condattr_t"],[3,"pthread_barrierattr_t"],[3,"fanotify_event_metadata"],[3,"pthread_cond_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_barrier_t"],[3,"can_frame"],[3,"canfd_frame"],[3,"open_how"],[3,"in6_addr"],[3,"Formatter"],[6,"Result"],[4,"c_void"],[3,"Error"],[4,"Result"],[8,"Hasher"],[6,"dev_t"],[6,"pid_t"],[6,"c_long"],[6,"uid_t"],[3,"TypeId"]]},\
"linux_embedded_hal":{"doc":"Implementation of <code>embedded-hal</code> traits for Linux devices","t":"DDDDDEDDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CdevPin","Delay","I2cdev","Pin","Serial","SpiOperation","Spidev","SysTimer","SysfsPin","Transfer","Write","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","delay_ms","delay_ms","delay_ms","delay_ms","delay_us","delay_us","delay_us","delay_us","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","eq","exec","exec","flush","fmt","from","from","from","from","from","from","from","from","from_path","into","into","into","into","into","into","into","into","is_high","is_high","is_low","is_low","new","new","new","new","open","open","read","read","set_high","set_high","set_low","set_low","start","transfer","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wait","write","write","write","write_read"],"q":[[0,"linux_embedded_hal"]],"d":["Cdev pin re-export Newtype around <code>gpio_cdev::LineHandle</code> …","Empty struct that provides delay functionality on top of …","Newtype around <code>i2cdev::linux::LinuxI2CDevice</code> that …","Newtype around <code>sysfs_gpio::Pin</code> that implements the …","Newtype around <code>serial_unix::TTYPort</code> that implements the …","Operation for transactional SPI trait","Newtype around <code>spidev::Spidev</code> that implements the …","A periodic timer based on <code>std::time::Instant</code>, which is a …","Sysfs pin re-export Newtype around <code>sysfs_gpio::Pin</code> that …","Write data out while reading data into the provided buffer","Write data from the provided buffer, discarding read data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","See <code>sysfs_gpio::Pin::from_path</code> for details.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new timer instance.","See <code>sysfs_gpio::Pin::new</code> for details.","See <code>gpio_cdev::Line::request</code> for details.","See <code>i2cdev::linux::LinuxI2CDevice::new</code> for details.","Wrapper for <code>serial_unix::TTYPort::open</code>","See <code>spidev::Spidev::open</code> for details.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,12,12,17,1,7,8,2,9,10,12,17,1,7,8,2,9,10,12,1,2,2,2,2,2,2,2,2,7,8,9,10,7,8,9,10,12,9,10,17,12,17,1,7,8,2,9,10,12,7,17,1,7,8,2,9,10,12,7,8,7,8,1,7,8,9,17,10,17,9,7,8,7,8,1,10,17,1,7,8,2,9,10,12,17,1,7,8,2,9,10,12,17,1,7,8,2,9,10,12,1,17,9,10,9],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[2,3]],[[2,4]],[[2,5]],[[2,6]],[[2,3]],[[2,4]],[[2,6]],[[2,5]],[7],[8],[9],[10],[7],[8],[9],[10],[[[12,[[11,[[11,[[11,[11]]]]]]]],[12,[[11,[[11,[[11,[11]]]]]]]]],13],[[9,3,[15,[14]]],16],[[10,[15,[[12,[3]]]]],16],[17,18],[[[12,[19]],20],[[16,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]],[[24,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[16,[13]]]],[8,[[16,[13]]]],[7,[[16,[13]]]],[8,[[16,[13]]]],[[],1],[4,7],[25,[[16,[8,26]]]],[[[23,[22]]],[[16,[9,27]]]],[[[23,[22]]],[[16,[17,28]]]],[[[23,[22]]],[[29,[10]]]],[17,[[18,[3]]]],[[9,3,[15,[3]]],16],[7,16],[8,16],[7,16],[8,16],[[1,30]],[[10,[15,[3]]],[[29,[[15,[3]]]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[1,[[18,[32]]]],[[17,3],18],[[9,3,[15,[3]]],16],[[10,[15,[3]]],29],[[9,3,[15,[3]],[15,[3]]],16]],"c":[],"p":[[3,"SysTimer"],[3,"Delay"],[15,"u8"],[15,"u64"],[15,"u16"],[15,"u32"],[3,"SysfsPin"],[3,"CdevPin"],[3,"I2cdev"],[3,"Spidev"],[8,"PartialEq"],[4,"SpiOperation"],[15,"bool"],[4,"Operation"],[15,"slice"],[4,"Result"],[3,"Serial"],[6,"Result"],[8,"Debug"],[3,"Formatter"],[3,"Error"],[3,"Path"],[8,"AsRef"],[6,"Result"],[3,"LineHandle"],[3,"Error"],[4,"LinuxI2CError"],[3,"Error"],[6,"Result"],[8,"Into"],[3,"TypeId"],[4,"Void"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and …","t":"OOOOO","n":["offset_of","offset_of_tuple","raw_field","raw_field_tuple","span_of"],"q":[[0,"memoffset"]],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"navigator":{"doc":"","t":"DDLLLLMLLLLLLLLLLFLLFFFFFFFFLLLLLLLLMMM","n":["ADCData","AxisData","borrow","borrow","borrow_mut","borrow_mut","channel","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from","from","init","into","into","read_accel","read_adc","read_gyro","read_mag","read_pressure","read_temp","set_led_off","set_led_on","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y","z"],"q":[[0,"navigator"]],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,2,1,2,1,2,1,2,1,1,2,2,0,1,2,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,1,1],"f":[0,0,[[]],[[]],[[]],[[]],0,[1,1],[2,2],[[]],[[]],[[1,3],4],[[2,3],4],[5,1],[[]],[6,2],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],1],[[],1],[[],7],[[],7],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0],"c":[],"p":[[3,"AxisData"],[3,"ADCData"],[3,"Formatter"],[6,"Result"],[3,"AxisData"],[3,"ADCData"],[15,"f32"],[4,"Result"],[3,"TypeId"]]},\
"navigator_rs":{"doc":"","t":"DDDDDMMLLLLLLLLLLLLLMLLLLLLLMLLLLLLMLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMMM","n":["ADCData","AxisData","Led","Navigator","SensorData","accelerometer","adc","all_off","all_on","as_mut_array","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","default","default","from","from","from","from","from","gyro","init","into","into","into","into","into","magnetometer","new","new","pressure","read_accel","read_adc","read_all","read_altitude","read_gyro","read_mag","read_pressure","read_temperature","self_test","set_led_off","set_led_on","set_pwm_freq","set_pwm_off","set_pwm_on","set_pwm_value","temperature","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","x","y","z"],"q":[[0,"navigator_rs"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,7,7,1,1,1,5,6,7,4,1,5,6,7,4,1,6,4,1,5,6,7,4,1,7,4,5,6,7,4,1,7,4,1,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,5,6,7,4,1,5,6,7,4,1,5,6,7,4,1,5,5,5],"f":[0,0,0,0,0,0,0,[1],[1],[1,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],4],[[],1],[[]],[[]],[[]],[[]],[[]],0,[4],[[]],[[]],[[]],[[]],[[]],0,[[],4],[[],1],0,[4,5],[4,6],[4,7],[4,8],[4,5],[4,5],[4,8],[4,8],[4,9],[4],[4],[4],[4],[4],[4],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0],"c":[],"p":[[3,"Led"],[3,"SysfsPin"],[15,"array"],[3,"Navigator"],[3,"AxisData"],[3,"ADCData"],[3,"SensorData"],[15,"f32"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"nb":{"doc":"Minimal and reusable non-blocking I/O layer","t":"ENGNOLLLLLLLLLLLLLLLL","n":["Error","Other","Result","WouldBlock","block","borrow","borrow_mut","clone","cmp","eq","fmt","from","from","from","hash","into","map","partial_cmp","try_from","try_into","type_id"],"q":[[0,"nb"]],"d":["A non-blocking error","A different kind of error","A non-blocking result","This operation requires blocking behavior to complete","Turns the non-blocking expression <code>$e</code> into a blocking …","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Maps an <code>Error&lt;E&gt;</code> to <code>Error&lt;T&gt;</code> by applying a function to a …","","","",""],"i":[0,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,0,0,0,0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[2,[3]],[2,[3]]],4],[[[2,[5]],[2,[5]]],6],[[[2,[7]],8],9],[[]],[10],[[],2],[[[2,[11]],12]],[[]],[[2,13],2],[[[2,[14]],[2,[14]]],[[15,[4]]]],[[],16],[[],16],[[],17]],"c":[],"p":[[8,"Clone"],[4,"Error"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"never"],[8,"Hash"],[8,"Hasher"],[8,"FnOnce"],[8,"PartialOrd"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"nix":{"doc":"Rust friendly bindings to the various *nix system …","t":"GIGOAAAAAAOOOOOOOOOOOOOKAKCAAAAAOOOOAAAAAKNNDNDNNDDNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLFLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNRSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRSNNEILNLLLLLLLLLFLLLLFLLLLLLKLLLLLLSSSSSDSSSSSSSNNNNNNNNNNNSSSSNNNNNDEDENNNNDSSSSSSSSSSSSSSSSSSSSSSSSNNNNNNESSSDSSSSDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLFFFFLLLLLLLFFLLLLLLLFLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFDDMLLLLMLLMLLLLLMLLLLFLLMLLLMLLLLLLLLDSSDSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLFFLLSDDDSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGFFFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLASSSSSSSSSSSSSSSSSSSSSSDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSSSDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLDDDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLLLLLFLLLLLLLLMMFFFFLMLLLLLLLLLLLLLLLFLMMMMSSSSSSSSSSSSSSSSSSSGDDLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLFLLLLLLLLLLLLLLFAAAAAAAAAAAAAAAAAAAAAAAAAAAANENDENNNNNNDDEENNFLLFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSSSSSSSSSDNNNDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDSSSSSSSSSSSSSSSSSSSSSSSSDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMOOOOSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDSSSDDEDSSSSSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSDSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLFLLLLLLLLLLGFFGEDNNNNNNNNNNNNNNNNNNNNSSSSSSSSSNNNNNNNNNNNNNNNNNNNELFLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLFLLLLLLLFLLLLFLFLFFFFLLLFFFLLLLFLLLLLLLLLLFDNNNNSSSSSSSSSSEEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNELLLLLLLLLLLLFFLLLLNNNNNNNNNNNNNNNNELLLLLLLLLFLLLGFLLLLRDDLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLFFNSSSSSSSNNNNNNNNNNRNNRNNNNNNNNNNNNRNNNNNNNNNNDDNNDENDNENNEEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLFFLLLFLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGLLMMMMMSSRRDCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDCFMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLENNDNNNNNNNNNNNNNDEENNNINNNNNEEDDNNNDDNNNNNNNNNDNSSSSSSSSSNDNNNNDNNNNNNNNNNNNNNNNNNNNNNDDNNNNSSNNNNNNNDNIENEDEENNNNNNNNDDNNNNNQQNNDNNNMFFLMMLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMDLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLFMMMMMMMDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLMMGLFFFFKLLFFMMMMMMMMMDDDDFDFFAMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEDFNNDNNDSSSSSSSSSSSSSSSSSSSSSSSELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLFFFFFFFFGLLLLLLLLMMMMMMMMMMMMMMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLFFRRRRRRRRRRDRRRRRRRRRRRRRRRRRDRRLLLLLLLLLLLLLLLLLLLLLLGFLLLLFLLLLLLLLDSSSSSSSSSSSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLFLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLFLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSESSSSSSSSSSSSSSSSSSDSSSSSSSSSSSSEESSSSSSSSSSSSSSSSDDRSSSSSSSSSSSSDSSSSEESSSSSNNNNNNNNNNSDNNNNNNNNNNNNNNNSSSNNSRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLKLLLLLKLLKLLLKLLKLLLLKLLLLGGLLLLLLLLLLLLLLLNNNNNEENNNSSSDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLMLLLLLLLLLLLLLLLLLLLLLLMFFFFFFFLLLLLLLLFDLLLLLLLLLLLLLLLLLLFLNNNNNNNSSSSSSDESSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFSSSSSSSSSSDLLLFFFFLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLNNNNNDNNNNNNNNNNNSENENNDDNNNNNENNNNNNNNNNNNNNNNNNNNNNNNEDNRNSNDDNNNNNNNNNNNNENNNDEDSESNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLFLMFFFLLMMLLLLLLLLLLLLLLLLLLLLLFFFFFLFFFFFLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFMFFFFFFFFFFFFFFFFMMLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLFFFFMFFFFMMLLLLMMFFFFFFMMLMMLFFFFFFFFFFFFMFLLFLFFFFLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLMLFFFMFFFF","n":["Error","NixPath","Result","cmsg_space","dir","env","errno","fcntl","features","ifaddrs","ioctl_none","ioctl_none_bad","ioctl_read","ioctl_read_bad","ioctl_read_buf","ioctl_readwrite","ioctl_readwrite_bad","ioctl_readwrite_buf","ioctl_write_buf","ioctl_write_int","ioctl_write_int_bad","ioctl_write_ptr","ioctl_write_ptr_bad","is_empty","kmod","len","libc","mount","mqueue","net","poll","pty","request_code_none","request_code_read","request_code_readwrite","request_code_write","sched","sys","time","ucontext","unistd","with_nix_path","BlockDevice","CharacterDevice","Dir","Directory","Entry","Fifo","File","Iter","OwningIter","Socket","Symlink","Type","as_raw_fd","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","file_name","file_type","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_fd","hash","hash","hash","hash","hash","ino","into","into","into","into","into","into_iter","into_iter","into_iter","iter","next","next","open","openat","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ClearEnvError","borrow","borrow_mut","clearenv","clone","clone_into","fmt","fmt","from","into","provide","to_owned","to_string","try_from","try_into","type_id","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDEADLOCK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUCLEAN","EUNATCH","EUSERS","EWOULDBLOCK","EWOULDBLOCK","EXDEV","EXFULL","Errno","ErrnoSentinel","Sys","UnknownErrno","as_errno","borrow","borrow_mut","clear","clone","clone_into","desc","eq","equivalent","errno","fmt","fmt","from","from_errno","from_i32","from_i32","into","invalid_argument","last","provide","result","sentinel","to_owned","to_string","try_from","try_from","try_into","type_id","AT_EMPTY_PATH","AT_NO_AUTOMOUNT","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AtFlags","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FD_CLOEXEC","F_ADD_SEALS","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLK","F_GETPIPE_SZ","F_GET_SEALS","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETPIPE_SZ","FallocateFlags","FcntlArg","FdFlag","FlockArg","LockExclusive","LockExclusiveNonblock","LockShared","LockSharedNonblock","OFlag","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","PosixFadviseAdvice","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","RenameFlags","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SealFlag","SpliceFFlags","Unlock","UnlockNonblock","all","all","all","all","all","all","all","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","contains","copy_file_range","difference","difference","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","extend","extend","extend","extend","extend","fallocate","fcntl","flock","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","insert","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","not","not","not","not","not","not","not","open","openat","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","posix_fadvise","posix_fallocate","readlink","readlinkat","remove","remove","remove","remove","remove","remove","remove","renameat","renameat2","set","set","set","set","set","set","set","splice","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","union","vmsplice","socket_atomic_cloexec","InterfaceAddress","InterfaceAddressIterator","address","borrow","borrow","borrow_mut","borrow_mut","broadcast","clone","clone_into","destination","drop","eq","eq","equivalent","equivalent","flags","fmt","fmt","from","from","getifaddrs","hash","hash","interface_name","into","into","into_iter","netmask","next","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DeleteModuleFlags","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","ModuleInitFlags","O_NONBLOCK","O_TRUNC","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","delete_module","difference","difference","empty","empty","eq","eq","equivalent","equivalent","extend","extend","finit_module","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","init_module","insert","insert","intersection","intersection","intersects","intersects","into","into","is_all","is_all","is_empty","is_empty","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","union","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MS_ACTIVE","MS_BIND","MS_DIRSYNC","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNCHRONOUS","MS_UNBINDABLE","MntFlags","MsFlags","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","difference","difference","empty","empty","eq","eq","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","is_all","is_all","is_empty","is_empty","mount","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_into","try_into","type_id","type_id","umount","umount2","union","union","FD_CLOEXEC","FdFlag","MQ_OFlag","MqAttr","O_CLOEXEC","O_CREAT","O_EXCL","O_NONBLOCK","O_RDONLY","O_RDWR","O_WRONLY","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","difference","difference","empty","empty","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","is_all","is_all","is_empty","is_empty","mq_attr_member_t","mq_close","mq_getattr","mq_open","mq_receive","mq_remove_nonblock","mq_send","mq_set_nonblock","mq_setattr","mq_unlink","new","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union","if_","IFF_ALLMULTI","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_NO_PI","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_UP","Interface","InterfaceFlags","Interfaces","InterfacesIter","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","difference","drop","empty","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","if_nameindex","if_nametoindex","index","insert","intersection","intersects","into","into","into","into","into_iter","into_iter","is_all","is_empty","iter","name","next","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_slice","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","PollFd","PollFlags","all","as_raw_fd","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","empty","eq","eq","equivalent","equivalent","events","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","new","not","partial_cmp","poll","ppoll","remove","revents","set","set_events","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","ForkptyResult","OpenptyResult","PtyMaster","SessionId","Winsize","as_raw_fd","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","drop","eq","eq","eq","equivalent","equivalent","equivalent","flush","fmt","fmt","fmt","fmt","fork_result","forkpty","from","from","from","from","from","grantpt","hash","hash","hash","into","into","into","into","into_raw_fd","master","master","openpty","posix_openpt","ptsname","ptsname_r","read","slave","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unlockpt","write","ws_col","ws_row","ws_xpixel","ws_ypixel","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PTRACE","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CloneCb","CloneFlags","CpuSet","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","cmp","complement","contains","count","default","difference","empty","eq","eq","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","is_set","new","not","partial_cmp","remove","sched_getaffinity","sched_setaffinity","sched_yield","set","set","setns","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","unset","unshare","aio","epoll","eventfd","inotify","ioctl","memfd","mman","personality","pthread","ptrace","quota","reboot","resource","select","sendfile","signal","signalfd","socket","stat","statfs","statvfs","sysinfo","termios","time","timerfd","uio","utsname","wait","AioAllDone","AioCancelStat","AioCanceled","AioCb","AioFsyncMode","AioNotCanceled","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LioCb","LioCbBuilder","LioMode","LioOpcode","O_DSYNC","O_SYNC","aio_cancel_all","aio_return","aio_return","aio_suspend","aiocbs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","drop","emplace_mut_slice","emplace_slice","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","error","error","fd","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_fd","from_mut_ptr","from_mut_slice","from_ptr","from_slice","fsync","hash","hash","hash","hash","into","into","into","into","into","into","into","is_empty","len","lio_opcode","listio","listio_resubmit","nbytes","offset","partial_cmp","partial_cmp","partial_cmp","priority","read","set_sigev_notify","sigevent","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","write","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EpollCreateFlags","EpollCtlAdd","EpollCtlDel","EpollCtlMod","EpollEvent","EpollFlags","EpollOp","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","data","difference","difference","empty","empty","empty","epoll_create","epoll_create1","epoll_ctl","epoll_wait","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","events","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","is_all","is_all","is_empty","is_empty","new","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EfdFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","difference","empty","eq","equivalent","eventfd","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","AddWatchFlags","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_IGNORED","IN_ISDIR","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","InitFlags","Inotify","InotifyEvent","WatchDescriptor","add_watch","all","all","as_raw_fd","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","complement","contains","contains","cookie","difference","difference","empty","empty","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_raw_fd","hash","hash","hash","init","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","is_all","is_all","is_empty","is_empty","mask","name","not","not","partial_cmp","partial_cmp","partial_cmp","read_events","remove","remove","rm_watch","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","union","wd","request_code_none","request_code_read","request_code_readwrite","request_code_write","MFD_ALLOW_SEALING","MFD_CLOEXEC","MemFdCreateFlag","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","difference","empty","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","memfd_create","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FILE","MAP_FIXED","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_STACK","MCL_CURRENT","MCL_FUTURE","MREMAP_FIXED","MREMAP_MAYMOVE","MRemapFlags","MS_ASYNC","MS_INVALIDATE","MS_SYNC","MapFlags","MlockAllFlags","MmapAdvise","MsFlags","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","ProtFlags","all","all","all","all","all","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","madvise","mlock","mlockall","mmap","mprotect","mremap","msync","munlock","munlockall","munmap","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove","remove","remove","set","set","set","set","set","shm_open","shm_unlink","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","FDPIC_FUNCPTRS","MMAP_PAGE_ZERO","Persona","READ_IMPLIES_EXEC","SHORT_INODE","STICKY_TIMEOUTS","UNAME26","WHOLE_SECONDS","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","difference","empty","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get","hash","insert","intersection","intersects","into","is_all","is_empty","not","partial_cmp","remove","set","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","Pthread","pthread_kill","pthread_self","AddressType","Event","Options","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","Request","all","attach","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","cont","contains","detach","difference","empty","eq","eq","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","getevent","getregs","getsiginfo","hash","hash","hash","insert","interrupt","intersection","intersects","into","into","into","is_all","is_empty","kill","not","partial_cmp","partial_cmp","partial_cmp","read","remove","seize","set","setoptions","setregs","setsiginfo","step","sub","sub_assign","symmetric_difference","syscall","sysemu","sysemu_step","to_owned","to_owned","to_owned","toggle","traceme","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","write","Dqblk","GRPQUOTA","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QuotaFmt","QuotaType","QuotaValidFlags","USRQUOTA","all","allocated_inodes","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","block_time_limit","blocks_hard_limit","blocks_soft_limit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","contains","default","default","difference","empty","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","hash","hash","inode_time_limit","inodes_hard_limit","inodes_soft_limit","insert","intersection","intersects","into","into","into","into","is_all","is_empty","not","occupied_space","partial_cmp","partial_cmp","partial_cmp","quotactl_get","quotactl_off","quotactl_on","quotactl_set","quotactl_sync","remove","set","set_block_time_limit","set_blocks_hard_limit","set_blocks_soft_limit","set_inode_time_limit","set_inodes_hard_limit","set_inodes_soft_limit","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","RB_AUTOBOOT","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RebootMode","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","from","hash","into","partial_cmp","reboot","set_cad_enabled","to_owned","try_from","try_into","type_id","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","Resource","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","from","getrlimit","hash","into","partial_cmp","rlim_t","setrlimit","to_owned","try_from","try_into","type_id","FD_SETSIZE","FdSet","Fds","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone_into","contains","default","eq","equivalent","fds","fmt","fmt","from","from","hash","highest","insert","into","into","into_iter","new","next","next_back","pselect","remove","select","size_hint","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","sendfile","sendfile64","Handler","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_SETMASK","SIG_UNBLOCK","SaFlags","SigAction","SigAction","SigDfl","SigEvent","SigHandler","SigIgn","SigSet","SigevNone","SigevNotify","SigevSignal","SigevThreadId","SigmaskHow","Signal","SignalIterator","add","all","all","as_ref","as_ref","as_str","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","contains","contains","difference","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_str","handler","hash","hash","hash","hash","hash","hash","hash","hash","hash","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_empty","iterator","kill","killpg","mask","new","new","next","not","partial_cmp","partial_cmp","partial_cmp","pthread_sigmask","raise","remove","remove","set","sigaction","sigevent","signal","sigprocmask","sub","sub_assign","symmetric_difference","thread_block","thread_get_mask","thread_set_mask","thread_swap_mask","thread_unblock","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of_thread_id","union","wait","si_value","si_value","signal","signal","thread_id","SFD_CLOEXEC","SFD_NONBLOCK","SIGNALFD_NEW","SIGNALFD_SIGINFO_SIZE","SfdFlags","SigSet","SignalFd","all","as_raw_fd","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","drop","empty","eq","eq","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","hash","insert","intersection","intersects","into","into","into","into_iter","is_all","is_empty","new","next","not","partial_cmp","read_signal","remove","set","set_mask","siginfo","signal","signalfd","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","with_flags","AddressFamily","Alg","Alg","AlgAddr","AlgSetAeadAssoclen","AlgSetIv","AlgSetOp","AppleTalk","Ash","AtmPvc","AtmSvc","Ax25","Bluetooth","Both","Bridge","Caif","Can","CmsgIterator","ControlMessage","ControlMessageOwned","Datagram","Decnet","Econet","GetSockOpt","Ib","Ieee802154","Inet","Inet","Inet6","InetAddr","IpAddr","IpMembershipRequest","Ipv4Addr","Ipv4PacketInfo","Ipv4PacketInfo","Ipv4RecvErr","Ipv6Addr","Ipv6MembershipRequest","Ipv6PacketInfo","Ipv6PacketInfo","Ipv6RecvErr","Ipx","Irda","Isdn","Iucv","Key","Link","LinkAddr","Llc","MSG_CMSG_CLOEXEC","MSG_CTRUNC","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_OOB","MSG_PEEK","MSG_TRUNC","MSG_WAITALL","Mpls","MsgFlags","NetBeui","NetRom","Netlink","Netlink","NetlinkAddr","NetlinkAudit","NetlinkCrypto","NetlinkDECNetRoutingMessage","NetlinkFIBLookup","NetlinkIPv6Firewall","NetlinkISCSI","NetlinkKObjectUEvent","NetlinkNetFilter","NetlinkRDMA","NetlinkRoute","NetlinkSCSITransport","NetlinkSELinux","NetlinkSockDiag","NetlinkUserSock","Nfc","Packet","Phonet","Pppox","Raw","Rdm","Rds","Read","RecvMmsgData","RecvMsg","Rose","RxRpc","RxqOvfl","RxqOvfl","SOCK_CLOEXEC","SOCK_NONBLOCK","ScmCredentials","ScmCredentials","ScmRights","ScmRights","ScmTimestamp","ScmTimestampns","Security","SendMmsgData","SeqPacket","SetSockOpt","Shutdown","Sna","SockAddr","SockFlag","SockProtocol","SockType","Stream","Tcp","Tipc","Udp","UdpGroSegments","UdpGsoSegments","Unix","Unix","UnixAddr","UnixCredentials","Unspec","V4","V4","V6","V6","Val","Val","Vsock","Vsock","VsockAddr","Wanpipe","Write","X25","_lt","accept","accept4","addr","addr","address","alg_name","alg_type","all","all","any","as_abstract","as_ffi_pair","as_mut_ptr","as_ptr","bind","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmsg_buffer","cmsg_len","cmsg_level","cmsg_type","cmsghdr","cmsgs","cmsgs","complement","complement","connect","contains","contains","default","difference","difference","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","family","family","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_i32","from_iter","from_iter","from_std","from_std","from_std","from_std","get","getpeername","getsockname","getsockopt","gid","groups","halen","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hatype","ifindex","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","iov","iov","ip","is_all","is_all","is_empty","is_empty","listen","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","new","new","new","new","new","new","new","new","new","new","new_abstract","new_alg","new_inet","new_netlink","new_unix","new_v4","new_v6","new_vsock","next","not","not","octets","partial_cmp","partial_cmp","path","path_len","pid","pid","pkttype","port","port","protocol","recv","recvfrom","recvmmsg","recvmsg","remove","remove","sa_data","sa_family","sa_family_t","segments","send","sendmmsg","sendmsg","sendto","set","set","set","setsockopt","shutdown","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sockaddr","sockaddr_in","sockaddr_in6","sockaddr_storage","sockaddr_storage_to_addr","sockaddr_un","socket","socketpair","sockopt","ss_family","sub","sub","sub_assign","sub_assign","sun_family","sun_path","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_std","to_std","to_std","to_std","to_str","to_str","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","union","union","AcceptConn","AlgSetAeadAuthSize","AlgSetKey","BindToDevice","Broadcast","Ip6tOriginalDst","IpAddMembership","IpDropMembership","IpFreebind","IpMulticastLoop","IpMulticastTtl","IpTransparent","Ipv4PacketInfo","Ipv4RecvErr","Ipv4Ttl","Ipv6AddMembership","Ipv6DropMembership","Ipv6RecvErr","Ipv6RecvPacketInfo","Ipv6Ttl","Ipv6V6Only","KeepAlive","Linger","Mark","OobInline","OriginalDst","PassCred","PeerCredentials","RcvBuf","RcvBufForce","ReceiveTimeout","ReceiveTimestamp","ReceiveTimestampns","ReuseAddr","ReusePort","RxqOvfl","SendTimeout","SndBuf","SndBufForce","SockType","SocketError","TcpCongestion","TcpKeepCount","TcpKeepIdle","TcpKeepInterval","TcpMaxSeg","TcpNoDelay","TcpRepair","TcpUserTimeout","UdpGroSegment","UdpGsoSegment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","FchmodatFlags","FileStat","FileStat","FollowSymlink","FollowSymlink","Mode","NoFollowSymlink","NoFollowSymlink","SFlag","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","UtimensatFlags","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","dev_t","difference","difference","empty","empty","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fchmod","fchmodat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","fstat","fstatat","futimens","hash","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","is_all","is_all","is_empty","is_empty","lstat","lutimes","major","makedev","minor","mkdirat","mknod","mknodat","mode_t","not","not","partial_cmp","partial_cmp","remove","remove","set","set","st_atime","st_atime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_gid","st_ino","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_rdev","st_size","st_uid","stat","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","umask","union","union","utimensat","utimes","ADFS_SUPER_MAGIC","AFFS_SUPER_MAGIC","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CODA_SUPER_MAGIC","CRAMFS_MAGIC","EFS_SUPER_MAGIC","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","FsType","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","ISOFS_SUPER_MAGIC","JFFS2_SUPER_MAGIC","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MSDOS_SUPER_MAGIC","NCP_SUPER_MAGIC","NFS_SUPER_MAGIC","OPENPROM_SUPER_MAGIC","OVERLAYFS_SUPER_MAGIC","PROC_SUPER_MAGIC","QNX4_SUPER_MAGIC","REISERFS_SUPER_MAGIC","SMB_SUPER_MAGIC","Statfs","TMPFS_MAGIC","USBDEVICE_SUPER_MAGIC","block_size","blocks","blocks_available","blocks_free","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","files","files_free","filesystem_id","filesystem_type","fmt","fmt","from","from","fsid_t","fstatfs","into","into","maximum_name_length","optimal_transfer_size","statfs","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","FsFlags","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","Statvfs","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","block_size","blocks","blocks_available","blocks_free","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","default","difference","empty","eq","eq","equivalent","equivalent","extend","files","files_available","files_free","filesystem_id","flags","fmt","fmt","fmt","fmt","fmt","fmt","fragment_size","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","fstatvfs","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","name_max","not","partial_cmp","remove","set","statvfs","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","SysInfo","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","load_average","process_count","ram_total","ram_unused","swap_free","swap_total","sysinfo","to_owned","try_from","try_into","type_id","uptime","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BRKINT","BS0","BS1","BSDLY","BaudRate","CBAUD","CBAUDEX","CIBAUD","CLOCAL","CMSPAR","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","ControlFlags","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","EXTPROC","FF0","FF1","FFDLY","FLUSHO","FlowArg","FlushArg","HUPCL","ICANON","ICRNL","IEXTEN","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INLCR","INPCK","ISIG","ISTRIP","IUTF8","IXANY","IXOFF","IXON","InputFlags","LocalFlags","NCCS","NL0","NL1","NLDLY","NOFLSH","OCRNL","OFDEL","OFILL","OLCUC","ONLCR","ONLRET","ONOCR","OPOST","OutputFlags","PARENB","PARMRK","PARODD","PENDIN","SetArg","SpecialCharacterIndices","TAB0","TAB1","TAB2","TAB3","TABDLY","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCSADRAIN","TCSAFLUSH","TCSANOW","TOSTOP","Termios","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","XTABS","_POSIX_VDISABLE","all","all","all","all","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","contains","contains","contains","contains","control_chars","control_flags","difference","difference","difference","difference","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","hash","hash","hash","input_flags","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","local_flags","not","not","not","not","output_flags","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove","remove","set","set","set","set","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","tcdrain","tcflow","tcflush","tcgetattr","tcgetsid","tcsendbreak","tcsetattr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","TimeSpec","TimeVal","TimeValLike","add","add","as_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","div","div","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from_duration","from_timespec","hash","hash","hours","into","into","microseconds","microseconds","microseconds","milliseconds","milliseconds","milliseconds","minutes","mul","mul","nanoseconds","nanoseconds","nanoseconds","neg","neg","num_hours","num_microseconds","num_microseconds","num_microseconds","num_milliseconds","num_milliseconds","num_milliseconds","num_minutes","num_nanoseconds","num_nanoseconds","num_nanoseconds","num_seconds","num_seconds","num_seconds","partial_cmp","partial_cmp","seconds","seconds","seconds","sub","sub","suseconds_t","time_t","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","tv_nsec","tv_sec","tv_sec","tv_usec","type_id","type_id","zero","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","ClockId","Expiration","Interval","IntervalDelayed","OneShot","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TimerFd","TimerFlags","TimerSetTimeFlags","all","all","as_raw_fd","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","complement","contains","contains","difference","difference","drop","empty","empty","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_raw_fd","get","hash","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","is_all","is_all","is_empty","is_empty","new","not","not","partial_cmp","partial_cmp","partial_cmp","remove","remove","set","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","union","unset","wait","IoVec","RemoteIoVec","as_slice","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_mut_slice","from_slice","hash","hash","into","into","len","pread","preadv","process_vm_readv","process_vm_writev","pwrite","pwritev","readv","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","writev","UtsName","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","machine","nodename","release","sysname","to_owned","try_from","try_into","type_id","uname","version","Continued","Exited","PtraceEvent","PtraceSyscall","Signaled","StillAlive","Stopped","WCONTINUED","WEXITED","WNOHANG","WNOWAIT","WSTOPPED","WUNTRACED","WaitPidFlag","WaitStatus","__WALL","__WCLONE","__WNOTHREAD","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","empty","eq","eq","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raw","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","not","partial_cmp","pid","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","wait","waitpid","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_THREAD_CPUTIME_ID","ClockId","as_raw","borrow","borrow_mut","clock_getcpuclockid","clock_getres","clock_gettime","clock_settime","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from","from_raw","hash","into","now","partial_cmp","pid_cpu_clock_id","res","set_time","to_owned","to_string","try_from","try_into","type_id","UContext","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","get","hash","into","set","sigmask","sigmask_mut","to_owned","try_from","try_into","type_id","AIO_LISTIO_MAX","AIO_MAX","AIO_PRIO_DELTA_MAX","ARG_MAX","ATEXIT_MAX","AccessFlags","BC_BASE_MAX","BC_DIM_MAX","BC_SCALE_MAX","BC_STRING_MAX","CHILD_MAX","CLK_TCK","COLL_WEIGHTS_MAX","Child","DELAYTIMER_MAX","EXPR_NEST_MAX","FILESIZEBITS","F_OK","FchownatFlags","FollowSymlink","ForkResult","GETGR_R_SIZE_MAX","GETPW_R_SIZE_MAX","Gid","Group","HOST_NAME_MAX","IOV_MAX","LINE_MAX","LINK_MAX","LOGIN_NAME_MAX","LinkatFlags","MAX_CANON","MAX_INPUT","MQ_OPEN_MAX","MQ_PRIO_MAX","NAME_MAX","NGROUPS_MAX","NoFollowSymlink","NoRemoveDir","NoSymlinkFollow","OPEN_MAX","PAGE_SIZE","PATH_MAX","PIPE_BUF","POSIX2_SYMLINKS","POSIX_ALLOC_SIZE_MIN","POSIX_REC_INCR_XFER_SIZE","POSIX_REC_MAX_XFER_SIZE","POSIX_REC_MIN_XFER_SIZE","POSIX_REC_XFER_ALIGN","PTHREAD_DESTRUCTOR_ITERATIONS","PTHREAD_KEYS_MAX","PTHREAD_STACK_MIN","PTHREAD_THREADS_MAX","Parent","PathconfVar","Pid","RE_DUP_MAX","ROOT","RTSIG_MAX","R_OK","RemoveDir","ResGid","ResUid","SEM_NSEMS_MAX","SEM_VALUE_MAX","SIGQUEUE_MAX","STREAM_MAX","SYMLINK_MAX","SYMLOOP_MAX","SeekCur","SeekData","SeekEnd","SeekHole","SeekSet","SymlinkFollow","SysconfVar","TIMER_MAX","TTY_NAME_MAX","TZNAME_MAX","Uid","UnlinkatFlags","User","W_OK","Whence","X_OK","_POSIX2_CHAR_TERM","_POSIX2_C_BIND","_POSIX2_C_DEV","_POSIX2_FORT_DEV","_POSIX2_FORT_RUN","_POSIX2_LOCALEDEF","_POSIX2_PBS","_POSIX2_PBS_ACCOUNTING","_POSIX2_PBS_CHECKPOINT","_POSIX2_PBS_LOCATE","_POSIX2_PBS_MESSAGE","_POSIX2_PBS_TRACK","_POSIX2_SW_DEV","_POSIX2_UPE","_POSIX2_VERSION","_POSIX_ADVISORY_INFO","_POSIX_ASYNCHRONOUS_IO","_POSIX_ASYNC_IO","_POSIX_BARRIERS","_POSIX_CHOWN_RESTRICTED","_POSIX_CLOCK_SELECTION","_POSIX_CPUTIME","_POSIX_FSYNC","_POSIX_IPV6","_POSIX_JOB_CONTROL","_POSIX_MAPPED_FILES","_POSIX_MEMLOCK","_POSIX_MEMLOCK_RANGE","_POSIX_MEMORY_PROTECTION","_POSIX_MESSAGE_PASSING","_POSIX_MONOTONIC_CLOCK","_POSIX_NO_TRUNC","_POSIX_PRIORITIZED_IO","_POSIX_PRIORITY_SCHEDULING","_POSIX_PRIO_IO","_POSIX_RAW_SOCKETS","_POSIX_READER_WRITER_LOCKS","_POSIX_REALTIME_SIGNALS","_POSIX_REGEXP","_POSIX_SAVED_IDS","_POSIX_SEMAPHORES","_POSIX_SHARED_MEMORY_OBJECTS","_POSIX_SHELL","_POSIX_SPAWN","_POSIX_SPIN_LOCKS","_POSIX_SPORADIC_SERVER","_POSIX_SS_REPL_MAX","_POSIX_SYNCHRONIZED_IO","_POSIX_SYNC_IO","_POSIX_THREADS","_POSIX_THREAD_ATTR_STACKADDR","_POSIX_THREAD_ATTR_STACKSIZE","_POSIX_THREAD_CPUTIME","_POSIX_THREAD_PRIORITY_SCHEDULING","_POSIX_THREAD_PRIO_INHERIT","_POSIX_THREAD_PRIO_PROTECT","_POSIX_THREAD_PROCESS_SHARED","_POSIX_THREAD_ROBUST_PRIO_INHERIT","_POSIX_THREAD_ROBUST_PRIO_PROTECT","_POSIX_THREAD_SAFE_FUNCTIONS","_POSIX_THREAD_SPORADIC_SERVER","_POSIX_TIMEOUTS","_POSIX_TIMERS","_POSIX_TRACE","_POSIX_TRACE_EVENT_FILTER","_POSIX_TRACE_EVENT_NAME_MAX","_POSIX_TRACE_INHERIT","_POSIX_TRACE_LOG","_POSIX_TRACE_NAME_MAX","_POSIX_TRACE_SYS_MAX","_POSIX_TRACE_USER_EVENT_MAX","_POSIX_TYPED_MEMORY_OBJECTS","_POSIX_V6_ILP32_OFF32","_POSIX_V6_ILP32_OFFBIG","_POSIX_V6_LP64_OFF64","_POSIX_V6_LPBIG_OFFBIG","_POSIX_VDISABLE","_POSIX_VERSION","_XOPEN_CRYPT","_XOPEN_ENH_I18N","_XOPEN_LEGACY","_XOPEN_REALTIME","_XOPEN_REALTIME_THREADS","_XOPEN_SHM","_XOPEN_STREAMS","_XOPEN_UNIX","_XOPEN_VERSION","access","acct","alarm","all","as_raw","as_raw","as_raw","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chdir","chown","chroot","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","cmp","cmp","complement","contains","current","current","daemon","difference","dir","dup","dup2","dup3","effective","effective","effective","effective","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","execv","execve","execveat","execvp","execvpe","extend","fchdir","fchown","fchownat","fdatasync","fexecve","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fpathconf","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_gid","from_iter","from_name","from_name","from_raw","from_raw","from_raw","from_uid","fsync","ftruncate","gecos","getcwd","getegid","geteuid","getgid","getgrouplist","getgroups","gethostname","getpgid","getpgrp","getpid","getppid","getresgid","getresuid","getsid","gettid","getuid","gid","gid","hash","hash","hash","hash","hash","hash","initgroups","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_child","is_empty","is_parent","is_root","isatty","linkat","lseek","lseek64","mem","mkdir","mkfifo","mkfifoat","mkstemp","name","name","not","parent","partial_cmp","partial_cmp","passwd","passwd","pathconf","pause","pipe","pipe2","pivot_root","read","real","real","remove","saved","saved","set","setegid","seteuid","setfsgid","setfsuid","setgid","setgroups","sethostname","setpgid","setresgid","setresuid","setsid","setuid","shell","sleep","sub","sub_assign","symlinkat","symmetric_difference","sync","sysconf","tcgetpgrp","tcsetpgrp","this","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","toggle","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","union","unlink","unlinkat","write","child","disable","enable","cancel","set"],"q":[[0,"nix"],[42,"nix::dir"],[131,"nix::env"],[147,"nix::errno"],[316,"nix::fcntl"],[807,"nix::features"],[808,"nix::ifaddrs"],[845,"nix::kmod"],[954,"nix::mount"],[1091,"nix::mqueue"],[1228,"nix::net"],[1229,"nix::net::if_"],[1339,"nix::poll"],[1422,"nix::pty"],[1499,"nix::sched"],[1597,"nix::sys"],[1625,"nix::sys::aio"],[1760,"nix::sys::epoll"],[1919,"nix::sys::eventfd"],[1974,"nix::sys::inotify"],[2148,"nix::sys::ioctl"],[2152,"nix::sys::memfd"],[2206,"nix::sys::mman"],[2548,"nix::sys::personality"],[2612,"nix::sys::pthread"],[2615,"nix::sys::ptrace"],[2768,"nix::sys::quota"],[2904,"nix::sys::reboot"],[2928,"nix::sys::resource"],[2964,"nix::sys::select"],[3003,"nix::sys::sendfile"],[3005,"nix::sys::signal"],[3269,"nix::sys::signal::SigevNotify"],[3274,"nix::sys::signalfd"],[3387,"nix::sys::socket"],[4169,"nix::sys::socket::sockopt"],[5017,"nix::sys::stat"],[5221,"nix::sys::statfs"],[5289,"nix::sys::statvfs"],[5381,"nix::sys::sysinfo"],[5404,"nix::sys::termios"],[5863,"nix::sys::time"],[5956,"nix::sys::timerfd"],[6117,"nix::sys::uio"],[6160,"nix::sys::utsname"],[6181,"nix::sys::wait"],[6267,"nix::time"],[6307,"nix::ucontext"],[6326,"nix::unistd"],[6851,"nix::unistd::ForkResult"],[6852,"nix::unistd::acct"],[6854,"nix::unistd::alarm"]],"d":["Nix’s main error type.","Common trait used to represent file system paths by many …","Nix Result Type","Create a buffer large enough for storing some control …","","Environment variables","","","Feature tests for OS functionality","Query network interface addresses","Generates a wrapper function for an ioctl that passes no …","Generates a wrapper function for a “bad” ioctl that …","Generates a wrapper function for an ioctl that reads data …","Generates a wrapper function for a “bad” ioctl that …","Generates a wrapper function for an ioctl that reads an …","Generates a wrapper function for an ioctl that reads and …","Generates a wrapper function for a “bad” ioctl that …","Generates a wrapper function for an ioctl that reads and …","Generates a wrapper function for an ioctl that writes an …","Generates a wrapper function for a ioctl that writes an …","Generates a wrapper function for a “bad” ioctl that …","Generates a wrapper function for an ioctl that writes data …","Generates a wrapper function for a “bad” ioctl that …","Is the path empty?","Load and unload kernel modules.","Length of the path in bytes","","Mount file systems","Posix Message Queue functions","Functionality involving network interfaces","Wait for events to trigger on specific file descriptors","Create master and slave virtual pseudo-terminals (PTYs)","Generate an ioctl request code for a command that passes …","Generate an ioctl request code for a command that reads.","Generate an ioctl request code for a command that reads …","Generate an ioctl request code for a command that writes.","Execution scheduling","Mostly platform-specific functionality","","","Safe wrappers around functions found in libc “unistd.h”…","Execute a function with this path as a <code>CStr</code>.","","","An open directory.","","A directory entry, similar to <code>std::fs::DirEntry</code>.","","","","The return type of Dir::into_iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the bare file name of this directory entry without …","Returns the type of this directory entry, if known.","","","","","","Returns the argument unchanged.","Converts from a descriptor-based object, closing the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts from a file descriptor, closing it on success or …","","","","","","Returns the inode number (<code>d_ino</code>) of the underlying <code>dirent</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a owning iterator, that is, one that takes …","","","Returns an iterator of <code>Result&lt;Entry&gt;</code> which rewinds when …","","","Opens the given path as with <code>fcntl::open</code>.","Opens the given path as with <code>fcntl::openat</code>.","","","","","","","","","","","","","","","","","","Indicates that <code>clearenv</code> failed for some unknown reason","","","Clear the environment of all name-value pairs.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The sentinel value indicates that a function failed and …","Backwards compatibility hack for Nix &lt;= 0.21.0 users","","Convert this <code>Error</code> to an <code>Errno</code>.","","","","","","","","","Returns the platform-specific value of errno","","","Returns the argument unchanged.","Create a nix Error from a given errno","","","Calls <code>U::from(self)</code>.","Create a new invalid argument error (<code>EINVAL</code>)","","","Returns <code>Ok(value)</code> if it does not contain the sentinel …","","","","","","","","","","","","","","Removes byte range from a file without leaving a hole.","Increases file space by inserting a hole within the file …","File size is not changed.","Deallocates space by creating a hole.","Shared file data extants are made private to the file.","Zeroes space in specified byte range.","The file descriptor will automatically be closed during a …","","","","","","","","","","","","The size of the file cannot be increased.","Prevents further calls to <code>fcntl()</code> with <code>F_ADD_SEALS</code>.","The file cannot be reduced in size.","The file contents cannot be modified.","","","","","","Mode argument flags for fallocate determining operation …","","Additional configuration flags for <code>fcntl</code>’s <code>F_SETFD</code>.","","","","","","Configuration options for opened files.","Mask for the access mode of the file.","Open the file in append-only mode.","Generate a signal when input or output becomes possible.","Closes the file descriptor once an <code>execve</code> call is made.","Create the file if it does not exist.","Try to minimize cache effects of the I/O for this file.","If the specified path isn’t a directory, fail.","Implicitly follow each <code>write()</code> with an <code>fdatasync()</code>.","Error out if a file was not created.","Same as <code>O_SYNC</code>.","Allow files whose sizes can’t be represented in an <code>off_t</code> …","Same as <code>O_NONBLOCK</code>.","Do not update the file last access time during <code>read(2)</code>s.","Don’t attach the device as the process’ controlling …","<code>open()</code> will fail if the given path is a symbolic link.","When possible, open the file in nonblocking mode.","Obtain a file descriptor for low-level access.","Only allow reading.","Allow both reading and writing.","Similar to <code>O_DSYNC</code> but applies to <code>read</code>s instead.","Implicitly follow each <code>write()</code> with an <code>fsync()</code>.","Create an unnamed temporary file.","Truncate an existing regular file to 0 length if it allows …","Only allow writing.","","","","","","","","","","","","Gift the user pages to the kernel.","Hint that more data will be coming in a subsequent splice.","Request that pages be moved instead of copied.","Do not block on I/O.","Additional flags for file sealing, which allows for …","Additional flags to <code>splice</code> and friends.","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Copy a range of data from one file to another","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manipulates file space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Check if the OS supports atomic close-on-exec for sockets","Describes a single address for an interface as returned by …","Holds the results of <code>getifaddrs</code>.","Network address of this interface","","","","","Broadcast address of this interface, if applicable","","","Point-to-point destination address","","","","","","Flags as from <code>SIOCGIFFLAGS</code> ioctl","","","Returns the argument unchanged.","Returns the argument unchanged.","Get interface addresses using libc’s <code>getifaddrs</code>","","","Name of the network interface","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Netmask of this interface","","","","","","","","","Flags used by <code>delete_module</code>.","Ignore symbol version hashes.","Ignore kernel version magic.","Flags used by the <code>finit_module</code> function.","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Unloads the kernel module with the given name.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","Loads a kernel module from a given file descriptor.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","Loads a kernel module from a buffer.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","Linux 2.4.0 - Bind directory at different place","Directory modifications are synchronous","","","","Allow mandatory locks on a FS","","","","Do not update access times","Disallow access to device special files","Do not update directory access times","Disallow program execution","Ignore suid and sgid bits","","","","Mount read-only","","","Alter flags of a mounted FS","","","","","","Writes are synced at once","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Close a message queue","Get message queue attributes","Open a message queue","Receive a message from a message queue","Convenience function. Removes <code>O_NONBLOCK</code> attribute for a …","Send a message to a message queue","Convenience function. Sets the <code>O_NONBLOCK</code> attribute for a …","Set the attributes of the message queue. Only <code>O_NONBLOCK</code> …","Remove a message queue","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Network interface name resolution.","Receive all multicast packets. (see <code>netdevice(7)</code>)","Auto media selection active. (see <code>netdevice(7)</code>)","Valid broadcast address set. (see <code>netdevice(7)</code>)","Internal debugging flag. (see <code>netdevice(7)</code>)","Driver signals dormant. Volatile.","The addresses are lost when the interface goes down. (see …","Echo sent packets. Volatile.","Interface is a loopback interface. (see <code>netdevice(7)</code>)","Driver signals L1 up. Volatile.","Master of a load balancing bundle. (see <code>netdevice(7)</code>)","Supports multicast. (see <code>netdevice(7)</code>)","No arp protocol, L2 destination address not set. (see …","Avoid use of trailers. (see <code>netdevice(7)</code>)","Do not provide packet information","Interface is a point-to-point link. (see <code>netdevice(7)</code>)","Is able to select media type via ifmap. (see <code>netdevice(7)</code>)","Interface is in promiscuous mode. (see <code>netdevice(7)</code>)","Resources allocated. (see <code>netdevice(7)</code>)","Slave of a load balancing bundle. (see <code>netdevice(7)</code>)","TAP device","TUN device (no Ethernet headers)","Interface is running. (see <code>netdevice(7)</code>)","A network interface. Has a name like “eth0” or “…","Standard interface flags, used by <code>getifaddrs</code>","A list of the network interfaces available on this system. …","An iterator over the interfaces in an <code>Interfaces</code>.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Retrieve a list of the network interfaces available on the …","Resolve an interface into a interface number.","Obtain the index of this interface.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iterate over the interfaces in this list.","Obtain the name of this interface.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Convert this to a slice of interfaces. Note that the …","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Error condition (only returned in <code>PollFd::revents</code>; ignored …","Hang up (only returned in <code>PollFd::revents</code>; ignored in …","There is data to read.","Invalid request: <code>fd</code> not open (only returned in …","Writing is now possible, though a write larger that the …","There is some exceptional condition on the file descriptor.","Priority band data can be read (generally unused on Linux).","Equivalent to <code>POLLIN</code>","Priority data may be written.","Equivalent to <code>POLLOUT</code>","This is a wrapper around <code>libc::pollfd</code>.","These flags define the different events that can be …","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","The events of interest for this <code>PollFd</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Creates a new <code>PollFd</code> specifying the events of interest for …","Returns the complement of this set of flags.","","<code>poll</code> waits for one of a set of file descriptors to become …","<code>ppoll()</code> allows an application to safely wait until either …","Removes the specified flags in-place.","Returns the events that occured in the last call to <code>poll</code> …","Inserts or removes the specified flags depending on the …","Modify the events of interest for this <code>PollFd</code>.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Representation of a master with a forked pty","Representation of a master/slave pty pair","Representation of the Master device in a master/slave pty …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata about forked process","Create a new pseudoterminal, returning the master file …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Grant access to a slave pseudoterminal (see <code>grantpt(3)</code>)","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The master port in a virtual pty pair","The master port in a virtual pty pair","Create a new pseudoterminal, returning the slave and …","Open a pseudoterminal device (see <code>posix_openpt(3)</code>)","Get the name of the slave pseudoterminal (see <code>ptsname(3)</code>)","Get the name of the slave pseudoterminal (see <code>ptsname(3)</code>)","","The slave port in a virtual pty pair","","","","","","","","","","","","","","","","Unlock a pseudoterminal master/slave pseudoterminal pair …","","","","","","Unused since Linux 2.6.2","The calling process and the child process share the same …","The caller and the child process share the same  filesystem","The new process shares an I/O context with the calling …","Create the process in a new cgroup namespace.","Create the process in a new IPC namespace.","Create the process in a new network namespace.","The cloned child is started in a new mount namespace.","Create the process in a new PID namespace.","Create the process in a new user namespace.","Create the process in a new UTS namespace.","The parent of the new child  (as returned by getppid(2)) …","If the calling process is being traced, then trace the …","The calling process and the child process share the same …","The child and the calling process share a single list of …","The child is placed in the same thread group as the calling","A tracing process cannot force <code>CLONE_PTRACE</code> on this child …","The execution of the calling process is suspended until the","The calling process and the child process run in the same …","Type for the function executed by <code>clone</code>.","Options for use with <code>clone</code>","CpuSet represent a bit-mask of CPUs. CpuSets are used by …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","<code>clone</code> create a child process (<code>clone(2)</code>)","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Return the maximum number of CPU in CpuSet","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Test to see if a CPU is in the CpuSet. <code>field</code> is the CPU id …","Create a new and empty CpuSet.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","<code>sched_getaffinity</code> get a thread’s CPU affinity mask (…","<code>sched_setaffinity</code> set a thread’s CPU affinity mask (…","Explicitly yield the processor to other threads.","Inserts or removes the specified flags depending on the …","Add a CPU to CpuSet. <code>field</code> is the CPU id to add","reassociate thread with a namespace","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Remove a CPU from CpuSet. <code>field</code> is the CPU id to remove","disassociate parts of the process execution context","POSIX Asynchronous I/O","","","Monitoring API for filesystem events.","Provide helpers for making ioctl system calls.","Interfaces for managing memory-backed files.","Memory management declarations.","","Low level threading primitives","","Set and configure disk quotas for users, groups, or …","Reboot/shutdown or enable/disable Ctrl-Alt-Delete.","Configure the process resource limits.","Portably monitor a group of file descriptors for readiness.","Send data from a file to a socket, bypassing userland.","Operating system signals.","Interface for the <code>signalfd</code> syscall.","Socket interface functions","","Get filesystem statistics, non-portably","Get filesystem statistics","","An interface for controlling asynchronous communication …","","Timer API via file descriptors.","Vectored I/O","Get system identification","Wait for a process to change status","All of the requests have already finished","Return values for <code>AioCb::cancel</code> and <code>aio_cancel_all</code>","All outstanding requests were canceled","AIO Control Block.","Mode for <code>AioCb::fsync</code>.  Controls whether only data or both …","Some requests were not canceled.  Their status should be …","No operation","Requests that <code>lio_listio</code> return immediately","Write data as if by a call to <code>AioCb::read</code>","Requests that <code>lio_listio</code> block until all requested …","Write data as if by a call to <code>AioCb::write</code>","LIO Control Block.","Used to construct <code>LioCb</code>","Mode for <code>lio_listio</code>","When used with <code>lio_listio</code>, determines whether a given <code>aiocb</code>…","on supported operating systems only, do it like <code>fdatasync</code>","do it like <code>fsync</code>","Cancels outstanding AIO requests for a given file …","Retrieve return status of an asynchronous operation.","Collect final status for an individual <code>AioCb</code> submitted as …","Suspends the calling process until at least one of the …","A collection of <code>AioCb</code>s.","","","","","","","","","","","","","","","Cancels an outstanding AIO request.","","","","","","","","","","","","If the <code>AioCb</code> has no remaining state in the kernel, just …","Add a new operation on a mutable slice to the <code>LioCb</code> under …","Add a new operation on an immutable slice to the <code>LioCb</code> …","","","","","","","","","Retrieve error status of an asynchronous operation.","Retrieve error status of an individual <code>AioCb</code> submitted as …","Returns the underlying file descriptor associated with the …","Finalize this <code>LioCb</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new <code>AioCb</code> with no associated buffer.","Constructs a new <code>AioCb</code> from a mutable raw pointer","Constructs a new <code>AioCb</code> from a mutable slice.","Constructs a new <code>AioCb</code> from a raw pointer.","Like <code>AioCb::from_mut_slice</code>, but works on constant slices …","An asynchronous version of <code>fsync(2)</code>.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Are no <code>AioCb</code>s contained?","Return the number of individual <code>AioCb</code>s contained.","Returns the <code>aiocb</code>’s <code>LioOpcode</code> field","Submits multiple asynchronous I/O requests with a single …","Resubmits any incomplete operations with <code>lio_listio</code>.","Returns the requested length of the aio operation in bytes","Returns the file offset stored in the <code>AioCb</code>","","","","Returns the priority of the <code>AioCb</code>","Asynchronously reads from a file descriptor into a buffer","Update the notification settings for an existing <code>aiocb</code>","Returns the <code>SigEvent</code> stored in the <code>AioCb</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize an empty <code>LioCb</code>","Asynchronously writes from a buffer to a file descriptor","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Configuration options for <code>inotify_add_watch</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Configuration options for <code>inotify_init1</code>.","An inotify instance. This is also a file descriptor, you …","A single inotify event.","This object is returned when you create a new watch on an …","Adds a new watch on the target file or directory.","Returns the set containing all flags.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","This cookie is a number that allows you to connect related …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","Initialize a new inotify instance.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Event mask. This field is a bitfield describing the exact …","Filename. This field exists only if the event was …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","Reads a collection of events from the inotify file …","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes an existing watch using the watch descriptor …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Watch descriptor. This field corresponds to the watch …","Generate an ioctl request code for a command that passes …","Generate an ioctl request code for a command that reads.","Generate an ioctl request code for a command that reads …","Generate an ioctl request code for a command that writes.","Allow sealing operations on this file.","Set the close-on-exec (<code>FD_CLOEXEC</code>) flag on the new file …","Options that change the behavior of <code>memfd_create</code>.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Creates an anonymous file that lives in memory, and return …","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Undo the effect of an earlier <code>MADV_DONTDUMP</code>.","Undo the effect of <code>MADV_DONTFORK</code>.","Exclude the given range from a core dump.","Do not make pages in this range available to the child …","Do not expect access in the near future.","Specify that the application no longer needs the pages in …","Enable Transparent Huge Pages (THP) for pages in the given …","Poison the given pages.","Enable Kernel Samepage Merging (KSM) for the given pages.","Undo the effect of <code>MADV_HUGEPAGE</code>.","No further special treatment. This is the default.","Expect random page references.","Free up a given range of pages and its associated backing …","Expect sequential page references.","Preserve the memory of each page but offline the original …","Undo the effect of <code>MADV_MERGEABLE</code>","Expect access in the near future.","Put the mapping into the first 2GB of the process address …","Synonym for <code>MAP_ANONYMOUS</code>.","The mapping is not backed by any file.","Compatibility flag. Ignored.","Compatibility flag. Ignored.","Compatibility flag. Ignored.","Place the mapping at exactly the address specified in <code>addr</code>.","Used for stacks; indicates to the kernel that the mapping …","Allocate the mapping using “huge pages.”","Make use of 16GB huge page (must be supported by the …","Make use of 16MB huge page (must be supported by the …","Make use of 1GB huge page (must be supported by the system)","Make use of 1MB huge page (must be supported by the system)","Make use of 256MB huge page (must be supported by the …","Make use of 2GB huge page (must be supported by the system)","Make use of 2MB huge page (must be supported by the system)","Make use of 32MB huge page (must be supported by the …","Make use of 512KB huge page (must be supported by the …","Make use of 512MB huge page (must be supported by the …","Make use of 64KB huge page (must be supported by the …","Make use of 8MB huge page (must be supported by the system)","Mark the mmaped region to be locked in the same way as …","Only meaningful when used with <code>MAP_POPULATE</code>. Don’t …","Do not reserve swap space for this mapping.","Populate page tables for a mapping.","Create a private copy-on-write mapping. Mutually exclusive …","Share this mapping. Mutually exclusive with <code>MAP_PRIVATE</code>.","Region grows down, like a stack.","Lock pages that are currently mapped into the address …","Lock pages which will become mapped into the address space …","Place the mapping at exactly the address specified in …","Permit the kernel to relocate the mapping to a new virtual …","Options for <code>mremap</code>.","Schedule an update but return immediately.","Invalidate all cached data.","Perform an update and wait for it to complete.","Additional parameters for <code>mmap</code>.","Flags for <code>mlockall</code>.","Usage information for a range of memory to allow for …","Configuration flags for <code>msync</code>.","Pages can be executed","Apply protection up to the end of a mapping that grows …","Apply protection down to the beginning of a mapping that …","Pages cannot be accessed.","Pages can be read.","Pages can be written.","Desired memory protection of a memory mapping.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","give advice about use of memory","Locks all memory pages that contain part of the address …","Locks all memory pages mapped into this process’ address …","allocate memory, or map files or devices into memory","Set protection of memory mapping.","Expands (or shrinks) an existing memory mapping, …","synchronize a mapped region","Unlocks all memory pages that contain part of the address …","Unlocks all memory pages mapped into this process’ …","remove a mapping","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Creates and opens a new, or opens an existing, POSIX …","Performs the converse of <code>shm_open</code>, removing an object …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","Flags used and returned by <code>get()</code> and <code>set()</code>.","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Retrieve the current process personality.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Set the current process personality.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Identifies an individual thread.","Send a signal to a thread (see <code>pthread_kill(3)</code>).","Obtain ID of the calling thread (see <code>pthread_self(3)</code>","","Using the ptrace options the tracer can configure the …","Ptrace options used in conjunction with the …","","","","Event that stops before a return from clone.","Event that stops before a return from execve.","Event for a stop before an exit. Unlike the waitpid Exit …","Event that stops before a return from fork or clone.","Stop triggered by a seccomp rule on a tracee.","Stop triggered by the <code>INTERRUPT</code> syscall, or a group stop, …","Event that stops before a return from vfork or clone.","Event for a return from vfork.","","","","","","","","","","Send a SIGKILL to the tracee if the tracer exits.  This is …","Stop tracee at next clone call and trace the cloned …","Stop tracee at next execve call.","Stop tracee at next exit call. Stops before exit commences …","Stop tracee at next fork and start tracing the forked …","Stop tracee when a SECCOMP_RET_TRACE rule is triggered. …","When delivering system call traps set a bit to allow …","Stop tracee at next vfork call and trace the vforked …","Stop tracee at vfork completion.","","","","","","","","","","","","","","","","","","","","Ptrace Request enum defining the action to be taken.","Returns the set containing all flags.","Attach to a running process, as with …","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Restart the stopped tracee process, as with …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Detaches the current running process, as with …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Gets a ptrace event as described by …","Get user registers, as with <code>ptrace(PTRACE_GETREGS, ...)</code>","Get siginfo as with <code>ptrace(PTRACE_GETSIGINFO,...)</code>","","","","Inserts the specified flags in-place.","Stop a tracee, as with <code>ptrace(PTRACE_INTERRUPT, ...)</code>","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Issues a kill request as with <code>ptrace(PTRACE_KILL, ...)</code>","Returns the complement of this set of flags.","","","","Reads a word from a processes memory at the given address","Removes the specified flags in-place.","Attach to a running process, as with …","Inserts or removes the specified flags depending on the …","Set options, as with <code>ptrace(PTRACE_SETOPTIONS,...)</code>.","Set user registers, as with <code>ptrace(PTRACE_SETREGS, ...)</code>","Set siginfo as with <code>ptrace(PTRACE_SETSIGINFO,...)</code>","Move the stopped tracee process forward by a single step …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Continue execution until the next syscall, as with …","Continue execution until the next syscall, as with …","Move the stopped tracee process forward by a single step …","","","","Toggles the specified flags in-place.","Sets the process as traceable, as with …","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Writes a word into the processes memory at the given …","Wrapper type for <code>if_dqblk</code>","Specify a group quota","Use the original quota format.","Use the standard VFS v0 quota format.","Use the VFS v1 quota format.","All fields.","The block hard &amp; soft limit fields.","The disk use time limit field.","The inode hard &amp; soft limit fields.","The current inodes field.","The file quote time limit field.","All block &amp; inode limits.","The current space field.","The time limit fields.","The space &amp; inodes usage fields.","The type of quota format to use.","The scope of the quota.","Indicates the quota fields that are valid to read from.","Specify a user quota","Returns the set containing all flags.","Current number of allocated inodes.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Time limit for excessive disk use.","The absolute limit on disk quota blocks allocated.","Preferred limit on disk quota blocks","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","Time limit for excessive files.","Maximum number of allocated inodes.","Preferred inode limit","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","Current occupied space (bytes).","","","","Get disk quota limits and current usage for the given …","Disable disk quotas for a block device.","Turn on disk quotas for a block device.","Configure quota values for the specified fields for a …","Update the on-disk copy of quota usages for a filesystem.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Set the time limit for excessive disk use.","Set the absolute limit on disk quota blocks allocated.","Set the preferred limit on disk quota blocks allocated.","Set the time limit for excessive files.","Set the maximum number of allocated inodes.","Set the preferred limit of allocated inodes.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","How exactly should the system be rebooted.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Enable or disable the reboot keystroke (Ctrl-Alt-Delete).","","","","","The maximum amount (in bytes) of virtual memory the …","The largest size (in bytes) core(5) file that may be …","The maximum amount of cpu time (in seconds) to be used by …","The maximum size (in bytes) of the data segment for a …","The largest size (in bytes) file that may be created.","A limit on the combined number of flock locks and fcntl …","The maximum size (in bytes) which a process may lock into …","A limit on the number of bytes that can be allocated for …","A ceiling to which the process’s nice value can be …","The maximum number of open files for this process.","The maximum number of simultaneous processes for this user …","When there is memory pressure and swap is available, …","A ceiling on the real-time priority that may be set for …","A limit (in microseconds) on the amount of CPU time that a …","A limit on the number of signals that may be queued for …","The maximum size (in bytes) of the stack segment for a …","The Resource enum is platform dependent. Check different …","","","","","","","","","Returns the argument unchanged.","Get the current processes resource limits","","Calls <code>U::from(self)</code>.","","","Set the current processes resource limits","","","","","","Contains a set of file descriptors used by <code>select</code>","Iterator over <code>FdSet</code>.","","","","","Remove all file descriptors from this <code>FdSet</code>.","","","Test an <code>FdSet</code> for the presence of a certain file …","","","","Returns an iterator over the file descriptors in the set.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Finds the highest file descriptor in the set.","Add a file descriptor to an <code>FdSet</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create an empty <code>FdSet</code>","","","Monitors file descriptors for readiness with an altered …","Remove a file descriptor from an <code>FdSet</code>","Monitors file descriptors for readiness","","","","","","","","","Copy up to <code>count</code> bytes to <code>out_fd</code> from <code>in_fd</code> starting at …","Copy up to <code>count</code> bytes to <code>out_fd</code> from <code>in_fd</code> starting at …","Use the given signal-catching function, which takes in the …","When catching a <code>Signal::SIGCHLD</code> signal, the signal will be …","When catching a <code>Signal::SIGCHLD</code> signal, the system will not","Further occurrences of the delivered signal are not masked …","The system will deliver the signal to the process on a …","The handler is reset back to the default at the moment the …","Requests that certain system calls restart if interrupted …","This flag is controlled internally by Nix.","Abort","Alarm clock","Bus error","To parent on child stop or exit","Continue a stopped process","Floating point exception","Hangup","Illegal instruction (not reset when caught)","Interrupt","Input/output possible signal","Alias for <code>SIGABRT</code>","Kill (cannot be caught or ignored)","Write on a pipe with no one to read it","Alias for <code>SIGIO</code>","Profiling time alarm","Power failure imminent.","Quit","Segmentation violation","Stack fault (obsolete)","Sendable stop signal not from tty","Bad system call","Software termination signal from kill","Trace trap (not reset when caught)","Stop signal from tty","To readers pgrp upon background tty read","Like TTIN if (tp-&gt;t_local&amp;LTOSTOP)","Alias for <code>SIGSYS</code>","Urgent condition on IO channel","User defined signal 1","User defined signal 2","Virtual time alarm","Window size changes","Exceeded CPU time limit","Exceeded file size limit","The new mask is the union of the current mask and the …","The current mask is replaced by the specified set.","The new mask is the intersection of the current mask and …","Controls the behavior of a <code>SigAction</code>","Action to take on receipt of a signal. Corresponds to …","Use the given signal-catching function, which takes in the …","Default signal handling.","Used to request asynchronous notification of the …","A signal handler.","Request that the signal be ignored.","Specifies a set of <code>Signal</code>s that may be blocked, waited …","No notification will be delivered","Specifies the notification method used by a <code>SigEvent</code>","Notify by delivering a signal to the process.","Notify by delivering a signal to a thread.","Specifies how certain functions should manipulate a signal …","Types of operating system signals","Iterate through all signals defined by this operating …","Add the specified signal to the set.","Returns the set containing all flags.","Initialize to include all signals.","","","Returns name of signal.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","Remove all signals from this set.","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Return whether this set includes the specified signal.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Initialize to include nothing.","","","","","","","","","","","","","","","","","","","","Merge all of <code>other</code>’s signals into this set.","Returns the flags set on the action.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Returns the action’s handler.","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iterate through all signals defined by this OS","Send a signal to a process","Send a signal to a process group","Returns the set of signals that are blocked during …","Creates a new action.","<strong>Note:</strong> this constructor does not allow the user to set the …","","Returns the complement of this set of flags.","","","","Manages the signal mask (set of blocked signals) for the …","Send a signal to the current thread","Removes the specified flags in-place.","Remove the specified signal from this set.","Inserts or removes the specified flags depending on the …","Changes the action taken by a process on receipt of a …","Return a copy of the inner structure","Signal management (see signal(3p))","Examine and change blocked signals.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Adds the set of signals to the signal mask for the calling …","Gets the currently blocked (masked) set of signals for the …","Sets the set of signals as the signal mask for the calling …","Sets the set of signals as the signal mask, and returns …","Removes the set of signals from the signal mask for the …","","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Identifies a thread for <code>SigevNotify::SigevThreadId</code>","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Suspends execution of the calling thread until one of the …","Will be present in the <code>si_value</code> field of the …","Will be present in the <code>si_value</code> field of the …","Signal to deliver","Signal to send","LWP ID of the thread to notify","","","","","","","A helper struct for creating, reading and closing a …","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","","Creates a new file descriptor for reading signals.","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","These constants specify the protocol family to be used in …","Interface to kernel crypto API","","","Set the length of associated authentication data (AAD) …","Set IV for <code>AF_ALG</code> crypto API.","Set crypto operation for <code>AF_ALG</code> crypto API. It may be one …","AppleTalk","","Access to raw ATM PVCs","","Amateur radio AX.25 protocol","","Further receptions and transmissions will be disallowed.","","","","","A type-safe zero-copy wrapper around a single control …","A type-safe wrapper around a single control message, as …","Supports datagrams (connectionless, unreliable messages of …","","","Represents a socket option that can be retrieved.","","","IPv4 Internet protocols (see <code>ip(7)</code>)","","IPv6 Internet protocols (see <code>ipv6(7)</code>)","","","Request for multicast socket operations","","","Configure the sending addressing and interface for v4","Socket error queue control messages read with the …","","Request for ipv6 multicast socket operations","","Configure the sending addressing and interface for v6","Socket error queue control messages read with the …","IPX - Novell protocols","","","","","Datalink address (MAC)","Hardware Address","","Set the <code>close-on-exec</code> flag for the file descriptor …","Receive flags: Control Data was discarded (buffer too …","Enables nonblocking operation; if the operation would …","Terminates a record (when this notion is supported, as for …","This flag specifies that queued errors should be received …","Sends or requests out-of-band data on sockets that support …","Peeks at an incoming message. The data is treated as …","For raw (<code>Packet</code>), Internet datagram (since Linux …","Receive operation blocks until the full amount of data can …","","Flags for send/recv and their relatives","","","Kernel user interface device (see <code>netlink(7)</code>)","","","Auditing (ref)","Netlink interface to request information about ciphers …","DECnet routing messages (ref)","Access to FIB lookup from user space (ref)","Transport IPv6 packets from netfilter to user space.  Used …","Open-iSCSI (ref)","Kernel messages to user space (ref)","Netfilter subsystem (ref)","Infiniband RDMA (ref)","Receives routing and link updates and may be used to …","SCSI Transports (ref)","SELinux event notifications. (ref)","Query information about sockets of various protocol …","Reserved for user-mode socket protocols (ref)","","Low level packet interface (see <code>packet(7)</code>)","","","Provides raw network protocol access.","Provides a reliable datagram layer that does not guarantee …","","Further receptions will be disallowed.","","","","","SO_RXQ_OVFL indicates that an unsigned 32 bit value …","SO_RXQ_OVFL indicates that an unsigned 32 bit value …","Set close-on-exec on the new descriptor","Set non-blocking mode on the new socket","Received version of <code>ControlMessage::ScmCredentials</code>","A message of type <code>SCM_CREDENTIALS</code>, containing the pid, uid …","Received version of <code>ControlMessage::ScmRights</code>","A message of type <code>SCM_RIGHTS</code>, containing an array of file …","A message of type <code>SCM_TIMESTAMP</code>, containing the time the …","Nanoseconds resolution timestamp","","","Provides a sequenced, reliable, two-way connection- based …","Represents a socket option that can be set.","","","Represents a socket address","Additional socket options","Constants used in <code>socket</code> and <code>socketpair</code> to specify the …","These constants are used to specify the communication …","Provides sequenced, reliable, two-way, connection- based …","TCP protocol (ip(7))","","UDP protocol (ip(7))","UDP Generic Receive Offload (GRO) allows receiving …","UDP GSO makes it possible for applications to generate …","Local communication (see <code>unix(7)</code>)","","A wrapper around <code>sockaddr_un</code>.","Unix credentials of the sending process.","Unspecified address family, (see <code>getaddrinfo(3)</code>)","","","","","","","","","","","Further  transmissions will be disallowed.","ITU-T X.25 / ISO-8208 protocol (see <code>x25(7)</code>)","","Accept a connection on a socket","Accept a connection on a socket","Physical-layer address (MAC)","","","","","Returns the set containing all flags.","Returns the set containing all flags.","","If this address represents an abstract socket, return its …","Conversion from nix’s SockAddr type to the underlying …","Returns a mutable pointer to the raw <code>sockaddr_un</code> struct","Returns a pointer to the raw <code>sockaddr_un</code> struct","Bind a name to a socket","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Context Identifier (CID)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterate over the valid control messages pointed to by this …","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Initiate a connection on a socket","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Always AF_PACKET","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Create a new <code>AddressFamily</code> from an integer value retrieved …","","","","","","","Look up the value of this socket option on the given …","Get the address of the peer connected to the socket <code>fd</code>.","Get the current address to which the socket <code>fd</code> is bound.","Get the current value for the requested socket option","Returns the group identifier","","Length of MAC address","","","","","","","","","","","","","","","","","","","","","","","ARP hardware type","Interface number","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Gets the IP address associated with this socket address.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Listen for connections on a socket","","","","","","","","","","","","Create a new sockaddr_un representing a filesystem path.","","","","Creates a new instance with the credentials of the current …","Instantiate a new <code>IpMembershipRequest</code>","Instantiate a new <code>Ipv6MembershipRequest</code>","Create a new <code>sockaddr_un</code> representing an address in the “…","","","","","Create a new IpAddr that contains an IPv4 address.","Create a new IpAddr that contains an IPv6 address.","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","If this address represents a filesystem path, return that …","Returns the addrlen of this socket - …","","Returns the process identifier","Packet type","Gets the port number associated with this socket address","Port number","Physical-layer protocol","Receive data from a connection-oriented socket. Returns …","Receive data from a connectionless or connection-oriented …","An extension of <code>recvmsg</code> that allows the caller to receive …","Receive message in scatter-gather vectors from a socket, …","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","Return the eight 16-bit segments that make up this address","Send data to a connection-oriented socket. Returns the …","An extension of <code>sendmsg</code> that allows the caller to transmit …","Send data in scatter-gather vectors to a socket, possibly …","Send a message to a socket","Set the value of this socket option on the given socket.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the value for the requested socket option","Shut down part of a full-duplex connection.","","","","","","","","","","","","","","Return the appropriate <code>SockAddr</code> type from a …","","Create an endpoint for communication","Create a pair of connected sockets","Socket options as used by <code>setsockopt</code> and <code>getsockopt</code>.","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the user identifier","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns a value indicating whether or not this socket has …","","","Bind this socket to a particular device like “eth0”.","Set or get the broadcast flag.","","Join a multicast group","Leave a multicast group.","If enabled, this boolean option allows binding to an IP …","Set or read a boolean integer argument that determines …","Set or read the time-to-live value of outgoing multicast …","Setting this boolean option enables transparent proxying …","Pass an <code>IP_PKTINFO</code> ancillary message that contains a …","Enable extended reliable error message passing.","Set or retrieve the current time-to-live field that is …","Join an IPv6 multicast group.","Leave an IPv6 multicast group.","Control receiving of asynchronous error options.","Set delivery of the <code>IPV6_PKTINFO</code> control message on …","Set the unicast hop limit for the socket.","The socket is restricted to sending and receiving IPv6 …","Enable sending of keep-alive messages on …","When enabled,  a close(2) or shutdown(2) will not return …","Set the mark for each packet sent through this socket …","If this option is enabled, out-of-band data is directly …","","Enable or disable the receiving of the <code>SCM_CREDENTIALS</code> …","Return the credentials of the foreign process connected to …","Sets or gets the maximum socket receive buffer in bytes.","Using this socket option, a privileged (<code>CAP_NET_ADMIN</code>) …","Specify the receiving timeout until reporting an error.","Enable or disable the receiving of the <code>SO_TIMESTAMP</code> …","Enable or disable the receiving of the <code>SO_TIMESTAMPNS</code> …","Enables local address reuse","Permits multiple AF_INET or AF_INET6 sockets to be bound …","Indicates that an unsigned 32-bit value ancillary message …","Specify the sending timeout until reporting an error.","Sets or gets the maximum socket send buffer in bytes.","Using this socket option, a privileged (<code>CAP_NET_ADMIN</code>)  …","Gets the socket type as an integer.","Get and clear the pending socket error.","This option allows the caller to set the TCP congestion …","The maximum number of keepalive probes TCP should send …","The time (in seconds) the connection needs to remain idle …","The time (in seconds) between individual keepalive probes.","The maximum segment size for outgoing TCP packets.","Under most circumstances, TCP sends data when it is …","","Specifies the maximum amount of time in milliseconds that …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codelags for <code>fchmodat</code> function.","","","","","“File mode / permissions” flags.","","","“File type” flags for <code>mknod</code> and related functions.","","","","","","","","","","","","","","","","","","","","","","","","Flags for <code>utimensat</code> function.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","Change the file permission bits of the file specified by a …","Change the file permission bits.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","Change the access and modification times of the file …","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Change the access and modification times of a file without …","","","","","Create a special or ordinary file, by pathname.","Create a special or ordinary file, relative to a given …","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Change the access and modification times of a file.","Change the access and modification times of a file.","","","","","","","","","","","Describes the file system type as known by the operating …","","","","","","","","","","","","","","","","","","Describes a mounted file system","","","Size of a block","Total data blocks in filesystem","Free blocks available to unprivileged user","Free blocks in filesystem","","","","","","","","","","","Total file nodes in filesystem","Free file nodes in filesystem","Filesystem ID","Magic code defining system type","","","Returns the argument unchanged.","Returns the argument unchanged.","Identifies a mounted file system","Describes a mounted file system.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum length of filenames","Optimal transfer block size","Describes a mounted file system.","","","","","","","","","File system mount Flags","Append-only file","Immutable file","Allow mandatory locks on the filesystem","Do not update access times on files","Do not interpret character or block-special devices","Do not update access times on files","Do not allow execution of binaries on the filesystem","Do not allow the set-uid bits to have an effect","Read Only","Update access time relative to modify/change time","All IO should be done synchronously","Write on file/directory/symlink","Wrapper around the POSIX <code>statvfs</code> struct","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","get the file system block size","Get the number of blocks.","Get the number of free blocks for unprivileged users","Get the number of free blocks in the file system","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","Get the total number of file inodes","Get the number of free file inodes for unprivileged users","Get the number of free file inodes","Get the file system id","Get the mount flags","","","","","","","Get the fundamental file system block size","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Return a <code>Statvfs</code> object with information about <code>fd</code>","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Get the maximum filename length","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Return a <code>Statvfs</code> object with information about the <code>path</code>","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","System info structure returned by <code>sysinfo</code>.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the load average tuple.","Current number of processes.","Returns the total amount of installed RAM in Bytes.","Returns the amount of completely unused RAM in Bytes.","Returns the amount of unused swap memory in Bytes.","Returns the amount of swap memory in Bytes.","Returns system information.","","","","","Returns the time since system boot.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Baud rates supported by the system.","","","","","","","","","","","","","","","","","","","Flags for setting the control mode of a terminal","","","","","","","","","","","","","Specify how transmission flow should be altered","Specify a combination of the input and output buffers to …","","","","","","","","","","","","","","","","","Flags for configuring the input mode of a terminal","Flags for setting any local modes","","","","","","","","","","","","","","Flags for configuring the output mode of a terminal","","","","","Specify when a port configuration change should occur.","Indices into the <code>termios.c_cc</code> array for special characters.","","","","","","Flush data that was received but not read","Transmit a STOP character, which should disable a …","Flush both received data not read and written data not …","Transmit a START character, which should re-enable a …","Flush data written but not transmitted","Suspend transmission","Resume transmission","The change occurs after all output has been written","Same as <code>TCSADRAIN</code>, but will also flush the input buffer","The change will occur immediately","","Stores settings for the termios API","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Get input baud rate (see cfgetispeed(3p)).","Get output baud rate (see cfgetospeed(3p)).","Configures the port to something like the “raw” mode …","Set input baud rate (see cfsetispeed(3p)).","Set output baud rate (see cfsetospeed(3p)).","Set both the input and output baud rates (see termios(3)).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Control characters (see <code>termios.c_cc</code> documentation)","Control mode flags (see <code>termios.c_cflag</code> documentation)","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","Input mode flags (see <code>termios.c_iflag</code> documentation)","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Local mode flags (see <code>termios.c_lflag</code> documentation)","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Output mode flags (see <code>termios.c_oflag</code> documentation)","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Block until all output data is written (see tcdrain(3p)).","Suspend or resume the transmission or reception of data …","Discard data in the output or input queue (see tcflush(3p)…","Return the configuration of a port tcgetattr(3p)).","Get the session controlled by the given terminal (see …","Send a break for a specific duration (see tcsendbreak(3p)).","Set the configuration for a terminal (see tcsetattr(3p)).","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Makes a new <code>TimeSpec</code> with given number of microseconds.","Makes a new <code>TimeVal</code> with given number of microseconds.","","","","","","","","Makes a new <code>TimeSpec</code> with given number of nanoseconds.","Makes a new <code>TimeVal</code> with given number of nanoseconds.  …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of the clock used to mark the progress of the …","An enumeration allowing the definition of the expiration …","","","","","","","A timerfd instance. This is also a file descriptor, you …","Additional flags to change the behaviour of the file …","Flags that are used for arming the timer.","Returns the set containing all flags.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","Get the parameters for the alarm currently set, if any.","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Creates a new timer based on the clock defined by <code>clockid</code>. …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Sets a new alarm on the timer.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Remove the alarm if any is set.","Wait for the configured alarm to expire.","A vector of buffers.","A slice of memory in a remote process, starting at address …","View the <code>IoVec</code> as a Rust slice.","The starting address of this slice (<code>iov_base</code>).","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create an <code>IoVec</code> from a mutable Rust slice.","Create an <code>IoVec</code> from a Rust slice.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The number of bytes in this slice (<code>iov_len</code>).","Low-level write to a file, with specified offset.","Read from <code>fd</code> at <code>offset</code> filling buffers in <code>iov</code>.","Read data directly from another process’s virtual memory …","Write data directly to another process’s virtual memory …","Low-level write to a file, with specified offset.","Write to <code>fd</code> at <code>offset</code> from buffers in <code>iov</code>.","Low-level vectored read from a raw file descriptor","","","","","","","","","Low-level vectored write to a raw file descriptor","Describes the running system.  Return type of <code>uname</code>.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Machine hardware platform.","Network name of this machine.","Release level of the operating system.","Name of the operating system implementation","","","","","Get system identification","Version level of the operating system.","The process was previously stopped but has resumed …","The process exited normally (as with <code>exit()</code> or returning …","The traced process was stopped by a <code>PTRACE_EVENT_*</code> event. …","The traced process was stopped by execution of a system …","The process was killed by the given signal. The third field","There are currently no state changes to report in any …","The process is alive, but was stopped by the given signal. …","Report the status of selected processes that have …","Report the status of selected processes which have …","Do not block when there are no processes wishing to report …","Don’t reap, just poll status.","An alias for WUNTRACED.","Report the status of selected processes which are stopped …","Controls the behavior of <code>waitpid</code>.","Possible return values from <code>wait()</code> or <code>waitpid()</code>.","Wait on all children, regardless of type","Wait for “clone” children only.","Don’t wait on children of other threads in this group","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Convert a raw <code>wstatus</code> as returned by <code>waitpid</code>/<code>wait</code> into a …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Extracts the PID from the WaitStatus unless it equals …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Wait for any child process to change status or a signal is …","Wait for a process to change status","","","","","","","","","","","Clock identifier","Gets the raw <code>clockid_t</code> wrapped by <code>self</code>","","","Get the clock id of the specified process id, (see …","Get the resolution of the specified clock, (see …","Get the time of the specified clock, (see clock_gettime(2)…","Set the time of the specified clock, (see clock_settime(2)…","","","","","","","","","Returns the argument unchanged.","Creates <code>ClockId</code> from raw <code>clockid_t</code>","","Calls <code>U::from(self)</code>.","Returns the current time on the clock id","","Returns <code>ClockId</code> of a <code>pid</code> CPU-time clock","Returns resolution of the clock id","Sets time to <code>timespec</code> on the clock id","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","Maximum number of I/O operations in a single list I/O call …","Maximum number of outstanding asynchronous I/O operations …","The maximum amount by which a process can decrease its …","Maximum length of argument to the exec functions including …","Maximum number of functions that may be registered with …","Options for access()","Maximum obase values allowed by the bc utility.","Maximum number of elements permitted in an array by the bc …","Maximum scale value allowed by the bc utility.","Maximum length of a string constant accepted by the bc …","Maximum number of simultaneous processes per real user ID.","","Maximum number of weights that can be assigned to an entry …","","Maximum number of timer expiration overruns.","Maximum number of expressions that can be nested within …","Minimum number of bits needed to represent, as a signed …","Test for existence of file.","Flags for <code>fchownat</code> function.","","Represents the successful result of calling <code>fork</code>","Initial size of <code>getgrgid_r</code> and <code>getgrnam_r</code> data buffers","Initial size of <code>getpwuid_r</code> and <code>getpwnam_r</code> data buffers","Group identifier","Representation of a Group, based on <code>libc::group</code>","Maximum length of a host name (not including the …","Maximum number of iovec structures that one process has …","Unless otherwise noted, the maximum length, in bytes, of a …","Maximum number of links to a single file.","Maximum length of a login name.","Flags for <code>linkat</code> function.","Maximum number of bytes in a terminal canonical input line.","Minimum number of bytes for which space is available in a …","The maximum number of open message queue descriptors a …","The maximum number of message priorities supported by the …","Maximum number of bytes in a filename (not including the …","Maximum number of simultaneous supplementary group IDs per …","","","","A value one greater than the maximum value that the system …","The size of a system page in bytes.","Maximum number of bytes the implementation will store as a …","Maximum number of bytes that is guaranteed to be atomic …","Symbolic links can be created.","Minimum number of bytes of storage actually allocated for …","Recommended increment for file transfer sizes between the …","Maximum recommended file transfer size.","Minimum recommended file transfer size.","Recommended file transfer buffer alignment.","","","","","","Variable names for <code>pathconf</code>","Process identifier","","Constant for UID = 0","","Test for read permission.","","Real, effective and saved group IDs.","Real, effective and saved user IDs.","","","","","Maximum number of bytes in a symbolic link.","","Specify an offset relative to the current file location.","Specify an offset relative to the next location in the …","Specify an offset relative to the end of the file.","Specify an offset relative to the next hole in the file …","Specify an offset relative to the start of the file.","","Variable names for <code>sysconf</code>","","","","User identifier","Flags for <code>unlinkat</code> function.","Representation of a User, based on <code>libc::passwd</code>","Test for write permission.","Directive that tells <code>lseek</code> and <code>lseek64</code> what the offset is …","Test for execute (search) permission.","The implementation supports the Terminal Characteristics …","The implementation supports the C-Language Binding option.","The implementation supports the C-Language Development …","The implementation supports the FORTRAN Development …","The implementation supports the FORTRAN Runtime Utilities …","The implementation supports the creation of locales by the …","The implementation supports the Batch Environment Services …","The implementation supports the Batch Accounting option.","The implementation supports the Batch Checkpoint/Restart …","The implementation supports the Locate Batch Job Request …","The implementation supports the Batch Job Message Request …","The implementation supports the Track Batch Job Request …","The implementation supports the Software Development …","The implementation supports the User Portability Utilities …","Integer value indicating version of the Shell and …","The implementation supports the Advisory Information …","The implementation supports asynchronous input and output.","Asynchronous input or output operations may be performed …","The implementation supports barriers.","The use of <code>chown</code> and <code>fchown</code> is restricted to a process with","The implementation supports clock selection.","The implementation supports the Process CPU-Time Clocks …","The implementation supports the File Synchronization …","The implementation supports the IPv6 option.","The implementation supports job control.","The implementation supports memory mapped Files.","The implementation supports the Process Memory Locking …","The implementation supports the Range Memory Locking …","The implementation supports memory protection.","The implementation supports the Message Passing option.","The implementation supports the Monotonic Clock option.","Pathname components longer than {NAME_MAX} generate an …","The implementation supports the Prioritized Input and …","The implementation supports the Process Scheduling option.","Prioritized input or output operations may be performed …","The implementation supports the Raw Sockets option.","The implementation supports read-write locks.","The implementation supports realtime signals.","The implementation supports the Regular Expression …","Each process has a saved set-user-ID and a saved …","The implementation supports semaphores.","The implementation supports the Shared Memory Objects …","The implementation supports the POSIX shell.","The implementation supports the Spawn option.","The implementation supports spin locks.","The implementation supports the Process Sporadic Server …","","The implementation supports the Synchronized Input and …","Synchronized input or output operations may be performed …","The implementation supports threads.","The implementation supports the Thread Stack Address …","The implementation supports the Thread Stack Size …","The implementation supports the Thread CPU-Time Clocks …","The implementation supports the Thread Execution …","The implementation supports the Non-Robust Mutex Priority …","The implementation supports the Non-Robust Mutex Priority …","The implementation supports the Thread Process-Shared …","The implementation supports the Robust Mutex Priority …","The implementation supports the Robust Mutex Priority …","The implementation supports thread-safe functions.","The implementation supports the Thread Sporadic Server …","The implementation supports timeouts.","The implementation supports timers.","The implementation supports the Trace option.","The implementation supports the Trace Event Filter option.","","The implementation supports the Trace Inherit option.","The implementation supports the Trace Log option.","","","","The implementation supports the Typed Memory Objects …","The implementation provides a C-language compilation …","The implementation provides a C-language compilation …","The implementation provides a C-language compilation …","The implementation provides a C-language compilation …","This symbol shall be defined to be the value of a …","Integer value indicating version of this standard …","The implementation supports the X/Open Encryption Option …","The implementation supports the Issue 4, Version 2 Enhanced","","The implementation supports the X/Open Realtime Option …","The implementation supports the X/Open Realtime Threads …","The implementation supports the Issue 4, Version 2 Shared …","The implementation supports the XSI STREAMS Option Group.","The implementation supports the XSI option","Integer value indicating version of the X/Open Portability …","Checks the file named by <code>path</code> for accessibility according …","","Alarm signal scheduling.","Returns the set containing all flags.","Get the raw <code>uid_t</code> wrapped by <code>self</code>.","Get the raw <code>gid_t</code> wrapped by <code>self</code>.","Get the raw <code>pid_t</code> wrapped by <code>self</code>.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Change the current working directory of the calling …","Change the ownership of the file at <code>path</code> to be owned by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Close a raw file descriptor","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns Uid of calling process. This is practically a more …","Returns Gid of calling process. This is practically a more …","Daemonize this process by detaching from the controlling …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Home directory","Create a copy of the specified file descriptor (see dup(2)…","Create a copy of the specified file descriptor using the …","Create a new copy of the specified file descriptor using …","Returns effective Uid of calling process. This is …","Returns effective Gid of calling process. This is …","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","Replace the current process image with a new one (see …","Replace the current process image with a new one (see …","Execute program relative to a directory file descriptor …","Replace the current process image with a new one and …","Replace the current process image with a new one and …","","Change the current working directory of the process to the …","Change the ownership of the file referred to by the open …","Change the ownership of the file at <code>path</code> to be owned by …","Synchronize the data of a file","Replace the current process image with a new one (see …","","","","","","","","","","","","","","","","","","","","","","","Create a new child process duplicating the parent process (…","Like <code>pathconf</code>, but works with file descriptors instead of …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Get a group by GID.","","Get a user by name.","Get a group by name.","Creates <code>Uid</code> from raw <code>uid_t</code>.","Creates <code>Gid</code> from raw <code>gid_t</code>.","Creates <code>Pid</code> from raw <code>pid_t</code>.","Get a user by UID.","Synchronize changes to a file","Truncate a file to a specified length","User information","Returns the current directory as a <code>PathBuf</code>","Get the effective group ID","Get the effective user ID","Get the real group ID","Calculate the supplementary group access list.","Get the list of supplementary group IDs of the calling …","Get the host name and store it in the provided buffer, …","","Get the group id of the calling process (see getpgrp(3)).","Get the pid of this process (see getpid(2)).","Get the pid of this processes’ parent (see getpid(2)).","Gets the real, effective, and saved group IDs.","Gets the real, effective, and saved user IDs.","Get the process group ID of a session leader getsid(2).","Get the caller’s thread ID (see gettid(2).","Get a real user ID","Group ID","Group ID","","","","","","","Initialize the supplementary group access list.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Return <code>true</code> if this is the child process of the <code>fork()</code>","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if this is the parent process of the <code>fork()</code>","Returns true if the <code>Uid</code> represents privileged user - root. …","","Link one file to another file","Move the read/write file offset.","","List of Group members","Creates new directory <code>path</code> with access rights <code>mode</code>.  (see …","Creates new fifo special file (named pipe) with path <code>path</code> …","Creates new fifo special file (named pipe) with path <code>path</code> …","Creates a regular file which persists even after process …","Username","Group name","Returns the complement of this set of flags.","Returns PID of parent of calling process","","","User password (probably encrypted)","Group password","Get path-dependent configurable system variables (see …","Suspend the thread until a signal is received.","Create an interprocess channel.","Like <code>pipe</code>, but allows setting certain file descriptor …","","Read from a raw file descriptor.","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Set the effective group ID","Set the effective user ID","Set the group identity used for filesystem checks …","Set the user identity used for filesystem checks …","Set the group ID","Set the list of supplementary group IDs for the calling …","Set the system host name (see sethostname(2)).","Set a process group ID (see setpgid(2)).","Sets the real, effective, and saved gid. (see setresuid(2))","Sets the real, effective, and saved uid. (see setresuid(2))","Create new session and set process group id (see setsid(2)…","Set the user ID","Path to shell","Suspend execution for an interval of time","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Creates a symbolic link at <code>path2</code> which points to <code>path1</code>.","Returns the symmetric difference between the flags in <code>self</code> …","Commit filesystem caches to disk","Get configurable system variables (see sysconf(3))","Get the terminal foreground process group (see tcgetpgrp(3)…","Set the terminal foreground process group (see tcgetpgrp(3)…","Returns PID of calling process","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Truncate a file to a specified length","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the name of the terminal device that is open on file …","","","","","","","","","","","","","","","","User ID","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Remove a directory entry","Remove a directory entry","Write to a raw file descriptor.","","Disable process accounting","Enable process accounting","Cancel an previously set alarm signal.","Schedule an alarm signal."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,8,8,0,8,0,8,8,0,0,8,8,0,5,5,9,10,7,8,5,9,10,7,8,7,8,7,8,5,9,5,9,10,7,8,5,9,10,7,8,7,7,5,9,10,7,8,5,5,9,10,7,8,5,5,9,10,7,8,7,5,9,10,7,8,5,9,10,5,9,10,5,5,7,8,5,9,10,7,8,5,9,10,7,8,5,9,10,7,8,0,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,27,27,27,0,0,27,27,27,27,27,27,27,27,27,27,27,0,27,27,27,27,0,27,27,27,27,27,27,31,27,27,27,27,27,27,34,34,34,34,34,0,39,39,39,39,39,39,37,47,47,47,47,47,47,47,47,47,47,47,36,36,36,36,47,47,47,47,47,0,0,0,0,43,43,43,43,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,44,44,44,44,44,44,0,35,35,35,0,38,38,38,38,0,0,43,43,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,43,38,39,44,34,20,35,36,37,43,38,39,44,34,20,35,36,37,38,39,44,34,20,35,36,37,38,39,34,20,35,36,37,38,39,0,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,38,39,0,0,0,34,34,34,34,34,20,20,20,20,20,35,35,35,35,35,36,36,36,36,36,37,37,37,37,37,47,43,38,38,38,38,38,39,39,39,39,39,44,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,0,0,34,20,35,36,37,38,39,44,0,0,0,0,34,20,35,36,37,38,39,0,0,34,20,35,36,37,38,39,0,34,20,35,36,37,38,39,34,20,35,36,37,38,39,34,20,35,36,37,38,39,0,34,20,35,36,37,43,38,39,44,34,20,35,36,37,38,39,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,47,43,38,39,44,34,20,35,36,37,38,39,0,0,0,0,54,54,55,54,55,54,54,54,54,55,54,55,54,55,54,54,55,54,55,0,54,55,54,54,55,55,54,55,54,54,55,54,55,54,55,0,56,56,0,57,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,0,56,57,56,57,56,57,56,57,56,57,0,56,56,56,56,56,57,57,57,57,57,56,57,56,57,56,57,56,57,56,57,56,57,0,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,60,60,60,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,59,59,59,59,60,60,60,60,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,0,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,0,0,59,60,63,0,0,0,62,62,62,62,62,62,62,62,63,62,63,62,63,62,63,62,63,62,63,62,63,62,63,62,63,64,62,63,64,62,63,64,62,63,64,62,63,62,63,62,63,62,63,62,63,62,63,64,62,63,64,62,63,64,62,62,62,62,62,63,63,63,63,63,64,62,63,64,62,63,62,63,62,63,62,63,62,63,64,62,63,62,63,62,63,62,63,64,62,63,62,63,0,0,0,0,0,0,0,0,0,0,64,62,63,62,63,62,63,62,63,62,63,62,63,62,63,62,63,64,62,63,62,63,64,62,63,64,62,63,64,62,63,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,0,68,68,68,68,68,68,68,68,70,69,68,71,70,69,68,71,68,68,68,68,68,68,69,68,68,68,68,70,69,68,68,68,68,68,71,70,69,68,71,68,68,68,68,68,0,0,70,68,68,68,70,69,68,71,69,71,68,68,69,70,71,68,68,68,68,68,68,68,68,69,68,70,69,68,71,70,69,68,71,70,69,68,71,68,72,72,72,72,72,72,72,72,72,72,0,0,72,73,72,72,72,72,72,72,72,73,72,73,72,73,72,73,72,72,72,72,72,72,73,72,73,72,73,72,73,72,72,72,72,72,73,72,72,72,72,72,73,72,72,72,72,73,72,72,72,73,72,72,0,0,72,73,72,73,72,72,72,73,72,72,73,72,73,72,73,72,72,0,0,0,0,0,77,78,79,80,77,78,79,80,77,78,79,80,78,79,80,77,78,79,77,78,79,77,77,78,79,80,77,80,0,86,78,79,80,77,0,78,79,77,78,79,80,77,77,79,80,0,0,0,0,77,79,78,79,80,78,79,80,77,78,79,80,77,78,79,80,77,0,77,78,78,78,78,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,0,0,87,87,87,87,87,87,87,87,87,89,87,89,0,87,89,87,89,87,87,87,89,89,87,87,87,89,87,89,87,87,87,87,87,87,89,87,89,87,87,87,87,87,89,87,87,87,87,89,87,87,89,89,87,87,87,0,0,0,87,89,0,87,87,87,87,89,87,87,89,87,89,87,89,87,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,90,0,0,90,97,98,97,98,97,0,0,0,0,96,96,0,91,95,0,99,91,95,96,97,98,90,99,91,95,96,97,98,90,99,91,96,97,98,90,96,97,98,90,96,97,98,91,99,99,96,97,98,90,96,97,98,90,91,95,91,99,91,95,96,97,98,90,99,91,95,96,97,98,90,99,91,91,91,91,91,91,96,97,98,90,91,95,96,97,98,90,99,95,95,91,95,95,91,91,96,97,98,91,91,91,91,96,97,98,90,91,95,96,97,98,90,99,91,95,96,97,98,90,99,91,95,96,97,98,90,99,99,91,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,0,105,105,105,0,0,0,103,104,103,104,103,104,103,104,103,104,103,104,103,104,103,104,103,105,104,106,103,105,104,106,103,105,104,106,103,105,104,106,103,104,103,104,103,104,106,103,104,103,104,106,0,0,0,0,103,105,104,106,103,105,104,106,106,103,104,103,103,103,103,103,105,104,104,104,104,104,106,103,105,104,106,103,104,103,104,103,104,103,104,103,105,104,106,103,104,103,104,103,104,103,105,104,106,103,104,103,104,106,103,104,103,104,103,104,103,104,103,104,103,104,103,104,103,105,104,106,103,104,103,105,104,106,103,105,104,106,103,105,104,106,103,104,107,107,107,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,109,109,109,111,109,109,109,109,109,109,109,109,109,109,109,109,109,109,111,109,109,109,109,109,0,0,0,0,108,109,111,108,109,111,109,111,109,111,109,111,109,111,109,111,109,111,109,111,108,110,112,109,111,108,110,112,109,111,108,110,109,111,108,110,109,111,110,109,111,109,111,112,109,111,109,111,109,111,110,109,111,110,109,111,109,109,109,109,109,111,111,111,111,111,108,110,112,109,111,108,110,112,109,111,109,111,109,111,109,111,108,109,111,110,108,109,111,109,111,109,111,109,111,108,110,112,109,111,109,111,112,112,109,111,109,111,110,108,109,111,108,109,111,109,111,109,111,109,111,109,111,108,110,109,111,109,111,108,110,112,109,111,108,110,112,109,111,108,110,112,109,111,112,0,0,0,0,114,114,0,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,0,114,114,114,114,114,114,114,114,114,114,114,114,114,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,119,119,117,117,0,118,118,118,0,0,0,0,115,115,115,115,115,115,0,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,120,118,119,115,116,117,120,118,119,115,116,117,120,118,119,115,116,117,120,118,119,115,116,117,120,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,120,118,119,115,116,117,120,118,119,115,116,117,118,119,115,115,115,115,115,116,116,116,116,116,117,117,117,117,117,120,118,118,118,118,118,119,119,119,119,119,115,116,117,120,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,120,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,120,118,119,115,116,117,118,119,115,116,117,118,119,0,0,0,0,0,0,0,0,0,0,115,116,117,118,119,115,116,117,120,118,119,115,116,117,118,119,115,116,117,118,119,0,0,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,120,118,119,115,116,117,118,119,115,116,117,120,118,119,115,116,117,120,118,119,115,116,117,120,118,119,115,116,117,118,119,122,122,122,122,122,122,0,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,0,122,122,122,122,122,122,122,122,122,122,0,122,122,122,122,122,122,122,122,122,122,0,0,0,0,0,0,126,126,126,127,127,127,127,127,127,127,127,126,126,126,126,126,126,126,126,126,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,125,0,125,125,125,125,125,125,125,126,127,125,126,127,125,126,127,125,126,127,125,126,127,125,125,0,125,0,125,125,126,127,125,126,127,125,125,126,127,125,125,125,125,125,126,127,125,125,125,125,125,0,0,0,126,127,125,125,0,125,125,126,127,125,125,125,0,125,126,127,125,0,125,0,125,0,0,0,0,125,125,125,0,0,0,126,127,125,125,0,126,127,125,126,127,125,126,127,125,125,0,0,134,135,135,135,132,132,132,132,132,132,132,132,132,132,0,0,0,134,132,133,132,132,132,132,132,132,132,133,133,133,134,135,132,133,134,135,132,133,134,135,132,133,134,135,132,133,134,135,132,132,132,132,133,132,132,134,135,132,133,134,135,132,133,132,134,135,132,132,132,132,132,133,134,135,132,133,132,132,132,132,134,135,132,133,133,133,133,132,132,132,134,135,132,133,132,132,132,133,134,135,132,0,0,0,0,0,132,132,133,133,133,133,133,133,132,132,132,134,135,132,133,132,134,135,132,133,134,135,132,133,134,135,132,133,132,136,136,136,136,136,0,136,136,136,136,136,136,136,136,136,136,136,136,0,0,136,136,136,136,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,0,138,138,138,138,138,138,138,138,138,0,138,138,138,0,0,138,138,138,138,0,0,0,140,141,140,141,140,140,140,140,140,140,140,140,140,141,140,141,140,140,140,140,141,141,140,141,141,0,140,0,141,140,140,141,140,141,140,141,0,0,148,144,144,144,144,144,144,144,124,124,124,124,124,124,124,124,124,124,0,124,124,0,124,124,124,124,124,124,124,124,124,124,124,124,0,124,124,124,124,124,124,124,147,147,147,0,0,148,148,0,0,148,0,100,0,100,100,0,0,0,76,144,76,124,76,124,144,144,144,144,144,144,144,124,146,144,147,76,148,149,100,102,124,146,144,147,76,148,149,100,102,76,124,146,144,147,76,148,149,100,102,124,146,144,147,76,148,149,100,102,124,144,147,144,144,76,144,144,76,124,146,144,147,76,148,149,100,102,124,146,144,147,76,148,149,100,102,144,76,149,124,124,146,144,144,144,144,144,147,76,148,149,100,102,124,146,144,147,76,148,149,100,102,102,144,144,144,144,124,149,124,146,144,147,76,148,149,100,102,144,144,144,124,146,144,147,76,148,149,100,102,146,144,144,124,0,0,149,149,102,146,144,124,144,147,0,0,144,76,144,0,102,0,0,144,144,144,76,76,76,76,76,124,146,144,147,76,148,149,100,102,124,144,124,124,146,144,147,76,148,149,100,102,124,146,144,147,76,148,149,100,102,124,146,144,147,76,148,149,100,102,0,144,76,318,319,318,319,319,151,151,0,0,0,0,0,151,152,151,151,151,151,151,151,151,153,151,152,153,151,152,153,151,153,151,151,151,151,151,152,151,153,151,152,153,151,152,151,153,151,151,151,151,151,152,153,151,152,151,151,151,151,153,151,152,151,151,151,153,151,152,152,151,151,152,152,151,151,152,151,151,152,0,0,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,151,151,151,153,151,151,153,151,152,153,151,152,153,151,152,151,152,0,170,161,0,183,183,183,170,170,170,170,170,170,184,170,170,170,0,0,0,175,170,170,0,170,170,170,161,170,0,0,0,0,182,183,182,0,0,182,183,182,170,170,170,170,170,161,0,170,158,158,158,158,158,158,158,158,158,170,0,170,170,170,161,0,176,176,176,176,176,176,176,176,176,176,176,176,176,176,170,170,170,170,175,175,170,184,0,0,170,170,182,183,154,154,182,183,182,183,182,182,170,0,175,0,0,170,0,0,0,0,175,176,170,176,182,183,170,161,0,0,170,171,172,171,172,194,198,170,161,0,170,184,170,187,0,0,155,187,180,157,157,154,158,159,160,161,160,160,0,154,158,154,158,154,158,154,158,154,158,154,158,154,158,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,187,188,184,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,187,188,184,180,163,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,184,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,184,154,158,188,169,169,169,0,180,187,154,158,0,154,158,177,154,158,154,158,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,184,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,184,154,158,161,155,180,164,165,166,162,167,168,169,170,171,171,172,172,159,159,173,173,160,160,161,161,174,174,157,157,155,155,163,163,175,176,154,154,154,154,154,158,158,158,158,158,177,178,179,180,181,182,183,187,188,184,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,177,178,179,180,181,182,183,187,188,184,154,158,154,158,154,158,170,154,158,171,172,159,173,194,0,0,0,177,174,155,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,176,154,158,184,155,155,154,158,154,158,154,158,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,187,188,184,181,187,188,171,154,158,154,158,0,168,168,168,168,168,168,168,0,171,159,173,160,174,157,163,177,178,179,160,161,161,161,161,172,172,161,181,154,158,159,154,158,160,160,174,177,155,171,163,155,0,0,0,0,154,158,164,164,0,173,0,0,0,0,198,154,158,0,0,166,166,166,166,166,165,165,165,165,0,0,0,0,0,0,0,0,0,167,154,158,154,158,162,162,154,158,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,184,171,172,159,173,171,161,171,172,159,173,160,161,174,157,155,163,154,158,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,175,176,154,158,177,178,179,180,181,182,183,187,188,184,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,187,188,184,164,165,166,162,167,168,169,170,171,172,159,173,160,161,174,157,155,163,175,176,154,158,177,178,179,180,181,182,183,187,188,184,177,154,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,218,219,220,221,222,223,224,225,226,227,230,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,0,0,0,257,258,0,257,258,0,255,255,255,255,255,255,255,255,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,254,255,21,257,258,254,255,21,257,258,254,255,21,257,258,254,255,21,257,258,255,21,255,21,255,21,0,255,21,255,21,254,255,21,254,255,21,255,21,0,0,254,255,255,255,255,255,21,21,21,21,21,257,258,254,255,21,257,258,255,21,255,21,255,21,255,21,0,0,0,254,255,21,255,21,255,21,255,21,254,255,21,257,258,255,21,255,21,0,0,0,0,0,0,0,0,0,255,21,255,21,255,21,255,21,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,0,255,21,255,21,255,21,254,255,21,257,258,255,21,254,255,21,257,258,254,255,21,257,258,254,255,21,257,258,0,255,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,260,260,260,260,260,262,260,262,260,262,260,262,262,262,260,260,260,260,260,262,260,262,0,0,260,262,260,260,0,260,262,260,262,260,262,260,262,0,264,264,264,264,264,264,264,264,264,264,264,264,0,264,264,264,264,264,264,264,264,265,265,265,265,264,265,264,265,264,265,264,265,264,264,264,264,264,264,264,265,264,265,264,265,265,265,265,265,264,264,264,264,264,265,265,264,265,264,264,264,264,0,264,265,264,264,264,264,265,264,264,265,264,264,264,264,0,264,264,264,264,265,264,264,265,264,265,264,265,264,0,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,0,268,268,268,268,268,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,270,271,271,271,0,272,272,272,272,272,271,271,271,271,271,272,272,272,272,272,272,272,272,0,273,273,273,273,273,273,273,273,271,271,271,273,0,0,272,273,270,273,270,270,270,270,270,270,273,270,270,270,270,270,0,0,0,271,271,271,273,271,271,271,271,271,271,271,271,0,272,270,272,273,0,0,271,271,271,271,271,277,278,277,278,277,278,278,276,276,276,273,0,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,271,271,271,279,279,271,0,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,84,275,276,277,278,279,270,271,272,273,84,275,276,277,278,279,270,271,272,273,0,0,0,0,0,0,84,275,276,277,278,279,270,271,272,273,84,275,276,277,278,279,270,271,272,273,275,276,277,278,279,270,271,272,273,270,271,272,273,270,271,272,273,84,84,270,271,272,273,270,271,272,273,84,275,276,277,278,279,270,271,272,273,84,275,276,277,278,279,270,271,272,273,270,271,272,273,84,275,276,277,278,279,270,270,270,270,270,271,271,271,271,271,272,272,272,272,272,273,273,273,273,273,84,84,275,276,277,278,279,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,275,276,277,278,279,270,271,272,273,84,270,271,272,273,270,271,272,273,270,271,272,273,84,275,276,277,278,279,270,271,272,273,270,271,272,273,270,271,272,273,84,270,271,272,273,84,275,276,277,278,279,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,270,271,272,273,0,0,0,0,0,0,0,84,275,276,277,278,279,270,271,272,273,270,271,272,273,84,275,275,276,277,278,279,270,271,272,273,84,275,276,277,278,279,270,271,272,273,84,275,276,277,278,279,270,271,272,273,270,271,272,273,0,0,0,75,142,75,142,75,142,75,142,75,142,75,142,75,142,75,142,75,142,75,142,75,142,75,75,142,142,75,75,75,142,142,75,75,75,142,320,75,142,320,75,142,320,75,142,320,75,142,320,75,142,75,142,320,320,75,142,320,75,142,320,320,75,142,320,75,142,75,142,320,75,142,75,142,0,0,75,142,75,142,75,142,75,142,75,75,142,142,75,142,320,290,290,290,290,290,0,0,291,291,291,287,287,288,0,0,0,287,288,289,287,288,287,288,287,288,287,288,287,288,287,288,287,288,289,290,287,288,291,289,290,287,288,291,290,287,288,291,290,287,288,291,290,287,288,287,288,287,288,287,288,289,287,288,290,287,288,291,290,287,288,291,287,288,289,290,287,287,287,287,287,288,288,288,288,288,291,289,290,287,288,291,287,288,287,288,287,288,287,288,289,289,290,287,288,287,288,287,288,287,288,289,290,287,288,291,287,288,287,288,289,287,288,290,287,288,287,288,289,287,288,287,288,287,288,287,288,290,287,288,291,287,288,289,290,287,288,291,289,290,287,288,291,289,290,287,288,291,287,288,289,289,0,0,53,292,292,53,292,53,292,53,292,53,292,53,292,53,292,53,292,53,53,53,292,53,292,53,292,0,0,0,0,0,0,0,292,53,292,53,292,53,292,53,0,0,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,0,294,296,296,296,296,296,296,296,295,295,295,295,295,295,0,0,295,295,295,295,295,295,295,295,295,295,295,295,296,295,296,295,296,295,296,295,295,295,295,295,295,296,295,296,295,295,295,295,295,295,296,295,296,295,295,295,295,296,295,296,295,295,295,295,296,295,295,295,295,296,295,295,295,295,295,295,296,295,295,296,295,296,295,296,295,0,0,297,297,297,297,297,297,297,297,297,297,0,297,297,297,0,0,0,0,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,0,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,309,309,309,309,309,0,309,309,309,309,309,309,309,303,309,309,308,300,0,304,0,309,309,0,0,309,309,309,308,309,0,308,308,309,309,308,309,304,307,306,309,309,308,308,308,308,308,308,308,308,309,309,309,309,303,0,0,309,0,309,300,307,0,0,309,309,309,309,308,309,305,305,305,305,305,306,0,309,309,309,0,0,0,300,0,300,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,308,309,308,309,309,309,309,309,309,309,309,309,309,309,308,309,309,308,309,309,309,309,309,309,309,309,309,309,309,309,309,308,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,308,309,309,309,309,309,309,309,309,309,309,0,0,0,300,301,302,85,300,300,300,300,300,300,300,301,302,85,303,304,305,306,307,308,309,310,311,300,312,313,301,302,85,303,304,305,306,307,308,309,310,311,300,312,313,0,0,0,301,302,85,303,304,305,306,307,308,309,310,311,300,312,313,301,302,85,303,304,305,306,307,308,309,310,311,300,312,313,0,85,300,300,300,301,302,0,300,312,0,0,0,301,302,310,311,300,301,302,85,308,309,310,311,300,312,313,301,302,85,308,309,310,311,300,312,313,0,0,0,0,0,300,0,0,0,0,0,301,301,302,302,85,85,303,304,305,306,307,308,309,310,311,300,300,300,300,300,312,313,0,0,301,302,85,303,304,305,306,307,308,309,310,311,300,312,312,313,313,300,300,300,313,300,312,313,301,302,85,312,0,0,312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,313,301,302,85,308,309,300,0,300,300,300,301,302,85,303,304,305,306,307,308,309,310,311,300,312,313,300,303,300,303,301,0,0,0,0,313,0,0,0,0,312,313,300,85,85,300,312,313,0,0,0,0,0,0,310,311,300,310,311,300,0,0,0,0,0,0,0,0,0,0,0,0,312,0,300,300,0,300,0,0,0,0,85,301,302,85,303,304,305,306,307,308,309,310,311,300,312,313,301,302,85,300,0,301,302,85,303,304,305,306,307,308,309,310,311,300,312,313,301,302,85,303,304,305,306,307,308,309,310,311,300,312,313,0,301,302,85,303,304,305,306,307,308,309,310,311,300,312,313,312,300,0,0,0,321,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],0,[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,4],0,0,0,0,0,0,0,0,0,0,0,0,[5,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[8,8],[[]],[[]],[5],[9],[[5,5],1],[[9,9],1],[[10,10],1],[[7,7],1],[[8,8],1],[[],1],[[],1],[[],1],[[],1],[[],1],[7,11],[7,[[12,[8]]]],[[5,13],14],[[9,13],14],[[10,13],14],[[7,13],14],[[8,13],14],[[]],[15,[[4,[5]]]],[[]],[[]],[[]],[[]],[6,[[4,[5]]]],[[5,16]],[[9,16]],[[10,16]],[[7,16]],[[8,16]],[7,17],[[]],[[]],[[]],[[]],[[]],[5],[[]],[[]],[5,9],[9,12],[10,12],[[[0,[18,19]],20,21],[[4,[5]]]],[[6,[0,[18,19]],20,21],[[4,[5]]]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],0,[[]],[[]],[[],[[22,[24]]]],[24,24],[[]],[[24,13],14],[[24,13],14],[[]],[[]],[25],[[]],[[],26],[[],22],[[],22],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[27,28],0,[27,[[12,[27]]]],[[]],[[]],[[]],[27,27],[[]],[27,29],[[27,27],1],[[],1],[[],30],[[27,13],14],[[27,13],14],[[]],[27,28],[30,27],[30,27],[[]],[[],28],[[],27],[25],[[[0,[31,[32,[[0,[31,[32,[[0,[31,[32,[[0,[31,[32,[[0,[31,32]]]]]]]]]]]]]]]]]]],[[4,[[0,[31,[32,[[0,[31,[32,[[0,[31,[32,[[0,[31,32]]]]]]]]]]]]]]]]]],[[]],[[]],[[],26],[[],22],[33,[[22,[27,33]]]],[[],22],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],34],[[],20],[[],35],[[],36],[[],37],[[],38],[[],39],[[34,34],34],[[20,20],20],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[34,34]],[[20,20]],[[35,35]],[[36,36]],[[37,37]],[[38,38]],[[39,39]],[[34,34],34],[[20,20],20],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[34,34]],[[20,20]],[[35,35]],[[36,36]],[[37,37]],[[38,38]],[[39,39]],[34,40],[20,40],[35,41],[36,40],[37,40],[38,42],[39,40],[[34,34],34],[[20,20],20],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[34,34]],[[20,20]],[[35,35]],[[36,36]],[[37,37]],[[38,38]],[[39,39]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,34],[20,20],[35,35],[36,36],[37,37],[43,43],[38,38],[39,39],[44,44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,34],45],[[20,20],45],[[35,35],45],[[36,36],45],[[37,37],45],[[38,38],45],[[39,39],45],[[44,44],45],[34,34],[20,20],[35,35],[36,36],[37,37],[38,38],[39,39],[[34,34],1],[[20,20],1],[[35,35],1],[[36,36],1],[[37,37],1],[[38,38],1],[[39,39],1],[[6,[12,[46]],6,[12,[46]],2],[[4,[2]]]],[[34,34],34],[[20,20],20],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[],34],[[],20],[[],35],[[],36],[[],37],[[],38],[[],39],[[34,34],1],[[20,20],1],[[35,35],1],[[36,36],1],[[37,37],1],[[47,47],1],[[43,43],1],[[38,38],1],[[39,39],1],[[44,44],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[34,48]],[[20,48]],[[35,48]],[[36,48]],[[37,48]],[[38,48]],[[39,48]],[[6,39,49,49],4],[[6,47],[[4,[40]]]],[[6,43],4],[[34,13],14],[[34,13],14],[[34,13],14],[[34,13],14],[[34,13],14],[[20,13],14],[[20,13],14],[[20,13],14],[[20,13],14],[[20,13],14],[[35,13],14],[[35,13],14],[[35,13],14],[[35,13],14],[[35,13],14],[[36,13],14],[[36,13],14],[[36,13],14],[[36,13],14],[[36,13],14],[[37,13],14],[[37,13],14],[[37,13],14],[[37,13],14],[[37,13],14],[[47,13],14],[[43,13],14],[[38,13],14],[[38,13],14],[[38,13],14],[[38,13],14],[[38,13],14],[[39,13],14],[[39,13],14],[[39,13],14],[[39,13],14],[[39,13],14],[[44,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,[[12,[34]]]],[40,[[12,[20]]]],[41,[[12,[35]]]],[40,[[12,[36]]]],[40,[[12,[37]]]],[42,[[12,[38]]]],[40,[[12,[39]]]],[40,34],[40,20],[41,35],[40,36],[40,37],[42,38],[40,39],[40,34],[40,20],[41,35],[40,36],[40,37],[42,38],[40,39],[48,34],[48,20],[48,35],[48,36],[48,37],[48,38],[48,39],[[34,16]],[[20,16]],[[35,16]],[[36,16]],[[37,16]],[[47,16]],[[43,16]],[[38,16]],[[39,16]],[[44,16]],[[34,34]],[[20,20]],[[35,35]],[[36,36]],[[37,37]],[[38,38]],[[39,39]],[[34,34],34],[[20,20],20],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[34,34],1],[[20,20],1],[[35,35],1],[[36,36],1],[[37,37],1],[[38,38],1],[[39,39],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,1],[20,1],[35,1],[36,1],[37,1],[38,1],[39,1],[34,1],[20,1],[35,1],[36,1],[37,1],[38,1],[39,1],[34,34],[20,20],[35,35],[36,36],[37,37],[38,38],[39,39],[[[0,[18,19]],20,21],[[4,[6]]]],[[6,[0,[18,19]],20,21],[[4,[6]]]],[[34,34],[[12,[45]]]],[[20,20],[[12,[45]]]],[[35,35],[[12,[45]]]],[[36,36],[[12,[45]]]],[[37,37],[[12,[45]]]],[[38,38],[[12,[45]]]],[[39,39],[[12,[45]]]],[[44,44],[[12,[45]]]],[[6,49,49,44],4],[[6,49,49],4],[[[0,[18,19]]],[[4,[50]]]],[[6,[0,[18,19]]],[[4,[50]]]],[[34,34]],[[20,20]],[[35,35]],[[36,36]],[[37,37]],[[38,38]],[[39,39]],[[[12,[6]],[0,[18,19]],[12,[6]],[0,[18,19]]],4],[[[12,[6]],[0,[18,19]],[12,[6]],[0,[18,19]],35],4],[[34,34,1]],[[20,20,1]],[[35,35,1]],[[36,36,1]],[[37,37,1]],[[38,38,1]],[[39,39,1]],[[6,[12,[46]],6,[12,[46]],2,38],[[4,[2]]]],[[34,34],34],[[20,20],20],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[34,34]],[[20,20]],[[35,35]],[[36,36]],[[37,37]],[[38,38]],[[39,39]],[[34,34],34],[[20,20],20],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[6,6,2,38],[[4,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,34]],[[20,20]],[[35,35]],[[36,36]],[[37,37]],[[38,38]],[[39,39]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[34,34],34],[[20,20],20],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[6,[52,[[53,[[52,[51]]]]]],38],[[4,[2]]]],[[],1],0,0,0,[[]],[[]],[[]],[[]],0,[54,54],[[]],0,[55],[[54,54],1],[[55,55],1],[[],1],[[],1],0,[[54,13],14],[[55,13],14],[[]],[[]],[[],[[4,[55]]]],[[54,16]],[[55,16]],0,[[]],[[]],[[]],0,[55,12],[[]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],0,0,0,0,0,0,[[],56],[[],57],[[56,56],56],[[57,57],57],[[56,56]],[[57,57]],[[56,56],56],[[57,57],57],[[56,56]],[[57,57]],[56,42],[57,40],[[56,56],56],[[57,57],57],[[56,56]],[[57,57]],[[]],[[]],[[]],[[]],[56,56],[57,57],[[]],[[]],[[56,56],45],[[57,57],45],[56,56],[57,57],[[56,56],1],[[57,57],1],[[11,57],4],[[56,56],56],[[57,57],57],[[],56],[[],57],[[56,56],1],[[57,57],1],[[],1],[[],1],[[56,48]],[[57,48]],[[58,11,56],4],[[56,13],14],[[56,13],14],[[56,13],14],[[56,13],14],[[56,13],14],[[57,13],14],[[57,13],14],[[57,13],14],[[57,13],14],[[57,13],14],[[]],[[]],[42,[[12,[56]]]],[40,[[12,[57]]]],[42,56],[40,57],[42,56],[40,57],[48,56],[48,57],[[56,16]],[[57,16]],[[[52,[51]],11],4],[[56,56]],[[57,57]],[[56,56],56],[[57,57],57],[[56,56],1],[[57,57],1],[[]],[[]],[56,1],[57,1],[56,1],[57,1],[56,56],[57,57],[[56,56],[[12,[45]]]],[[57,57],[[12,[45]]]],[[56,56]],[[57,57]],[[56,56,1]],[[57,57,1]],[[56,56],56],[[57,57],57],[[56,56]],[[57,57]],[[56,56],56],[[57,57],57],[[]],[[]],[[56,56]],[[57,57]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[56,56],56],[[57,57],57],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],59],[[],60],[[59,59],59],[[60,60],60],[[59,59]],[[60,60]],[[59,59],59],[[60,60],60],[[59,59]],[[60,60]],[59,61],[60,40],[[59,59],59],[[60,60],60],[[59,59]],[[60,60]],[[]],[[]],[[]],[[]],[59,59],[60,60],[[]],[[]],[[59,59],45],[[60,60],45],[59,59],[60,60],[[59,59],1],[[60,60],1],[[59,59],59],[[60,60],60],[[],59],[[],60],[[59,59],1],[[60,60],1],[[],1],[[],1],[[59,48]],[[60,48]],[[59,13],14],[[59,13],14],[[59,13],14],[[59,13],14],[[59,13],14],[[60,13],14],[[60,13],14],[[60,13],14],[[60,13],14],[[60,13],14],[[]],[[]],[61,[[12,[59]]]],[40,[[12,[60]]]],[61,59],[40,60],[61,59],[40,60],[48,59],[48,60],[[59,16]],[[60,16]],[[59,59]],[[60,60]],[[59,59],59],[[60,60],60],[[59,59],1],[[60,60],1],[[]],[[]],[59,1],[60,1],[59,1],[60,1],[[[12,[[0,[18,19]]]],[0,[18,19]],[12,[[0,[18,19]]]],59,[12,[[0,[18,19]]]]],4],[59,59],[60,60],[[59,59],[[12,[45]]]],[[60,60],[[12,[45]]]],[[59,59]],[[60,60]],[[59,59,1]],[[60,60,1]],[[59,59],59],[[60,60],60],[[59,59]],[[60,60]],[[59,59],59],[[60,60],60],[[]],[[]],[[59,59]],[[60,60]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[[0,[18,19]]],4],[[[0,[18,19]],60],4],[[59,59],59],[[60,60],60],0,0,0,0,0,0,0,0,0,0,0,[[],62],[[],63],[[62,62],62],[[63,63],63],[[62,62]],[[63,63]],[[62,62],62],[[63,63],63],[[62,62]],[[63,63]],[62,40],[63,40],[[62,62],62],[[63,63],63],[[62,62]],[[63,63]],[[]],[[]],[[]],[[]],[[]],[[]],[62,62],[63,63],[64,64],[[]],[[]],[[]],[[62,62],45],[[63,63],45],[62,62],[63,63],[[62,62],1],[[63,63],1],[[62,62],62],[[63,63],63],[[],62],[[],63],[[62,62],1],[[63,63],1],[[64,64],1],[[],1],[[],1],[[],1],[[62,48]],[[63,48]],[64,65],[[62,13],14],[[62,13],14],[[62,13],14],[[62,13],14],[[62,13],14],[[63,13],14],[[63,13],14],[[63,13],14],[[63,13],14],[[63,13],14],[[64,13],14],[[]],[[]],[[]],[40,[[12,[62]]]],[40,[[12,[63]]]],[40,62],[40,63],[40,62],[40,63],[48,62],[48,63],[[62,16]],[[63,16]],[[64,16]],[[62,62]],[[63,63]],[[62,62],62],[[63,63],63],[[62,62],1],[[63,63],1],[[]],[[]],[[]],[62,1],[63,1],[62,1],[63,1],0,[66,4],[66,[[4,[64]]]],[[67,62,21,[12,[64]]],[[4,[66]]]],[[66,[52,[51]],41],[[4,[2]]]],[66,[[4,[64]]]],[[66,[52,[51]],41],4],[66,[[4,[64]]]],[[66,64],[[4,[64]]]],[67,4],[[65,65,65,65],64],[62,62],[63,63],[[62,62],[[12,[45]]]],[[63,63],[[12,[45]]]],[[62,62]],[[63,63]],[[62,62,1]],[[63,63,1]],[[62,62],62],[[63,63],63],[[62,62]],[[63,63]],[[62,62],62],[[63,63],63],[[]],[[]],[[]],[[62,62]],[[63,63]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[62,62],62],[[63,63],63],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],68],[[68,68],68],[[68,68]],[[68,68],68],[[68,68]],[68,40],[[68,68],68],[[68,68]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,68],[[]],[[68,68],45],[68,68],[[68,68],1],[[68,68],68],[69],[[],68],[[68,68],1],[[],1],[[68,48]],[[70,13],14],[[69,13],14],[[68,13],14],[[68,13],14],[[68,13],14],[[68,13],14],[[68,13],14],[[71,13],14],[[]],[[]],[[]],[[]],[40,[[12,[68]]]],[40,68],[40,68],[48,68],[[68,16]],[[],[[4,[69]]]],[[[0,[18,19]]],[[4,[42]]]],[70,42],[[68,68]],[[68,68],68],[[68,68],1],[[]],[[]],[[]],[[]],[69],[[]],[68,1],[68,1],[69,71],[70,11],[71,12],[68,68],[[68,68],[[12,[45]]]],[[68,68]],[[68,68,1]],[[68,68],68],[[68,68]],[[68,68],68],[[]],[69,[[52,[70]]]],[[68,68]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[68,68],68],0,0,0,0,0,0,0,0,0,0,0,0,[[],72],[73,6],[[72,72],72],[[72,72]],[[72,72],72],[[72,72]],[72,74],[[72,72],72],[[72,72]],[[]],[[]],[[]],[[]],[73,73],[72,72],[[]],[[]],[[72,72],45],[72,72],[[72,72],1],[[72,72],72],[[],72],[[73,73],1],[[72,72],1],[[],1],[[],1],[73,72],[[72,48]],[[73,13],14],[[72,13],14],[[72,13],14],[[72,13],14],[[72,13],14],[[72,13],14],[[]],[[]],[74,[[12,[72]]]],[74,72],[74,72],[48,72],[[73,16]],[[72,16]],[[72,72]],[[72,72],72],[[72,72],1],[[]],[[]],[72,1],[72,1],[[6,72],73],[72,72],[[72,72],[[12,[45]]]],[[[52,[73]],40],[[4,[40]]]],[[[52,[73]],[12,[75]],76],[[4,[40]]]],[[72,72]],[73,[[12,[72]]]],[[72,72,1]],[[73,72]],[[72,72],72],[[72,72]],[[72,72],72],[[]],[[]],[[72,72]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[72,72],72],0,0,0,0,0,[77,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78,78],[79,79],[80,80],[[]],[[]],[[]],[77],[[78,78],1],[[79,79],1],[[77,77],1],[[],1],[[],1],[[],1],[77,81],[[78,13],[[22,[82]]]],[[79,13],14],[[80,13],14],[[77,13],14],0,[[[83,[[12,[78]]]],[83,[[12,[84]]]]],[[4,[80]]]],[85,86],[[]],[[]],[[]],[[]],[77,4],[[78,16]],[[79,16]],[[77,16]],[[]],[[]],[[]],[[]],[77,6],0,0,[[[83,[[12,[78]]]],[83,[[12,[84]]]]],[[4,[79]]]],[20,[[4,[77]]]],[77,[[4,[26]]]],[77,[[4,[26]]]],[[77,[52,[51]]],[[81,[2]]]],0,[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[77,4],[[77,[52,[51]]],[[81,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],87],[[87,87],87],[[87,87]],[[87,87],87],[[87,87]],[87,40],[[87,87],87],[[87,87]],[[]],[[]],[[]],[[]],[[88,[52,[51]],87,[12,[40]]],[[4,[85]]]],[87,87],[89,89],[[]],[[]],[[87,87],45],[87,87],[[87,87],1],[[],2],[[],89],[[87,87],87],[[],87],[[87,87],1],[[89,89],1],[[],1],[[],1],[[87,48]],[[87,13],14],[[87,13],14],[[87,13],14],[[87,13],14],[[87,13],14],[[89,13],14],[[]],[[]],[40,[[12,[87]]]],[40,87],[40,87],[48,87],[[87,16]],[[89,16]],[[87,87]],[[87,87],87],[[87,87],1],[[]],[[]],[87,1],[87,1],[[89,2],[[4,[1]]]],[[],89],[87,87],[[87,87],[[12,[45]]]],[[87,87]],[85,[[4,[89]]]],[[85,89],4],[[],4],[[87,87,1]],[[89,2],4],[[6,87],4],[[87,87],87],[[87,87]],[[87,87],87],[[]],[[]],[[87,87]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[87,87],87],[[89,2],4],[87,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[6,[[4,[90]]]],[[[93,[[92,[91]]]]],[[4,[94]]]],[[95,2],[[4,[94]]]],[[[52,[[93,[91]]]],[12,[75]]],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[93,[[92,[91]]]]],[[4,[90]]]],[96,96],[97,97],[98,98],[90,90],[[]],[[]],[[]],[[]],[[96,96],45],[[97,97],45],[[98,98],45],[91],[[99,6,49,[52,[51]],40,100,97],99],[[99,6,49,[52,[51]],40,100,97],99],[[96,96],1],[[97,97],1],[[98,98],1],[[90,90],1],[[],1],[[],1],[[],1],[[],1],[[[93,[[92,[91]]]]],4],[[95,2],4],[91,6],[99,95],[[91,13],14],[[95,13],14],[[96,13],14],[[97,13],14],[[98,13],14],[[90,13],14],[[99,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,40,100],[[93,[[92,[91]]]]]],[[6,49,101,2,40,100,97],[[93,[[92,[91]]]]]],[[6,49,[52,[51]],40,100,97],[[93,[[92,[91]]]]]],[[6,49,101,2,40,100,97],[[93,[[92,[91]]]]]],[[6,49,[52,[51]],40,100,97],[[93,[[92,[91]]]]]],[[[93,[[92,[91]]]],96],4],[[96,16]],[[97,16]],[[98,16]],[[90,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[95,1],[95,2],[91,[[12,[97]]]],[[95,98,100],4],[[95,98,100],4],[91,2],[91,49],[[96,96],[[12,[45]]]],[[97,97],[[12,[45]]]],[[98,98],[[12,[45]]]],[91,40],[[[93,[[92,[91]]]]],4],[[[93,[[92,[91]]]],100]],[91,102],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[2,99],[[[93,[[92,[91]]]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],103],[[],104],[[103,103],103],[[104,104],104],[[103,103]],[[104,104]],[[103,103],103],[[104,104],104],[[103,103]],[[104,104]],[103,40],[104,40],[[103,103],103],[[104,104],104],[[103,103]],[[104,104]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[103,103],[105,105],[104,104],[106,106],[[]],[[]],[[]],[[]],[[103,103],45],[[104,104],45],[103,103],[104,104],[[103,103],1],[[104,104],1],[106,17],[[103,103],103],[[104,104],104],[[],103],[[],104],[[],106],[[],[[4,[6]]]],[104,[[4,[6]]]],[[6,105,6,[83,[[12,[106]]]]],4],[[6,[52,[106]],94],[[4,[2]]]],[[103,103],1],[[105,105],1],[[104,104],1],[[106,106],1],[[],1],[[],1],[[],1],[[],1],[106,103],[[103,48]],[[104,48]],[[103,13],14],[[103,13],14],[[103,13],14],[[103,13],14],[[103,13],14],[[105,13],14],[[104,13],14],[[104,13],14],[[104,13],14],[[104,13],14],[[104,13],14],[[106,13],14],[[]],[[]],[[]],[[]],[40,[[12,[103]]]],[40,[[12,[104]]]],[40,103],[40,104],[40,103],[40,104],[48,103],[48,104],[[103,16]],[[105,16]],[[104,16]],[[106,16]],[[103,103]],[[104,104]],[[103,103],103],[[104,104],104],[[103,103],1],[[104,104],1],[[]],[[]],[[]],[[]],[103,1],[104,1],[103,1],[104,1],[[103,17],106],[103,103],[104,104],[[103,103],[[12,[45]]]],[[104,104],[[12,[45]]]],[[103,103]],[[104,104]],[[103,103,1]],[[104,104,1]],[[103,103],103],[[104,104],104],[[103,103]],[[104,104]],[[103,103],103],[[104,104],104],[[]],[[]],[[]],[[]],[[103,103]],[[104,104]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[103,103],103],[[104,104],104],0,0,0,0,[[],107],[[107,107],107],[[107,107]],[[107,107],107],[[107,107]],[107,40],[[107,107],107],[[107,107]],[[]],[[]],[107,107],[[]],[[107,107],45],[107,107],[[107,107],1],[[107,107],107],[[],107],[[107,107],1],[[],1],[[42,107],[[4,[6]]]],[[107,48]],[[107,13],14],[[107,13],14],[[107,13],14],[[107,13],14],[[107,13],14],[[]],[40,[[12,[107]]]],[40,107],[40,107],[48,107],[[107,16]],[[107,107]],[[107,107],107],[[107,107],1],[[]],[107,1],[107,1],[107,107],[[107,107],[[12,[45]]]],[[107,107]],[[107,107,1]],[[107,107],107],[[107,107]],[[107,107],107],[[]],[[107,107]],[[],22],[[],22],[[],23],[[107,107],107],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[108,[0,[18,19]],109],[[4,[110]]]],[[],109],[[],111],[108,6],[[109,109],109],[[111,111],111],[[109,109]],[[111,111]],[[109,109],109],[[111,111],111],[[109,109]],[[111,111]],[109,41],[111,40],[[109,109],109],[[111,111],111],[[109,109]],[[111,111]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[109,109],[111,111],[108,108],[110,110],[[]],[[]],[[]],[[]],[[109,109],45],[[111,111],45],[[110,110],45],[109,109],[111,111],[[109,109],1],[[111,111],1],0,[[109,109],109],[[111,111],111],[[],109],[[],111],[[109,109],1],[[111,111],1],[[110,110],1],[[],1],[[],1],[[],1],[[109,48]],[[111,48]],[[109,13],14],[[109,13],14],[[109,13],14],[[109,13],14],[[109,13],14],[[111,13],14],[[111,13],14],[[111,13],14],[[111,13],14],[[111,13],14],[[108,13],14],[[110,13],14],[[112,13],14],[[]],[[]],[[]],[[]],[[]],[41,[[12,[109]]]],[40,[[12,[111]]]],[41,109],[40,111],[41,109],[40,111],[48,109],[48,111],[6,108],[[109,16]],[[111,16]],[[110,16]],[111,[[4,[108]]]],[[109,109]],[[111,111]],[[109,109],109],[[111,111],111],[[109,109],1],[[111,111],1],[[]],[[]],[[]],[[]],[[]],[109,1],[111,1],[109,1],[111,1],0,0,[109,109],[111,111],[[109,109],[[12,[45]]]],[[111,111],[[12,[45]]]],[[110,110],[[12,[45]]]],[108,[[4,[[113,[112]]]]]],[[109,109]],[[111,111]],[[108,110],4],[[109,109,1]],[[111,111,1]],[[109,109],109],[[111,111],111],[[109,109]],[[111,111]],[[109,109],109],[[111,111],111],[[]],[[]],[[]],[[]],[[109,109]],[[111,111]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[109,109],109],[[111,111],111],0,0,0,0,0,0,0,0,[[],114],[[114,114],114],[[114,114]],[[114,114],114],[[114,114]],[114,42],[[114,114],114],[[114,114]],[[]],[[]],[114,114],[[]],[[114,114],45],[114,114],[[114,114],1],[[114,114],114],[[],114],[[114,114],1],[[],1],[[114,48]],[[114,13],14],[[114,13],14],[[114,13],14],[[114,13],14],[[114,13],14],[[]],[42,[[12,[114]]]],[42,114],[42,114],[48,114],[[114,16]],[[114,114]],[[114,114],114],[[114,114],1],[[]],[114,1],[114,1],[[11,114],[[4,[6]]]],[114,114],[[114,114],[[12,[45]]]],[[114,114]],[[114,114,1]],[[114,114],114],[[114,114]],[[114,114],114],[[]],[[114,114]],[[],22],[[],22],[[],23],[[114,114],114],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],115],[[],116],[[],117],[[],118],[[],119],[[115,115],115],[[116,116],116],[[117,117],117],[[118,118],118],[[119,119],119],[[115,115]],[[116,116]],[[117,117]],[[118,118]],[[119,119]],[[115,115],115],[[116,116],116],[[117,117],117],[[118,118],118],[[119,119],119],[[115,115]],[[116,116]],[[117,117]],[[118,118]],[[119,119]],[115,40],[116,40],[117,40],[118,40],[119,40],[[115,115],115],[[116,116],116],[[117,117],117],[[118,118],118],[[119,119],119],[[115,115]],[[116,116]],[[117,117]],[[118,118]],[[119,119]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[115,115],[116,116],[117,117],[120,120],[118,118],[119,119],[[]],[[]],[[]],[[]],[[]],[[]],[[115,115],45],[[116,116],45],[[117,117],45],[[120,120],45],[[118,118],45],[[119,119],45],[115,115],[116,116],[117,117],[118,118],[119,119],[[115,115],1],[[116,116],1],[[117,117],1],[[118,118],1],[[119,119],1],[[115,115],115],[[116,116],116],[[117,117],117],[[118,118],118],[[119,119],119],[[],115],[[],116],[[],117],[[],118],[[],119],[[115,115],1],[[116,116],1],[[117,117],1],[[120,120],1],[[118,118],1],[[119,119],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[115,48]],[[116,48]],[[117,48]],[[118,48]],[[119,48]],[[115,13],14],[[115,13],14],[[115,13],14],[[115,13],14],[[115,13],14],[[116,13],14],[[116,13],14],[[116,13],14],[[116,13],14],[[116,13],14],[[117,13],14],[[117,13],14],[[117,13],14],[[117,13],14],[[117,13],14],[[120,13],14],[[118,13],14],[[118,13],14],[[118,13],14],[[118,13],14],[[118,13],14],[[119,13],14],[[119,13],14],[[119,13],14],[[119,13],14],[[119,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[40,[[12,[115]]]],[40,[[12,[116]]]],[40,[[12,[117]]]],[40,[[12,[118]]]],[40,[[12,[119]]]],[40,115],[40,116],[40,117],[40,118],[40,119],[40,115],[40,116],[40,117],[40,118],[40,119],[48,115],[48,116],[48,117],[48,118],[48,119],[[115,16]],[[116,16]],[[117,16]],[[120,16]],[[118,16]],[[119,16]],[[115,115]],[[116,116]],[[117,117]],[[118,118]],[[119,119]],[[115,115],115],[[116,116],116],[[117,117],117],[[118,118],118],[[119,119],119],[[115,115],1],[[116,116],1],[[117,117],1],[[118,118],1],[[119,119],1],[[]],[[]],[[]],[[]],[[]],[[]],[115,1],[116,1],[117,1],[118,1],[119,1],[115,1],[116,1],[117,1],[118,1],[119,1],[[101,121,120],4],[[101,121],4],[119,4],[[101,121,115,116,6,49],[[4,[101]]]],[[101,121,115],4],[[101,121,121,117,[12,[101]]],[[4,[101]]]],[[101,121,118],4],[[101,121],4],[[],4],[[101,121],4],[115,115],[116,116],[117,117],[118,118],[119,119],[[115,115],[[12,[45]]]],[[116,116],[[12,[45]]]],[[117,117],[[12,[45]]]],[[120,120],[[12,[45]]]],[[118,118],[[12,[45]]]],[[119,119],[[12,[45]]]],[[115,115]],[[116,116]],[[117,117]],[[118,118]],[[119,119]],[[115,115,1]],[[116,116,1]],[[117,117,1]],[[118,118,1]],[[119,119,1]],[[[0,[18,19]],20,21],[[4,[6]]]],[[[0,[18,19]]],4],[[115,115],115],[[116,116],116],[[117,117],117],[[118,118],118],[[119,119],119],[[115,115]],[[116,116]],[[117,117]],[[118,118]],[[119,119]],[[115,115],115],[[116,116],116],[[117,117],117],[[118,118],118],[[119,119],119],[[]],[[]],[[]],[[]],[[]],[[]],[[115,115]],[[116,116]],[[117,117]],[[118,118]],[[119,119]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[115,115],115],[[116,116],116],[[117,117],117],[[118,118],118],[[119,119],119],0,0,0,0,0,0,0,0,0,0,0,0,[[],122],[[122,122],122],[[122,122]],[[122,122],122],[[122,122]],[122,40],[[122,122],122],[[122,122]],[[]],[[]],[122,122],[[]],[[122,122],45],[122,122],[[122,122],1],[[122,122],122],[[],122],[[122,122],1],[[],1],[[122,48]],[[122,13],14],[[122,13],14],[[122,13],14],[[122,13],14],[[122,13],14],[[]],[40,[[12,[122]]]],[40,122],[40,122],[48,122],[[],[[4,[122]]]],[[122,16]],[[122,122]],[[122,122],122],[[122,122],1],[[]],[122,1],[122,1],[122,122],[[122,122],[[12,[45]]]],[[122,122]],[122,[[4,[122]]]],[[122,122,1]],[[122,122],122],[[122,122]],[[122,122],122],[[]],[[122,122]],[[],22],[[],22],[[],23],[[122,122],122],0,[[123,[83,[[12,[124]]]]],4],[[],123],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],125],[85,4],[[125,125],125],[[125,125]],[[125,125],125],[[125,125]],[125,40],[[125,125],125],[[125,125]],[[]],[[]],[[]],[[]],[[]],[[]],[126,126],[127,127],[125,125],[[]],[[]],[[]],[[126,126],45],[[127,127],45],[[125,125],45],[125,125],[[85,[83,[[12,[124]]]]],4],[[125,125],1],[[85,[83,[[12,[124]]]]],4],[[125,125],125],[[],125],[[126,126],1],[[127,127],1],[[125,125],1],[[],1],[[],1],[[],1],[[125,48]],[[126,13],14],[[127,13],14],[[125,13],14],[[125,13],14],[[125,13],14],[[125,13],14],[[125,13],14],[[]],[[]],[[]],[40,[[12,[125]]]],[40,125],[40,125],[48,125],[85,[[4,[128]]]],[85,[[4,[129]]]],[85,[[4,[130]]]],[[126,16]],[[127,16]],[[125,16]],[[125,125]],[85,4],[[125,125],125],[[125,125],1],[[]],[[]],[[]],[125,1],[125,1],[85,4],[125,125],[[126,126],[[12,[45]]]],[[127,127],[[12,[45]]]],[[125,125],[[12,[45]]]],[[85,131],[[4,[128]]]],[[125,125]],[[85,125],4],[[125,125,1]],[[85,125],4],[[85,129],4],[[85,130],4],[[85,[83,[[12,[124]]]]],4],[[125,125],125],[[125,125]],[[125,125],125],[[85,[83,[[12,[124]]]]],4],[[85,[83,[[12,[124]]]]],4],[[85,[83,[[12,[124]]]]],4],[[]],[[]],[[]],[[125,125]],[[],4],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[125,125],125],[[85,131,101],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],132],[133,[[12,[17]]]],[[132,132],132],[[132,132]],[[132,132],132],[[132,132]],[132,41],[[132,132],132],[[132,132]],[133,[[12,[17]]]],[133,[[12,[17]]]],[133,[[12,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[134,134],[135,135],[132,132],[133,133],[[]],[[]],[[]],[[]],[[134,134],45],[[135,135],45],[[132,132],45],[132,132],[[132,132],1],[[],132],[[],133],[[132,132],132],[[],132],[[134,134],1],[[135,135],1],[[132,132],1],[[133,133],1],[[],1],[[],1],[[],1],[[],1],[[132,48]],[[134,13],14],[[135,13],14],[[132,13],14],[[132,13],14],[[132,13],14],[[132,13],14],[[132,13],14],[[133,13],14],[[]],[[]],[[]],[[]],[41,[[12,[132]]]],[41,132],[41,132],[48,132],[[134,16]],[[135,16]],[[132,16]],[[133,16]],[133,[[12,[17]]]],[133,[[12,[17]]]],[133,[[12,[17]]]],[[132,132]],[[132,132],132],[[132,132],1],[[]],[[]],[[]],[[]],[132,1],[132,1],[132,132],[133,[[12,[17]]]],[[134,134],[[12,[45]]]],[[135,135],[[12,[45]]]],[[132,132],[[12,[45]]]],[[134,[0,[18,19]],40],[[4,[133]]]],[[134,[0,[18,19]]],4],[[134,[0,[18,19]],135,[0,[18,19]]],4],[[134,[0,[18,19]],40,133,132],4],[[134,[12,[[0,[18,19]]]]],4],[[132,132]],[[132,132,1]],[[133,17]],[[133,17]],[[133,17]],[[133,17]],[[133,17]],[[133,17]],[[132,132],132],[[132,132]],[[132,132],132],[[]],[[]],[[]],[[]],[[132,132]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[132,132],132],0,0,0,0,0,0,[[]],[[]],[136,136],[[]],[[136,136],45],[[136,136],1],[[],1],[[136,13],14],[[]],[[136,16]],[[]],[[136,136],[[12,[45]]]],[136,[[4,[137]]]],[1,4],[[]],[[],22],[[],22],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[138,138],[[]],[[138,138],45],[[138,138],1],[[],1],[[138,13],14],[[]],[138,4],[[138,16]],[[]],[[138,138],[[12,[45]]]],0,[[138,[12,[139]],[12,[139]]],4],[[]],[[],22],[[],22],[[],23],0,0,0,[[]],[[]],[[]],[[]],[140],[140,140],[[]],[[140,6],1],[[],140],[[140,140],1],[[],1],[[140,[12,[6]]],141],[[140,13],14],[[141,13],14],[[]],[[]],[[140,16]],[140,[[12,[6]]]],[[140,6]],[[]],[[]],[[]],[[],140],[141,[[12,[6]]]],[141,[[12,[6]]]],[[[83,[[12,[40]]]],[83,[[12,[140]]]],[83,[[12,[140]]]],[83,[[12,[140]]]],[83,[[12,[75]]]],[83,[[12,[76]]]]],[[4,[40]]]],[[140,6]],[[[83,[[12,[40]]]],[83,[[12,[140]]]],[83,[[12,[140]]]],[83,[[12,[140]]]],[83,[[12,[142]]]]],[[4,[40]]]],[141],[[]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[6,6,[12,[49]],2],[[4,[2]]]],[[6,6,[12,[143]],2],[[4,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[76,124]],[[],144],[[],76],[124,29],[76,145],[124,29],[[144,144],144],[[144,144]],[[144,144],144],[[144,144]],[144,40],[[144,144],144],[[144,144]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[76],[124,124],[146,146],[144,144],[147,147],[76,76],[148,148],[149,149],[100,100],[102,102],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[124,124],45],[[144,144],45],[[147,147],45],[144,144],[[144,144],1],[[76,124],1],[[144,144],144],[[],144],[[],76],[[124,124],1],[[146,146],1],[[144,144],1],[[147,147],1],[[76,76],1],[[148,148],1],[[149,149],1],[[100,100],1],[[102,102],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[144,48]],[[76,76]],[149,144],[[124,13],14],[[124,13],14],[[146,13],14],[[144,13],14],[[144,13],14],[[144,13],14],[[144,13],14],[[144,13],14],[[147,13],14],[[76,13],14],[[148,13],14],[[149,13],14],[[100,13],14],[[102,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[150,102],[40,[[12,[144]]]],[40,144],[40,144],[48,144],[29,[[4,[124]]]],[149,148],[[124,16]],[[146,16]],[[144,16]],[[147,16]],[[76,16]],[[148,16]],[[149,16]],[[100,16]],[[102,16]],[[144,144]],[[144,144],144],[[144,144],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[144,1],[144,1],[[],146],[[85,[83,[[12,[124]]]]],4],[[85,[83,[[12,[124]]]]],4],[149,76],[[148,144,76],149],[100,102],[146,[[12,[124]]]],[144,144],[[124,124],[[12,[45]]]],[[144,144],[[12,[45]]]],[[147,147],[[12,[45]]]],[[147,[12,[76]],[12,[76]]],4],[124,4],[[144,144]],[[76,124]],[[144,144,1]],[[124,149],[[4,[149]]]],[102,150],[[124,148],[[4,[148]]]],[[147,[12,[76]],[12,[76]]],4],[[144,144],144],[[144,144]],[[144,144],144],[76,4],[[],[[4,[76]]]],[76,4],[[76,147],[[4,[76]]]],[76,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],26],[[144,144]],[[],22],[30,[[4,[124]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,[[144,144],144],[76,[[4,[124]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[],151],[152,6],[[151,151],151],[[151,151]],[[151,151],151],[[151,151]],[151,40],[[151,151],151],[[151,151]],[[]],[[]],[[]],[[]],[[]],[[]],[153,153],[151,151],[[]],[[]],[[151,151],45],[151,151],[[151,151],1],[[151,151],151],[152],[[],151],[[153,153],1],[[151,151],1],[[152,152],1],[[],1],[[],1],[[],1],[[151,48]],[[153,13],[[22,[82]]]],[[151,13],14],[[151,13],14],[[151,13],14],[[151,13],14],[[151,13],14],[[152,13],14],[[]],[[]],[[]],[40,[[12,[151]]]],[40,151],[40,151],[48,151],[[153,16]],[[151,16]],[[152,16]],[[151,151]],[[151,151],151],[[151,151],1],[[]],[[]],[[]],[[]],[151,1],[151,1],[76,[[4,[152]]]],[152,12],[151,151],[[151,151],[[12,[45]]]],[152,[[4,[[12,[153]]]]]],[[151,151]],[[151,151,1]],[[152,76],4],0,0,[[6,76,151],[[4,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[151,151],151],[[151,151]],[[151,151],151],[[]],[[]],[[151,151]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[151,151],151],[[76,151],[[4,[152]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[6,[[4,[6]]]],[[6,154],[[4,[6]]]],[155,[[156,[51]]]],0,0,[157,11],[157,11],[[],154],[[],158],[[],159],[160,[[12,[[52,[51]]]]]],[161],[160,162],[160,162],[[6,161],4],[[154,154],154],[[158,158],158],[[154,154]],[[158,158]],[[154,154],154],[[158,158],158],[[154,154]],[[158,158]],[154,40],[158,40],[[154,154],154],[[158,158],158],[[154,154]],[[158,158]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[163,41],[164,164],[165,165],[166,166],[162,162],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[159,159],[173,173],[160,160],[161,161],[174,174],[157,157],[155,155],[163,163],[175,175],[176,176],[154,154],[158,158],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[154,154],45],[[158,158],45],0,0,0,0,0,[180,181],0,[154,154],[158,158],[[6,161],4],[[154,154],1],[[158,158],1],[[],177],[[154,154],154],[[158,158],158],[[],154],[[],158],[[164,164],1],[[165,165],1],[[166,166],1],[[162,162],1],[[167,167],1],[[168,168],1],[[169,169],1],[[170,170],1],[[171,171],1],[[172,172],1],[[159,159],1],[[173,173],1],[[160,160],1],[[161,161],1],[[174,174],1],[[157,157],1],[[155,155],1],[[163,163],1],[[175,175],1],[[176,176],1],[[154,154],1],[[158,158],1],[[177,177],1],[[178,178],1],[[179,179],1],[[180,180],1],[[181,181],1],[[182,182],1],[[183,183],1],[[184,184],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[154,48]],[[158,48]],[161,170],[155,170],0,[[164,13],[[22,[82]]]],[[165,13],[[22,[82]]]],[[166,13],[[22,[82]]]],[[162,13],[[22,[82]]]],[[167,13],[[22,[82]]]],[[168,13],[[22,[82]]]],[[169,13],[[22,[82]]]],[[170,13],14],[[171,13],14],[[171,13],14],[[172,13],14],[[172,13],14],[[159,13],14],[[159,13],14],[[173,13],14],[[173,13],14],[[160,13],14],[[160,13],14],[[161,13],14],[[161,13],14],[[174,13],14],[[174,13],14],[[157,13],14],[[157,13],14],[[155,13],14],[[155,13],14],[[163,13],14],[[163,13],14],[[175,13],14],[[176,13],14],[[154,13],14],[[154,13],14],[[154,13],14],[[154,13],14],[[154,13],14],[[158,13],14],[[158,13],14],[[158,13],14],[[158,13],14],[[158,13],14],[[177,13],14],[[178,13],14],[[179,13],14],[[180,13],14],[[181,13],14],[[182,13],14],[[183,13],14],[[[187,[[0,[[185,[[52,[[53,[[52,[51]]]]]]]],186]],[0,[[185,[[52,[183]]]],186]]]],13],14],[[[188,[[0,[[185,[[52,[[53,[[52,[51]]]]]]]],186]]]],13],14],[[184,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[189,177],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,[[12,[154]]]],[40,[[12,[158]]]],[40,154],[40,158],[40,154],[40,158],[30,[[12,[170]]]],[48,154],[48,158],[190,171],[191,172],[192,159],[193,173],[6,4],[6,[[4,[161]]]],[6,[[4,[161]]]],[[6,194],4],[177,195],[174,41],[155,2],[[164,16]],[[165,16]],[[166,16]],[[162,16]],[[167,16]],[[168,16]],[[169,16]],[[170,16]],[[171,16]],[[172,16]],[[159,16]],[[173,16]],[[160,16]],[[161,16]],[[174,16]],[[157,16]],[[155,16]],[[163,16]],[[176,16]],[[154,16]],[[158,16]],[[184,16]],[155,196],[155,2],[[154,154]],[[158,158]],[[154,154],154],[[158,158],158],[[154,154],1],[[158,158],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[171,172],[154,1],[158,1],[154,1],[158,1],[[6,2],4],0,0,0,0,0,0,0,0,[[172,196],171],[[51,51,51,51],159],[[196,196,196,196,196,196,196,196],173],[[[0,[18,19]]],[[4,[160]]]],[[41,41],174],[[29,29],157],[[41,41],163],[[],177],[[159,[12,[159]]],178],[173,179],[[[52,[51]]],[[4,[160]]]],[[29,29],161],[171,161],[[41,41],161],[[[0,[18,19]]],[[4,[161]]]],[[51,51,51,51],172],[[196,196,196,196,196,196,196,196],172],[[41,41],161],[181,[[12,[182]]]],[154,154],[158,158],[159,[[156,[51]]]],[[154,154],[[12,[45]]]],[[158,158],[[12,[45]]]],[160,[[12,[197]]]],[160,2],[174,41],[177,86],[155,51],[171,196],[163,41],[155,196],[[6,[52,[51]],158],[[4,[2]]]],[[6,[52,[51]]],4],[[6,48,158,[12,[75]]],[[4,[[113,[180]]]]]],[[6,[52,[[53,[[52,[51]]]]]],[12,[[113,[51]]]],158],[[4,[180]]]],[[154,154]],[[158,158]],0,0,0,[173,[[156,[196]]]],[[6,[52,[51]],158],[[4,[2]]]],[[6,48,158],[[4,[[113,[2]]]]]],[[6,[52,[[53,[[52,[51]]]]]],[52,[183]],158,[12,[161]]],[[4,[2]]]],[[6,[52,[51]],161,158],[[4,[2]]]],[6,4],[[154,154,1]],[[158,158,1]],[[6,198],4],[[6,184],4],0,0,0,0,0,0,0,0,0,0,0,0,0,[[167,2],[[4,[161]]]],0,[[170,175,154,[83,[[12,[176]]]]],[[4,[6]]]],[[170,175,[83,[[12,[176]]]],154],4],0,0,[[154,154],154],[[158,158],158],[[154,154]],[[158,158]],0,0,[[154,154],154],[[158,158],158],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[171,190],[172,191],[159,192],[173,193],[171,26],[161,26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[154,154]],[[158,158]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[30,[[4,[175]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[177,199],[[154,154],154],[[158,158],158],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[222,222],[223,223],[224,224],[225,225],[226,226],[227,227],[228,228],[229,229],[230,230],[231,231],[232,232],[233,233],[234,234],[235,235],[236,236],[237,237],[238,238],[239,239],[240,240],[241,241],[242,242],[243,243],[244,244],[245,245],[246,246],[247,247],[248,248],[249,249],[[[251,[250]]],[[251,[250]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],251],[[200,200],1],[[201,201],1],[[202,202],1],[[203,203],1],[[204,204],1],[[205,205],1],[[206,206],1],[[207,207],1],[[208,208],1],[[209,209],1],[[210,210],1],[[211,211],1],[[212,212],1],[[213,213],1],[[214,214],1],[[215,215],1],[[216,216],1],[[217,217],1],[[218,218],1],[[219,219],1],[[220,220],1],[[221,221],1],[[222,222],1],[[223,223],1],[[224,224],1],[[225,225],1],[[226,226],1],[[227,227],1],[[228,228],1],[[229,229],1],[[230,230],1],[[231,231],1],[[232,232],1],[[233,233],1],[[234,234],1],[[235,235],1],[[236,236],1],[[237,237],1],[[238,238],1],[[239,239],1],[[240,240],1],[[241,241],1],[[242,242],1],[[243,243],1],[[244,244],1],[[245,245],1],[[246,246],1],[[247,247],1],[[248,248],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[200,13],14],[[201,13],14],[[202,13],14],[[203,13],14],[[204,13],14],[[205,13],14],[[206,13],14],[[207,13],14],[[208,13],14],[[209,13],14],[[210,13],14],[[211,13],14],[[212,13],14],[[213,13],14],[[214,13],14],[[215,13],14],[[216,13],14],[[217,13],14],[[218,13],14],[[219,13],14],[[220,13],14],[[221,13],14],[[222,13],14],[[223,13],14],[[224,13],14],[[225,13],14],[[226,13],14],[[227,13],14],[[228,13],14],[[229,13],14],[[230,13],14],[[231,13],14],[[232,13],14],[[233,13],14],[[234,13],14],[[235,13],14],[[236,13],14],[[237,13],14],[[238,13],14],[[239,13],14],[[240,13],14],[[241,13],14],[[242,13],14],[[243,13],14],[[244,13],14],[[245,13],14],[[246,13],14],[[247,13],14],[[248,13],14],[[249,13],14],[[[251,[186]],13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[200,6],[[4,[1]]]],[[201,6],[[4,[1]]]],[[202,6],[[4,[1]]]],[[203,6],[[4,[252]]]],[[208,6],[[4,[51]]]],[[209,6],[[4,[1]]]],[[210,6],[[4,[1]]]],[[211,6],[[4,[142]]]],[[212,6],[[4,[142]]]],[[213,6],[[4,[1]]]],[[214,6],[[4,[1]]]],[[215,6],[[4,[30]]]],[[216,6],[[4,[1]]]],[[217,6],[[4,[177]]]],[[218,6],[[4,[41]]]],[[219,6],[[4,[41]]]],[[220,6],[[4,[41]]]],[[221,6],[[4,[41]]]],[[222,6],[[4,[41]]]],[[223,6],[[4,[41]]]],[[224,6],[[4,[2]]]],[[225,6],[[4,[2]]]],[[228,6],[[4,[175]]]],[[229,6],[[4,[1]]]],[[230,6],[[4,[50]]]],[[231,6],[[4,[165]]]],[[232,6],[[4,[166]]]],[[233,6],[[4,[1]]]],[[234,6],[[4,[1]]]],[[235,6],[[4,[1]]]],[[236,6],[[4,[41]]]],[[237,6],[[4,[1]]]],[[238,6],[[4,[50]]]],[[239,6],[[4,[1]]]],[[240,6],[[4,[1]]]],[[241,6],[[4,[40]]]],[[242,6],[[4,[1]]]],[[243,6],[[4,[40]]]],[[244,6],[[4,[1]]]],[[245,6],[[4,[1]]]],[[246,6],[[4,[1]]]],[[247,6],[[4,[40]]]],[[248,6],[[4,[40]]]],[[200,16]],[[201,16]],[[202,16]],[[203,16]],[[204,16]],[[205,16]],[[206,16]],[[207,16]],[[208,16]],[[209,16]],[[210,16]],[[211,16]],[[212,16]],[[213,16]],[[214,16]],[[215,16]],[[216,16]],[[217,16]],[[218,16]],[[219,16]],[[220,16]],[[221,16]],[[222,16]],[[223,16]],[[224,16]],[[225,16]],[[226,16]],[[227,16]],[[228,16]],[[229,16]],[[230,16]],[[231,16]],[[232,16]],[[233,16]],[[234,16]],[[235,16]],[[236,16]],[[237,16]],[[238,16]],[[239,16]],[[240,16]],[[241,16]],[[242,16]],[[243,16]],[[244,16]],[[245,16]],[[246,16]],[[247,16]],[[248,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[200,6,1],4],[[201,6,1],4],[[202,6,1],4],[[203,6,252],4],[[204,6,178],4],[[205,6,178],4],[[206,6,179],4],[[207,6,179],4],[[208,6,51],4],[[209,6,1],4],[[210,6,1],4],[[211,6,142],4],[[212,6,142],4],[[213,6,1],4],[[214,6,1],4],[[216,6,1],4],[[218,6,41],4],[[219,6,41],4],[[220,6,41],4],[[221,6,41],4],[[222,6,41],4],[[223,6,41],4],[[224,6,2],4],[[225,6,2],4],[[226,6,2],4],[[227,6,2],4],[[230,6,50],4],[[233,6,1],4],[[234,6,1],4],[[235,6,1],4],[[236,6,41],4],[[237,6,1],4],[[238,6,50],4],[[239,6,1],4],[[240,6,1],4],[[241,6,40],4],[[242,6,1],4],[[243,6,40],4],[[244,6,1],4],[[245,6,1],4],[[246,6,1],4],[[247,6,40],4],[[248,6,40],4],[[249,6,2],4],[[[251,[[0,[[185,[[52,[51]]]],250]]]],6,[0,[[185,[[52,[51]]]],250]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,[[253,254],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],255],[[],21],[[255,255],255],[[21,21],21],[[255,255]],[[21,21]],[[255,255],255],[[21,21],21],[[255,255]],[[21,21]],[255,256],[21,256],[[255,255],255],[[21,21],21],[[255,255]],[[21,21]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[254,254],[255,255],[21,21],[257,257],[258,258],[[]],[[]],[[]],[[]],[[]],[[255,255],45],[[21,21],45],[255,255],[21,21],[[255,255],1],[[21,21],1],0,[[255,255],255],[[21,21],21],[[],255],[[],21],[[254,254],1],[[255,255],1],[[21,21],1],[[],1],[[],1],[[],1],[[255,48]],[[21,48]],[[6,21],4],[[[12,[6]],[0,[18,19]],21,257],4],[[254,13],[[22,[82]]]],[[255,13],14],[[255,13],14],[[255,13],14],[[255,13],14],[[255,13],14],[[21,13],14],[[21,13],14],[[21,13],14],[[21,13],14],[[21,13],14],[[257,13],14],[[258,13],14],[[]],[[]],[[]],[[]],[[]],[256,[[12,[255]]]],[256,[[12,[21]]]],[256,255],[256,21],[256,255],[256,21],[48,255],[48,21],[6,[[4,[254]]]],[[6,[0,[18,19]],34],[[4,[254]]]],[[6,75,75],4],[[254,16]],[[255,16]],[[21,16]],[[255,255]],[[21,21]],[[255,255],255],[[21,21],21],[[255,255],1],[[21,21],1],[[]],[[]],[[]],[[]],[[]],[255,1],[21,1],[255,1],[21,1],[[[0,[18,19]]],[[4,[254]]]],[[[0,[18,19]],142,142],4],[259,17],[[17,17],259],[259,17],[[6,[0,[18,19]],21],4],[[[0,[18,19]],255,21,259],4],[[6,[0,[18,19]],255,21,259],4],0,[255,255],[21,21],[[255,255],[[12,[45]]]],[[21,21],[[12,[45]]]],[[255,255]],[[21,21]],[[255,255,1]],[[21,21,1]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[0,[18,19]]],[[4,[254]]]],[[255,255],255],[[21,21],21],[[255,255]],[[21,21]],[[255,255],255],[[21,21],21],[[]],[[]],[[]],[[]],[[]],[[255,255]],[[21,21]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[21,21],[[255,255],255],[[21,21],21],[[[12,[6]],[0,[18,19]],75,75,258],4],[[[0,[18,19]],142,142],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[260,261],[260,61],[260,61],[260,61],[[]],[[]],[[]],[[]],[260,260],[262,262],[[]],[[]],[[262,262],1],[[],1],[260,61],[260,61],[260,263],[260,262],[[260,13],14],[[262,13],14],[[]],[[]],0,[58,[[4,[260]]]],[[]],[[]],[260,261],[260,261],[[[0,[18,19]]],[[4,[260]]]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],264],[[264,264],264],[[264,264]],[[264,264],264],[[264,264]],[264,61],[[264,264],264],[[264,264]],[265,61],[265,266],[265,266],[265,266],[[]],[[]],[[]],[[]],[264,264],[265,265],[[]],[[]],[[264,264],45],[264,264],[[264,264],1],[[],264],[[264,264],264],[[],264],[[264,264],1],[[265,265],1],[[],1],[[],1],[[264,48]],[265,267],[265,267],[265,267],[265,61],[265,264],[[264,13],14],[[264,13],14],[[264,13],14],[[264,13],14],[[264,13],14],[[265,13],14],[265,61],[[]],[[]],[61,[[12,[264]]]],[61,264],[61,264],[48,264],[58,[[4,[265]]]],[[264,16]],[[265,16]],[[264,264]],[[264,264],264],[[264,264],1],[[]],[[]],[264,1],[264,1],[265,61],[264,264],[[264,264],[[12,[45]]]],[[264,264]],[[264,264,1]],[[[0,[18,19]]],[[4,[265]]]],[[264,264],264],[[264,264]],[[264,264],264],[[]],[[]],[[264,264]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[264,264],264],0,[[]],[[]],[268,268],[[]],[[268,268],1],[[],1],[[268,13],14],[[]],[[268,16]],[[]],[268],[268,196],[268,17],[268,17],[268,17],[268,17],[[],[[4,[268]]]],[[]],[[],22],[[],22],[[],23],[268,269],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],270],[[],271],[[],272],[[],273],[[270,270],270],[[271,271],271],[[272,272],272],[[273,273],273],[[270,270]],[[271,271]],[[272,272]],[[273,273]],[[270,270],270],[[271,271],271],[[272,272],272],[[273,273],273],[[270,270]],[[271,271]],[[272,272]],[[273,273]],[270,274],[271,274],[272,274],[273,274],[[270,270],270],[[271,271],271],[[272,272],272],[[273,273],273],[[270,270]],[[271,271]],[[272,272]],[[273,273]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,275],[84,275],[84],[[84,275],4],[[84,275],4],[[84,275],4],[84,84],[275,275],[276,276],[277,277],[278,278],[279,279],[270,270],[271,271],[272,272],[273,273],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[275,275],45],[[276,276],45],[[277,277],45],[[278,278],45],[[279,279],45],[[270,270],45],[[271,271],45],[[272,272],45],[[273,273],45],[270,270],[271,271],[272,272],[273,273],[[270,270],1],[[271,271],1],[[272,272],1],[[273,273],1],0,0,[[270,270],270],[[271,271],271],[[272,272],272],[[273,273],273],[[],270],[[],271],[[],272],[[],273],[[84,84],1],[[275,275],1],[[276,276],1],[[277,277],1],[[278,278],1],[[279,279],1],[[270,270],1],[[271,271],1],[[272,272],1],[[273,273],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[270,48]],[[271,48]],[[272,48]],[[273,48]],[[84,13],14],[[275,13],14],[[276,13],14],[[277,13],14],[[278,13],14],[[279,13],14],[[270,13],14],[[270,13],14],[[270,13],14],[[270,13],14],[[270,13],14],[[271,13],14],[[271,13],14],[[271,13],14],[[271,13],14],[[271,13],14],[[272,13],14],[[272,13],14],[[272,13],14],[[272,13],14],[[272,13],14],[[273,13],14],[[273,13],14],[[273,13],14],[[273,13],14],[[273,13],14],[280,84],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[274,[[12,[270]]]],[274,[[12,[271]]]],[274,[[12,[272]]]],[274,[[12,[273]]]],[274,270],[274,271],[274,272],[274,273],[274,270],[274,271],[274,272],[274,273],[48,270],[48,271],[48,272],[48,273],[[275,16]],[[276,16]],[[277,16]],[[278,16]],[[279,16]],[[270,16]],[[271,16]],[[272,16]],[[273,16]],0,[[270,270]],[[271,271]],[[272,272]],[[273,273]],[[270,270],270],[[271,271],271],[[272,272],272],[[273,273],273],[[270,270],1],[[271,271],1],[[272,272],1],[[273,273],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[270,1],[271,1],[272,1],[273,1],[270,1],[271,1],[272,1],[273,1],0,[270,270],[271,271],[272,272],[273,273],0,[[275,275],[[12,[45]]]],[[276,276],[[12,[45]]]],[[277,277],[[12,[45]]]],[[278,278],[[12,[45]]]],[[279,279],[[12,[45]]]],[[270,270],[[12,[45]]]],[[271,271],[[12,[45]]]],[[272,272],[[12,[45]]]],[[273,273],[[12,[45]]]],[[270,270]],[[271,271]],[[272,272]],[[273,273]],[[270,270,1]],[[271,271,1]],[[272,272,1]],[[273,273,1]],[[270,270],270],[[271,271],271],[[272,272],272],[[273,273],273],[[270,270]],[[271,271]],[[272,272]],[[273,273]],[[270,270],270],[[271,271],271],[[272,272],272],[[273,273],273],[6,4],[[6,278],4],[[6,277],4],[6,[[4,[84]]]],[6,[[4,[85]]]],[[6,40],4],[[6,276,84],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[270,270]],[[271,271]],[[272,272]],[[273,273]],[[],22],[[],22],[281,[[4,[275]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[270,270],270],[[271,271],271],[[272,272],272],[[273,273],273],0,0,0,[[75,75],75],[[142,142],142],[75,282],[142,283],[75,282],[142,283],[[]],[[]],[[]],[[]],[75,75],[142,142],[[]],[[]],[[75,75],45],[[142,142],45],[[75,30],75],[[142,30],142],[[75,75],1],[[142,142],1],[[],1],[[],1],[[75,13],14],[[75,13],14],[[142,13],14],[[142,13],14],[282,75],[269,75],[[]],[283,142],[[]],[269,75],[282,75],[[75,16]],[[142,16]],[284],[[]],[[]],[284],[284,75],[284,142],[284],[284,75],[284,142],[284],[[75,30],75],[[142,30],142],[284],[284,75],[284,142],[75,75],[142,142],[[],284],[[],284],[75,284],[142,284],[[],284],[75,284],[142,284],[[],284],[[],284],[75,284],[142,284],[[],284],[75,284],[142,284],[[75,75],[[12,[45]]]],[[142,142],[[12,[45]]]],[284],[284,75],[284,142],[[75,75],75],[[142,142],142],0,0,[[]],[[]],[[],26],[[],26],[[],22],[[],22],[[],22],[[],22],[75,128],[75,285],[142,285],[142,286],[[],23],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],287],[[],288],[289,6],[[287,287],287],[[288,288],288],[[287,287]],[[288,288]],[[287,287],287],[[288,288],288],[[287,287]],[[288,288]],[287,40],[288,40],[[287,287],287],[[288,288],288],[[287,287]],[[288,288]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[290,290],[287,287],[288,288],[291,291],[[]],[[]],[[]],[[]],[[290,290],45],[[287,287],45],[[288,288],45],[287,287],[288,288],[[287,287],1],[[288,288],1],[[287,287],287],[[288,288],288],[289],[[],287],[[],288],[[290,290],1],[[287,287],1],[[288,288],1],[[291,291],1],[[],1],[[],1],[[],1],[[],1],[[287,48]],[[288,48]],[[289,13],14],[[290,13],14],[[287,13],14],[[287,13],14],[[287,13],14],[[287,13],14],[[287,13],14],[[288,13],14],[[288,13],14],[[288,13],14],[[288,13],14],[[288,13],14],[[291,13],14],[[]],[[]],[[]],[[]],[[]],[40,[[12,[287]]]],[40,[[12,[288]]]],[40,287],[40,288],[40,287],[40,288],[48,287],[48,288],[6,289],[289,[[4,[[12,[291]]]]]],[[290,16]],[[287,16]],[[288,16]],[[287,287]],[[288,288]],[[287,287],287],[[288,288],288],[[287,287],1],[[288,288],1],[[]],[[]],[[]],[[]],[[]],[287,1],[288,1],[287,1],[288,1],[[290,287],[[4,[289]]]],[287,287],[288,288],[[290,290],[[12,[45]]]],[[287,287],[[12,[45]]]],[[288,288],[[12,[45]]]],[[287,287]],[[288,288]],[[289,291,288],4],[[287,287,1]],[[288,288,1]],[[287,287],287],[[288,288],288],[[287,287]],[[288,288]],[[287,287],287],[[288,288],288],[[]],[[]],[[]],[[]],[[287,287]],[[288,288]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[287,287],287],[[288,288],288],[289,4],[289,4],0,0,[53,[[52,[51]]]],0,[[]],[[]],[[]],[[]],[292,292],[[[53,[250]]],[[53,[250]]]],[[]],[[]],[[292,292],1],[[[53,[32]],[53,[32]]],1],[[],1],[[],1],[[292,13],14],[[[53,[186]],13],14],[[]],[[]],[[[52,[51]]],[[53,[[52,[51]]]]]],[[[52,[51]]],[[53,[[52,[51]]]]]],[[292,16]],[[[53,[293]],16]],[[]],[[]],0,[[6,[52,[51]],49],[[4,[2]]]],[[6,[52,[[53,[[52,[51]]]]]],49],[[4,[2]]]],[[85,[52,[[53,[[52,[51]]]]]],[52,[292]]],[[4,[2]]]],[[85,[52,[[53,[[52,[51]]]]]],[52,[292]]],[[4,[2]]]],[[6,[52,[51]],49],[[4,[2]]]],[[6,[52,[[53,[[52,[51]]]]]],49],[[4,[2]]]],[[6,[52,[[53,[[52,[51]]]]]]],[[4,[2]]]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[6,[52,[[53,[[52,[51]]]]]]],[[4,[2]]]],0,[[]],[[]],[294,294],[[]],[[294,294],1],[[],1],[[294,13],14],[[]],[[294,16]],[[]],[294,29],[294,29],[294,29],[294,29],[[]],[[],22],[[],22],[[],23],[[],294],[294,29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],295],[[295,295],295],[[295,295]],[[295,295],295],[[295,295]],[295,40],[[295,295],295],[[295,295]],[[]],[[]],[[]],[[]],[295,295],[296,296],[[]],[[]],[[295,295],45],[295,295],[[295,295],1],[[295,295],295],[[],295],[[295,295],1],[[296,296],1],[[],1],[[],1],[[295,48]],[[295,13],14],[[295,13],14],[[295,13],14],[[295,13],14],[[295,13],14],[[296,13],14],[[]],[[]],[40,[[12,[295]]]],[40,295],[40,295],[48,295],[[85,30],[[4,[296]]]],[[295,16]],[[296,16]],[[295,295]],[[295,295],295],[[295,295],1],[[]],[[]],[295,1],[295,1],[295,295],[[295,295],[[12,[45]]]],[296,[[12,[85]]]],[[295,295]],[[295,295,1]],[[295,295],295],[[295,295]],[[295,295],295],[[]],[[]],[[295,295]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[295,295],295],[[],[[4,[296]]]],[[[83,[[12,[85]]]],[12,[295]]],[[4,[296]]]],0,0,0,0,0,0,0,0,0,0,0,[297,298],[[]],[[]],[85,[[4,[297]]]],[297,[[4,[75]]]],[297,[[4,[75]]]],[[297,75],4],[297,297],[[]],[[297,297],45],[[297,297],1],[[],1],[[297,13],14],[[297,13],14],[298,297],[[]],[298,297],[[297,16]],[[]],[297,[[4,[75]]]],[[297,297],[[12,[45]]]],[85,[[4,[297]]]],[297,[[4,[75]]]],[[297,75],4],[[]],[[],26],[[],22],[[],22],[[],23],0,[[]],[[]],[299,299],[[]],[[299,299],1],[[],1],[[299,13],14],[[]],[[],[[4,[299]]]],[[299,16]],[[]],[299,4],[299,76],[299,76],[[]],[[],22],[[],22],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[0,[18,19]],300],4],0,0,[[],300],[301,199],[302,195],[85,86],[[300,300],300],[[300,300]],[[300,300],300],[[300,300]],[300,40],[[300,300],300],[[300,300]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[18,19]]],4],[[[0,[18,19]],[12,[301]],[12,[302]]],4],[[[0,[18,19]]],4],[301,301],[302,302],[85,85],[303,303],[304,304],[305,305],[306,306],[307,307],[308,308],[309,309],[310,310],[311,311],[300,300],[312,312],[313,313],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,4],[[85,85],45],[[300,300],45],[300,300],[[300,300],1],[[],301],[[],302],[[1,1],4],[[300,300],300],0,[6,[[4,[6]]]],[[6,6],[[4,[6]]]],[[6,6,20],[[4,[6]]]],[[],301],[[],302],0,0,[[],300],[[301,301],1],[[302,302],1],[[85,85],1],[[308,308],1],[[309,309],1],[[310,310],1],[[311,311],1],[[300,300],1],[[312,312],1],[[313,313],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[11,[52,[[185,[11]]]]],[[4,[137]]]],[[11,[52,[[185,[11]]]],[52,[[185,[11]]]]],[[4,[137]]]],[[6,11,[52,[[185,[11]]]],[52,[[185,[11]]]],34],[[4,[137]]]],[[11,[52,[[185,[11]]]]],[[4,[137]]]],[[11,[52,[[185,[11]]]],[52,[[185,[11]]]]],[[4,[137]]]],[[300,48]],[6,4],[[6,[12,[301]],[12,[302]]],4],[[[12,[6]],[0,[18,19]],[12,[301]],[12,[302]],304],4],[6,4],[[6,[52,[[185,[11]]]],[52,[[185,[11]]]]],[[4,[137]]]],[[301,13],14],[[301,13],14],[[302,13],14],[[302,13],14],[[85,13],14],[[85,13],14],[[303,13],14],[[304,13],14],[[305,13],14],[[306,13],14],[[307,13],14],[[308,13],14],[[309,13],14],[[310,13],14],[[311,13],14],[[300,13],14],[[300,13],14],[[300,13],14],[[300,13],14],[[300,13],14],[[312,13],14],[[313,13],14],[[],[[4,[303]]]],[[6,308],[[4,[[12,[128]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[314,312],[[]],[315,313],[40,[[12,[300]]]],[40,300],[40,300],[302,[[4,[[12,[313]]]]]],[48,300],[29,[[4,[[12,[312]]]]]],[29,[[4,[[12,[313]]]]]],[199,301],[195,302],[86,85],[301,[[4,[[12,[312]]]]]],[6,4],[[6,49],4],0,[[],[[4,[316]]]],[[],302],[[],301],[[],302],[[11,302],[[4,[[113,[302]]]]]],[[],[[4,[[113,[302]]]]]],[[[52,[51]]],[[4,[11]]]],[[[12,[85]]],[[4,[85]]]],[[],85],[[],85],[[],85],[[],[[4,[311]]]],[[],[[4,[310]]]],[[[12,[85]]],[[4,[85]]]],[[],85],[[],301],0,0,[[301,16]],[[302,16]],[[85,16]],[[308,16]],[[309,16]],[[300,16]],[[11,302],4],[[300,300]],[[300,300],300],[[300,300],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[300,1],[303,1],[300,1],[303,1],[301,1],[6,[[4,[1]]]],[[[12,[6]],[0,[18,19]],[12,[6]],[0,[18,19]],306],4],[[6,49,305],[[4,[49]]]],[[6,143,305],[[4,[143]]]],0,[[[0,[18,19]],21],4],[[[0,[18,19]],21],4],[[[12,[6]],[0,[18,19]],21],4],[[[0,[18,19]]],4],0,0,[300,300],[[],85],[[85,85],[[12,[45]]]],[[300,300],[[12,[45]]]],0,0,[[[0,[18,19]],308],[[4,[[12,[128]]]]]],[[]],[[],[[22,[28]]]],[20,4],[[[0,[18,19]],[0,[18,19]]],4],[[6,[52,[51]]],[[4,[2]]]],0,0,[[300,300]],0,0,[[300,300,1]],[302,4],[301,4],[302,302],[301,301],[302,4],[[[52,[302]]],4],[[[185,[317]]],4],[[85,85],4],[[302,302,302],4],[[301,301,301],4],[[],[[4,[85]]]],[301,4],0,[42,42],[[300,300],300],[[300,300]],[[[0,[18,19]],[12,[6]],[0,[18,19]]],4],[[300,300],300],[[]],[309,[[4,[[12,[128]]]]]],[40,[[4,[85]]]],[[40,85],4],[[],85],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],26],[[300,300]],[[[0,[18,19]],49],4],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[6,[[4,[316]]]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,[[300,300],300],[[[0,[18,19]]],4],[[[12,[6]],[0,[18,19]],307],4],[[6,[52,[51]]],[[4,[2]]]],0,[[],4],[[[0,[18,19]]],4],[[],[[12,[42]]]],[42,[[12,[42]]]]],"c":[172,245,280,286,288,301,305,1499,3277,4055,4056],"p":[[15,"bool"],[15,"usize"],[8,"FnOnce"],[6,"Result"],[3,"Dir"],[6,"RawFd"],[3,"Entry"],[4,"Type"],[3,"Iter"],[3,"OwningIter"],[3,"CStr"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"IntoRawFd"],[8,"Hasher"],[15,"u64"],[8,"Sized"],[8,"NixPath"],[3,"OFlag"],[3,"Mode"],[4,"Result"],[3,"TypeId"],[3,"ClearEnvError"],[3,"Demand"],[3,"String"],[4,"Errno"],[6,"Error"],[15,"str"],[15,"i32"],[8,"ErrnoSentinel"],[8,"PartialEq"],[3,"Error"],[3,"AtFlags"],[3,"RenameFlags"],[3,"SealFlag"],[3,"FdFlag"],[3,"SpliceFFlags"],[3,"FallocateFlags"],[6,"c_int"],[15,"u32"],[6,"c_uint"],[4,"FlockArg"],[4,"PosixFadviseAdvice"],[4,"Ordering"],[6,"loff_t"],[4,"FcntlArg"],[8,"IntoIterator"],[6,"off_t"],[3,"OsString"],[15,"u8"],[15,"slice"],[3,"IoVec"],[3,"InterfaceAddress"],[3,"InterfaceAddressIterator"],[3,"ModuleInitFlags"],[3,"DeleteModuleFlags"],[8,"AsRawFd"],[3,"MsFlags"],[3,"MntFlags"],[6,"c_ulong"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[6,"mq_attr_member_t"],[6,"mqd_t"],[3,"CString"],[3,"InterfaceFlags"],[3,"Interfaces"],[3,"Interface"],[3,"InterfacesIter"],[3,"PollFlags"],[3,"PollFd"],[6,"c_short"],[3,"TimeSpec"],[3,"SigSet"],[3,"PtyMaster"],[3,"Winsize"],[3,"OpenptyResult"],[3,"ForkptyResult"],[6,"Result"],[3,"Error"],[8,"Into"],[3,"Termios"],[3,"Pid"],[6,"SessionId"],[3,"CloneFlags"],[6,"CloneCb"],[3,"CpuSet"],[4,"AioCancelStat"],[3,"AioCb"],[3,"Box"],[3,"Pin"],[15,"isize"],[3,"LioCb"],[4,"AioFsyncMode"],[4,"LioOpcode"],[4,"LioMode"],[3,"LioCbBuilder"],[4,"SigevNotify"],[4,"c_void"],[3,"SigEvent"],[3,"EpollFlags"],[3,"EpollCreateFlags"],[4,"EpollOp"],[3,"EpollEvent"],[3,"EfdFlags"],[3,"Inotify"],[3,"AddWatchFlags"],[3,"WatchDescriptor"],[3,"InitFlags"],[3,"InotifyEvent"],[3,"Vec"],[3,"MemFdCreateFlag"],[3,"ProtFlags"],[3,"MapFlags"],[3,"MRemapFlags"],[3,"MsFlags"],[3,"MlockAllFlags"],[4,"MmapAdvise"],[6,"size_t"],[3,"Persona"],[6,"Pthread"],[4,"Signal"],[3,"Options"],[4,"Request"],[4,"Event"],[6,"c_long"],[3,"user_regs_struct"],[3,"siginfo_t"],[6,"AddressType"],[3,"QuotaValidFlags"],[3,"Dqblk"],[4,"QuotaType"],[4,"QuotaFmt"],[4,"RebootMode"],[4,"Infallible"],[4,"Resource"],[6,"rlim_t"],[3,"FdSet"],[3,"Fds"],[3,"TimeVal"],[6,"off64_t"],[3,"SaFlags"],[3,"sigset_t"],[3,"SignalIterator"],[4,"SigmaskHow"],[4,"SigHandler"],[3,"SigAction"],[3,"sigevent"],[3,"SfdFlags"],[3,"SignalFd"],[3,"siginfo"],[3,"SockFlag"],[3,"LinkAddr"],[15,"array"],[3,"AlgAddr"],[3,"MsgFlags"],[3,"Ipv4Addr"],[3,"UnixAddr"],[4,"SockAddr"],[3,"sockaddr_un"],[3,"VsockAddr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_storage"],[3,"msghdr"],[3,"cmsghdr"],[4,"AddressFamily"],[4,"InetAddr"],[4,"IpAddr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[4,"SockType"],[4,"SockProtocol"],[3,"UnixCredentials"],[3,"IpMembershipRequest"],[3,"Ipv6MembershipRequest"],[3,"RecvMsg"],[3,"CmsgIterator"],[4,"ControlMessageOwned"],[4,"ControlMessage"],[4,"Shutdown"],[8,"AsRef"],[8,"Debug"],[3,"SendMmsgData"],[3,"RecvMmsgData"],[3,"ucred"],[4,"SocketAddr"],[4,"IpAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[8,"GetSockOpt"],[6,"gid_t"],[15,"u16"],[3,"Path"],[8,"SetSockOpt"],[6,"uid_t"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"IpFreebind"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"TcpMaxSeg"],[3,"TcpKeepCount"],[3,"TcpRepair"],[3,"TcpKeepInterval"],[3,"TcpUserTimeout"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[3,"BindToDevice"],[3,"OriginalDst"],[3,"Ip6tOriginalDst"],[3,"ReceiveTimestamp"],[3,"ReceiveTimestampns"],[3,"IpTransparent"],[3,"Mark"],[3,"PassCred"],[3,"TcpCongestion"],[3,"Ipv4PacketInfo"],[3,"Ipv6RecvPacketInfo"],[3,"UdpGsoSegment"],[3,"UdpGroSegment"],[3,"RxqOvfl"],[3,"Ipv6V6Only"],[3,"Ipv4RecvErr"],[3,"Ipv6RecvErr"],[3,"Ipv4Ttl"],[3,"Ipv6Ttl"],[3,"AlgSetAeadAuthSize"],[8,"Clone"],[3,"AlgSetKey"],[3,"linger"],[15,"i8"],[3,"FileStat"],[3,"SFlag"],[6,"mode_t"],[4,"FchmodatFlags"],[4,"UtimensatFlags"],[6,"dev_t"],[3,"Statfs"],[6,"__fsword_t"],[3,"FsType"],[6,"fsid_t"],[3,"FsFlags"],[3,"Statvfs"],[6,"fsblkcnt_t"],[6,"fsfilcnt_t"],[3,"SysInfo"],[3,"Duration"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[6,"tcflag_t"],[4,"BaudRate"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[4,"SpecialCharacterIndices"],[3,"termios"],[6,"speed_t"],[3,"timespec"],[3,"timeval"],[15,"i64"],[6,"time_t"],[6,"suseconds_t"],[3,"TimerFlags"],[3,"TimerSetTimeFlags"],[3,"TimerFd"],[4,"ClockId"],[4,"Expiration"],[3,"RemoteIoVec"],[8,"Hash"],[3,"UtsName"],[3,"WaitPidFlag"],[4,"WaitStatus"],[3,"ClockId"],[6,"clockid_t"],[3,"UContext"],[3,"AccessFlags"],[3,"Uid"],[3,"Gid"],[4,"ForkResult"],[4,"FchownatFlags"],[4,"Whence"],[4,"LinkatFlags"],[4,"UnlinkatFlags"],[4,"PathconfVar"],[4,"SysconfVar"],[3,"ResUid"],[3,"ResGid"],[3,"User"],[3,"Group"],[3,"passwd"],[3,"group"],[3,"PathBuf"],[3,"OsStr"],[13,"SigevSignal"],[13,"SigevThreadId"],[8,"TimeValLike"],[13,"Parent"]]},\
"ppv_lite86":{"doc":"","t":"IIIIIIIIIIQIIIIIIIIIIIIIKKOOOKKKKKKLLLLKKKKKKKKKKKKKKKKKKKKKKKKKIQIQIQIQIQIQIQIQIQIQKLLKKKLLCCCKKKAGGDDDDDDGGGDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLTTTLLLLLLLLLLLLLLL","n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"ppv_lite86"],[99,"ppv_lite86::x86_64"]],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to take …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,30,31,0,0,0,32,33,7,32,33,34,34,34,34,34,35,35,35,35,35,35,36,35,35,37,37,37,38,38,38,39,39,39,39,39,39,39,7,40,41,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,6,34,34,42,4,4,34,34,0,0,0,43,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,21,22,23,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,21,22,22,23,19,20,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,22,23,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,21,0,0,0,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,[1],[1],[[]],[1],[1],[[]],[[[3,[2]]],4],[[[3,[2]]],4],[[[3,[2]]],4],[[[3,[2]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[5,5,5,5]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],6],[[],6],[[]],[[[3,[2]]]],[[[3,[2]]]],[[],7],[[],7],0,0,0,[[]],[[[3,[2]]]],[[[3,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[[[19,[18,18,18]]],[[19,[18,18,18]]]],[[[20,[18]]],[[20,[18]]]],[21,21],[22,22],[23,23],[[],21],[[],22],[[],23],[[21,21],24],[[22,22],24],[[23,23],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[1]]],21],[[]],[[]],[[[25,[26]]],22],[[]],[[],[[19,[27,27,27]]]],[[],[[20,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[21]]],22],[[[25,[21]]],23],[22,[[25,[21]]]],[23,[[25,[21]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[21,21],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[15,"u32"],[15,"u8"],[15,"slice"],[8,"StoreBytes"],[8,"Sized"],[8,"Store"],[8,"MultiLane"],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[8,"Clone"],[3,"SseMachine"],[3,"Avx2Machine"],[19,"vec128_storage"],[19,"vec256_storage"],[19,"vec512_storage"],[15,"bool"],[15,"array"],[15,"u64"],[8,"Copy"],[4,"Result"],[3,"TypeId"],[8,"AndNot"],[8,"BSwap"],[8,"Vec2"],[8,"Vec4"],[8,"Machine"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"Vector"],[8,"Vec4Ext"],[8,"UnsafeFrom"],[8,"VZip"]]},\
"pwm_pca9685":{"doc":"This is a platform agnostic Rust driver for the PCA9685 …","t":"DNNNNNNNNNNNNNNNNNNENEENNNNNNNENEEDENNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Address","All","AllCall","C0","C1","C10","C11","C12","C13","C14","C15","C2","C3","C4","C5","C6","C7","C8","C9","Channel","Direct","DisabledOutputValue","Error","HighImpedance","I2C","InvalidInputData","Inverted","OnAck","OnStop","OpenDrain","OutputDriver","OutputDriver","OutputLogicState","OutputStateChange","Pca9685","ProgrammableAddress","Subaddress1","Subaddress2","Subaddress3","TotemPole","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","destroy","disable","disable_programmable_address","enable","enable_programmable_address","enable_restart_and_disable","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","nb","new","reset_internal_driver_state","restart","restart_nonblocking","set_address","set_all_on_off","set_channel_full_off","set_channel_full_on","set_channel_off","set_channel_on","set_channel_on_off","set_disabled_output_value","set_output_change_behavior","set_output_driver","set_output_logic_state","set_prescale","set_programmable_address","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_external_clock"],"q":[[0,"pwm_pca9685"]],"d":["I2C device address","All channels","LED all call address","Channel 0","Channel 1","Channel 10","Channel 11","Channel 12","Channel 13","Channel 14","Channel 15","Channel 2","Channel 3","Channel 4","Channel 5","Channel 6","Channel 7","Channel 8","Channel 9","Output channel selection","Output logic state is not inverted (default).","Value set to all outputs when the output drivers are …","All possible errors in this crate","Set all outputs to high-impedance.","I²C bus error","Invalid input data provided","Output logic state is inverted.","Outputs change on ACK.","Outputs change on STOP. (default)","Open-drain configuration","Output driver configuration","Set all outputs to a value dependent on the <code>OutputDriver</code> …","Output logic state inversion","Output state change behavior","PCA9685 PWM/Servo/LED controller.","Additional programmable address types (volatile …","Subaddress 1","Subaddress 2","Subaddress 3","Totem pole configuration (default).","Set all outputs to 0 (default).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Destroy driver instance, return I²C bus instance.","Disable the controller (sleep).","Disable responding to programmable address","Enable the controller.","Enable responding to programmable address","Put the controller to sleep while keeping the PWM register …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new instance of the device.","Reset the internal state of this driver to the default …","Re-enable the controller after a sleep with restart …","Re-enable the controller after a sleep with restart …","Sets the address used by the driver for communication.","Set the <code>ON</code> and <code>OFF</code> counter for each channel at once.","Set the channel always off.","Set the channel always on.","Set the <code>OFF</code> counter for the selected channel.","Set the <code>ON</code> counter for the selected channel.","Set the <code>ON</code> and <code>OFF</code> counters for the selected channel.","Set the output value when outputs are disabled (<code>OE</code> = 1).","Set the output change behavior. Either byte-by-byte or all …","Set the output driver configuration.","Set the output logic state","Set the prescale value.","Set one of the programmable addresses.","","","","","","","","","","","Will return an empty error for a value outside the range […","Will return an empty error for a value outside the range […","Will return an empty error for a value outside the range […","","","","","","","","","","","","","","","","","","","","","","","","","Enable using the EXTCLK pin as clock source input."],"i":[0,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,5,12,12,2,3,3,4,0,5,0,0,0,0,6,6,6,4,5,9,12,1,2,3,4,5,6,7,9,12,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,9,2,3,4,5,7,9,9,9,9,9,9,1,2,3,4,5,6,7,9,12,1,2,3,4,5,6,7,9,12,1,2,3,4,5,6,7,7,7,9,12,1,2,3,4,5,6,7,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,2,3,4,5,6,7,9,12,1,1,1,1,2,3,4,5,6,7,9,12,1,2,3,4,5,6,7,9,12,1,2,3,4,5,6,7,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[9,[8]]]],[[],2],[[],3],[[],4],[[],5],[[],7],[[[9,[[0,[10,11]]]]],[[0,[10,11]]]],[[[9,[[0,[10,11]]]]],[[13,[12]]]],[[[9,[[0,[10,11]]]],6],[[13,[12]]]],[[[9,[[0,[10,11]]]]],[[13,[12]]]],[[[9,[[0,[10,11]]]],6],[[13,[12]]]],[[[9,[[0,[10,11]]]]],[[13,[12]]]],[[1,1],14],[[2,2],14],[[3,3],14],[[4,4],14],[[5,5],14],[[6,6],14],[[7,7],14],[[[9,[15]],16],17],[[[12,[15]],16],17],[[1,16],17],[[2,16],17],[[3,16],17],[[4,16],17],[[5,16],17],[[6,16],17],[[7,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[0,[10,11]],[19,[7]]],[[13,[[9,[[0,[10,11]]]],12]]]],[[[9,[[0,[10,11]]]]]],[[[9,[[0,[10,11]]]],[21,[20]]],[[13,[12]]]],[[[9,[[0,[10,11]]]]],[[22,[12]]]],[[[9,[[0,[10,11]]]],[19,[7]]],[[13,[12]]]],[[[9,[[0,[10,11]]]],[23,[20]],[23,[20]]],[[13,[12]]]],[[[9,[[0,[10,11]]]],1],[[13,[12]]]],[[[9,[[0,[10,11]]]],1,20],[[13,[12]]]],[[[9,[[0,[10,11]]]],1,20],[[13,[12]]]],[[[9,[[0,[10,11]]]],1,20],[[13,[12]]]],[[[9,[[0,[10,11]]]],1,20,20],[[13,[12]]]],[[[9,[[0,[10,11]]]],5],[[13,[12]]]],[[[9,[[0,[10,11]]]],3],[[13,[12]]]],[[[9,[[0,[10,11]]]],4],[[13,[12]]]],[[[9,[[0,[10,11]]]],2],[[13,[12]]]],[[[9,[[0,[10,11]]]],18],[[13,[12]]]],[[[9,[[0,[10,11]]]],6,[19,[7]]],[[13,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[20,[[13,[1]]]],[18,[[13,[1]]]],[24,[[13,[1]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[[9,[[0,[10,11]]]]],[[13,[12]]]]],"c":[],"p":[[4,"Channel"],[4,"OutputLogicState"],[4,"OutputStateChange"],[4,"OutputDriver"],[4,"DisabledOutputValue"],[4,"ProgrammableAddress"],[3,"Address"],[8,"Default"],[3,"Pca9685"],[8,"Write"],[8,"WriteRead"],[4,"Error"],[4,"Result"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u8"],[8,"Into"],[15,"u16"],[8,"DelayUs"],[6,"Result"],[15,"array"],[15,"usize"],[3,"TypeId"]]},\
"rand":{"doc":"Utilities for random number generation","t":"SIDISIIQILLLALLKLLLLLLLKLLLLLLLLLLLKKALFLLALLLLLALLFLKLLKLLLLNDDEDDIINNNDDDDNDEDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLAIIIQDDDDDIQKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCAIDLLLLLLLLLLCCCCCCCCCCCDDDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLQIDILLKLKLLKKLKKLLALLLLKKLLLLLEEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLL","n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","provide","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Slice","Standard","TooMany","Uniform","WeightedError","WeightedIndex","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","new","next","provide","provide","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","update_weights","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","WeightedError","WeightedIndex","alias_method","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","StdRng","ThreadRng","adapter","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","equivalent","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","provide","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","equivalent","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"rand"],[61,"rand::distributions"],[333,"rand::distributions::uniform"],[478,"rand::distributions::weighted"],[481,"rand::distributions::weighted::alias_method"],[493,"rand::prelude"],[504,"rand::rngs"],[566,"rand::rngs::adapter"],[615,"rand::rngs::mock"],[635,"rand::seq"],[665,"rand::seq::index"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than <code>u32::MAX</code>…","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","Update a subset of weights, without changing the number of …","","","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,84,0,1,1,1,0,31,31,12,1,1,1,1,1,84,84,84,31,31,31,31,31,31,31,31,1,1,1,12,12,0,1,0,1,12,0,31,31,31,31,84,0,1,1,0,1,4,31,31,12,1,1,1,1,43,0,0,0,0,0,0,0,36,43,43,0,0,0,0,43,0,0,0,95,33,34,35,36,28,48,37,38,33,40,42,43,44,34,35,36,28,48,37,38,33,40,42,43,44,34,35,36,37,38,33,40,42,43,44,34,35,36,37,38,33,40,42,43,44,34,35,36,42,43,44,36,43,35,36,36,28,48,37,38,33,40,42,43,43,44,34,35,36,28,48,37,38,33,40,42,43,44,44,44,34,35,35,36,28,48,37,38,33,40,42,43,44,34,28,27,27,35,40,42,28,36,43,27,35,48,37,37,38,38,33,40,42,44,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,27,27,95,95,28,35,36,37,38,33,40,42,43,44,34,36,43,35,36,28,48,37,38,33,40,42,43,44,34,35,36,28,48,37,38,33,40,42,43,44,34,35,36,28,48,37,38,33,40,42,43,44,34,0,42,35,36,28,48,37,38,33,40,42,43,44,34,0,0,0,0,15,0,0,0,0,0,0,96,76,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,74,72,73,74,75,72,73,74,75,72,73,74,75,16,96,44,72,72,72,72,72,72,72,72,72,72,72,72,73,74,74,75,96,44,72,72,72,72,72,72,72,72,72,72,72,72,73,74,74,75,96,72,72,72,72,72,72,72,72,72,72,72,72,73,74,74,75,16,96,72,72,72,72,72,72,72,72,72,72,72,72,74,74,96,72,72,72,72,72,72,72,72,72,72,72,72,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,0,0,0,0,0,79,79,79,79,79,79,79,79,79,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,82,29,81,82,29,81,82,29,81,82,29,81,82,29,81,29,82,82,81,82,29,81,82,29,81,82,29,82,82,81,82,29,0,81,82,29,81,82,29,81,82,29,81,82,29,81,82,29,81,82,29,81,82,29,81,82,29,0,0,0,85,87,88,85,87,88,85,85,85,87,85,87,88,88,85,87,88,85,87,88,85,87,85,87,85,87,85,88,85,88,85,88,87,85,87,88,85,87,88,85,87,88,85,87,88,85,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,97,0,0,0,90,90,97,98,97,98,98,97,97,98,97,97,90,90,0,90,90,90,90,97,97,90,90,90,90,90,0,0,0,92,94,93,92,94,93,92,93,92,93,92,92,94,93,92,92,92,94,93,92,92,94,93,92,94,93,92,92,92,92,94,93,0,0,94,93,92,93,92,94,93,92,94,93,92,94,93,92,94,93],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[1,[[3,[2]]]],0,[[[0,[4,5]]]],[[[0,[4,5]]]],[[[7,[6]]]],[[1,8],[[10,[9]]]],[[1,8],[[10,[9]]]],[11,1],[2,1],[[]],[[]],[12,[[10,[1]]]],[[]],[[]],[[]],[13,14],[13,14],[[[16,[15]]],15],[[[16,[15]]],15],[[17,17],14],[[17,17],14],[1,18],[[]],[[[21,[[20,[18,19]]]]],1],[[],17],[[],22],0,[23],[[]],[1,[[3,[24]]]],[[12,[7,[6]]],[[10,[25,26]]]],0,[27],[27],[[5,27],[[28,[27,5]]]],[[5,27],[[28,[27,5]]]],[22],0,[1,[[3,[18]]]],[1,[[20,[18,19]]]],[[],29],[[],30],[[[0,[31,5]]],[[10,[1]]]],[[[0,[4,5]]],[[10,[1]]]],[[[0,[4,5]]],[[10,[1]]]],[[[7,[6]]],[[10,[1]]]],[[],10],[[],10],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[0,[31,5]],30,25]],[[33,[0,[31,5]],30,25]],[[34,[0,[31,5]],30,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[36,36],[37,37],[38,38],[33,33],[[[40,[39]]],[[40,[39]]]],[[[42,[[0,[39,15,41]]]]],[[42,[[0,[39,15,41]]]]]],[43,43],[[[44,[[0,[39,15]]]]],[[44,[[0,[39,15]]]]]],[34,34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[35,35],14],[[36,36],14],[[[42,[[0,[45,15,41]]]],[42,[[0,[45,15,41]]]]],14],[[43,43],14],[[[44,[[0,[45,15]]]],[44,[[0,[45,15]]]]],14],[[],14],[[],14],[[35,8],46],[[36,8],46],[[36,8],46],[[[28,[47,47,47]],8],46],[[[48,[47,47,47,47]],8],46],[[37,8],46],[[38,8],46],[[33,8],46],[[[40,[47]],8],46],[[[42,[[0,[47,15,41]]]],8],46],[[43,8],46],[[43,8],46],[[[44,[[0,[47,15]]]],8],46],[[34,8],46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[49,[15]]],[[44,[15]]]],[[]],[[[50,[15]]],[[44,[15]]]],[[]],[[17,17],[[10,[35,36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[5,51],[[48,[5,51]]]],[[5,51],[[48,[5,51]]]],[13,[[10,[35,36]]]],[7,[[10,[40,0]]]],[52,[[10,[[42,[[0,[[53,[[0,[[53,[[0,[[53,[[0,[53,39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],43]]]],[[[28,[27,31]]],3],[23],[23],[[[0,[31,5]]]],[[35,[0,[31,5]]],14],[[[48,[27,51]],[0,[31,5]]]],[[37,[0,[31,5]]],13],[[37,[0,[31,5]]],55],[[38,[0,[31,5]]],13],[[38,[0,[31,5]]],55],[[33,[0,[31,5]]],6],[[40,[0,[31,5]]]],[[[42,[[0,[15,41]]]],[0,[31,5]]],25],[[[44,[15]],[0,[31,5]]],15],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],57],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],25],[[34,[0,[31,5]]],58],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],2],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],3],[[34,[0,[31,5]]],59],[[34,[0,[31,5]]],60],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],61],[[34,[0,[31,5]]],24],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],14],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],13],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],62],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],63],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],64],[[34,[0,[31,5]]],65],[[34,[0,[31,5]]],66],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]]],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],6],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],17],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],67],[[34,[0,[31,5]]],68],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],69],[[34,[0,[31,5]]],55],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]]],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],22],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],70],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]]],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]],56],[[34,[0,[31,5]]]],[[5,31],[[28,[5,31]]]],[[5,31],[[28,[5,31]]]],[[[0,[31,5]],25],30],[[[0,[31,5]],25],30],[[[28,[27,31]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,[[[42,[[0,[[53,[[0,[[53,[[0,[[53,[[0,[53,71,39,54]],[0,[15,41]]]],[71,[[0,[53,71,39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],[71,[[0,[[53,[[0,[53,71,39,54]],[0,[15,41]]]],[71,[[0,[53,71,39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],[71,[[0,[[53,[[0,[[53,[[0,[53,71,39,54]],[0,[15,41]]]],[71,[[0,[53,71,39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],[71,[[0,[[53,[[0,[53,71,39,54]],[0,[15,41]]]],[71,[[0,[53,71,39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],39,54]],[0,[15,41]]]],7],[[10,[43]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[72,[39]]],[[72,[39]]]],[73,73],[[[74,[39]]],[[74,[39]]]],[75,75],[[]],[[]],[[]],[[]],[[[72,[45]],[72,[45]]],14],[[[74,[45]],[74,[45]]],14],[[[72,[47]],8],46],[[73,8],46],[[[74,[47]],8],46],[[75,8],46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[[0,[76,5]],[0,[76,5]]]],[[[0,[[76,[15]],5]],[0,[[76,[15]],5]]],[[44,[15]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[22]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[58]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[6]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[69]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[66]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[68]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[17]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[25]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[67]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[62]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[24]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[57]]]],[[[0,[76,5]],[0,[76,5]]],73],[[[0,[76,5]],[0,[76,5]]],[[74,[13]]]],[[[0,[76,5]],[0,[76,5]]],[[74,[55]]]],[[[0,[76,5]],[0,[76,5]]],75],[[[0,[76,5]],[0,[76,5]]]],[[[0,[[76,[15]],5]],[0,[[76,[15]],5]]],[[44,[15]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[22]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[68]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[6]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[57]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[58]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[69]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[24]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[67]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[62]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[17]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[66]]]],[[[0,[76,5]],[0,[76,5]]],[[72,[25]]]],[[[0,[76,5]],[0,[76,5]]],73],[[[0,[76,5]],[0,[76,5]]],[[74,[13]]]],[[[0,[76,5]],[0,[76,5]]],[[74,[55]]]],[[[0,[76,5]],[0,[76,5]]],75],[[[0,[31,5]]]],[[[72,[24]],[0,[31,5]]]],[[[72,[25]],[0,[31,5]]]],[[[72,[66]],[0,[31,5]]]],[[[72,[67]],[0,[31,5]]]],[[[72,[22]],[0,[31,5]]]],[[[72,[62]],[0,[31,5]]]],[[[72,[6]],[0,[31,5]]]],[[[72,[17]],[0,[31,5]]]],[[[72,[57]],[0,[31,5]]]],[[[72,[68]],[0,[31,5]]]],[[[72,[58]],[0,[31,5]]]],[[[72,[69]],[0,[31,5]]]],[[73,[0,[31,5]]]],[[[74,[55]],[0,[31,5]]]],[[[74,[13]],[0,[31,5]]]],[[75,[0,[31,5]]],77],[[[0,[12,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[[0,[76,5]],[0,[76,5]],[0,[31,5]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[[79,[[0,[47,78]]]],8],46],[[]],[[]],[[[80,[78]]],[[10,[[79,[78]],43]]]],[[],10],[[],10],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[81,81],[82,82],[29,29],[[]],[[]],[[]],[[],81],[[],29],[[82,82],14],[[],14],[[81,[7,[6]]]],[[82,[7,[6]]]],[[29,[7,[6]]]],[[81,8],[[10,[9]]]],[[82,8],46],[[29,8],46],[[]],[[]],[[]],[12,[[10,[82,1]]]],[[],82],[[]],[[]],[[]],0,[81,17],[82,17],[29,17],[81,22],[82,22],[29,22],[[]],[[]],[[]],[[81,[7,[6]]],[[10,[1]]]],[[82,[7,[6]]],[[10,[1]]]],[[29,[7,[6]]],[[10,[1]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],32],[[],32],[[],32],[[]],[[]],[[]],0,0,0,[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[[85,[[0,[83,84,39]],[0,[12,39]]]]],[[85,[[0,[83,84,39]],[0,[12,39]]]]]],[[]],[[[87,[86]],[7,[6]]]],[[[85,[[0,[83,84]],12]],[7,[6]]]],[[[87,[47]],8],46],[[88,8],46],[[88,8],46],[[[85,[[0,[83,84,47]],[0,[12,47]]]],8],46],[[]],[[]],[[]],[[]],[[]],[[]],[86,[[87,[86]]]],[[[0,[83,84]],22,12],[[85,[[0,[83,84]],12]]]],[[[87,[86]]],17],[[[85,[[0,[83,84]],12]]],17],[[[87,[86]]],22],[[[85,[[0,[83,84]],12]]],22],[23],[[[85,[[0,[83,84]],12]]],[[10,[1]]]],[88,[[3,[18]]]],[[]],[[],30],[[[87,[86]],[7,[6]]],[[10,[1]]]],[[[85,[[0,[83,84]],12]],[7,[6]]],[[10,[1]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],32],[[],32],[[],32],[[]],[[]],[[]],0,[[]],[[]],[89,89],[[]],[[89,89],14],[[],14],[[89,[7,[6]]]],[[89,8],46],[[]],[[]],[[22,22],89],[89,17],[89,22],[[]],[[89,[7,[6]]],[[10,[1]]]],[[],10],[[],10],[[],32],[[]],0,0,0,0,[[]],[[]],[[[0,[31,5]]],3],[[[0,[31,5]]],3],[[[0,[31,5]],25],90],[[[0,[31,5]],25],80],[[[0,[31,5]],7],25],[[[0,[31,5]],25,51],[[10,[90,43]]]],[[[0,[31,5]]],3],[[[0,[31,5]]],3],[[[0,[31,5]],51],[[10,[43]]]],[[[0,[31,5]],51],[[10,[43]]]],[[[90,[[0,[47,5]],47]],8],46],[[]],0,[[]],[[]],[[[90,[[0,[[91,[25]],5]]]]],25],[[[90,[[0,[[91,[25]],5]]]]],3],[[[0,[31,5]],25]],[[[0,[31,5]]]],[[[90,[[0,[[91,[25]],5]]]]]],[[],10],[[],10],[[],32],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[92,92],[93,93],[[]],[[]],[[92,92],14],[[92,8],46],[[94,8],46],[[93,8],46],[[[80,[25]]],92],[[[80,[17]]],92],[[]],[[]],[[]],[[92,25],25],[[]],[[]],[[]],[92,93],[[]],[[]],[92,[[80,[25]]]],[92,14],[92,94],[92,25],[94,[[3,[25]]]],[93,3],[[[0,[31,5]],25,25],92],[[[0,[31,5]],25,51,25],[[10,[92,43]]]],[94],[93],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],32],[[],32],[[],32],[[]],[[]],[[]]],"c":[332,478,479,480,481,482,485,488,566,567],"p":[[3,"Error"],[3,"NonZeroU32"],[4,"Option"],[8,"Fill"],[8,"Sized"],[15,"u8"],[15,"slice"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Error"],[8,"RngCore"],[15,"f64"],[15,"bool"],[8,"SampleUniform"],[8,"SampleRange"],[15,"u32"],[8,"Error"],[3,"Global"],[3,"Box"],[8,"Into"],[15,"u64"],[3,"Demand"],[15,"i32"],[15,"usize"],[3,"Error"],[8,"Distribution"],[3,"DistIter"],[3,"ThreadRng"],[3,"String"],[8,"Rng"],[3,"TypeId"],[3,"Alphanumeric"],[3,"Standard"],[3,"Bernoulli"],[4,"BernoulliError"],[3,"OpenClosed01"],[3,"Open01"],[8,"Clone"],[3,"Slice"],[8,"PartialOrd"],[3,"WeightedIndex"],[4,"WeightedError"],[3,"Uniform"],[8,"PartialEq"],[6,"Result"],[8,"Debug"],[3,"DistMap"],[3,"RangeInclusive"],[3,"Range"],[8,"Fn"],[8,"IntoIterator"],[8,"AddAssign"],[8,"Default"],[15,"f32"],[15,"array"],[15,"u128"],[15,"i16"],[3,"NonZeroU64"],[15,"char"],[3,"NonZeroU8"],[15,"i8"],[3,"NonZeroU128"],[3,"Wrapping"],[3,"NonZeroU16"],[15,"i128"],[15,"i64"],[15,"u16"],[15,"isize"],[3,"NonZeroUsize"],[8,"SubAssign"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[8,"SampleBorrow"],[3,"Duration"],[8,"Weight"],[3,"WeightedIndex"],[3,"Vec"],[3,"OsRng"],[3,"StdRng"],[8,"BlockRngCore"],[8,"SeedableRng"],[3,"ReseedingRng"],[8,"Read"],[3,"ReadRng"],[3,"ReadError"],[3,"StepRng"],[3,"SliceChooseIter"],[8,"Index"],[4,"IndexVec"],[4,"IndexVecIntoIter"],[4,"IndexVecIter"],[8,"DistString"],[8,"UniformSampler"],[8,"SliceRandom"],[8,"IteratorRandom"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":"DDDDDDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"rand_chacha"]],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,3,4,5,5,6,7,7,2,3,4,5,6,7,2,4,6,3,5,7,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,3,5,7,0,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[7,7],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[3,[10,[9]]]],[[5,[10,[9]]]],[[7,[10,[9]]]],[[2,11],12],[[3,11],12],[[4,11],12],[[5,11],12],[[6,11],12],[[7,11],12],[[]],[[]],[2,3],[[]],[4,5],[[]],[[]],[6,7],[[]],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[2],[4],[6],[3,[[13,[9]]]],[5,[[13,[9]]]],[7,[[13,[9]]]],[3,14],[5,14],[7,14],[3,15],[5,15],[7,15],[[]],[[]],[[]],[[]],[[]],[[]],[3,16],[5,16],[7,16],[3,14],[5,14],[7,14],0,[[3,14]],[[5,14]],[[7,14]],[[3,15]],[[5,15]],[[7,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,[10,[9]]],[[18,[17]]]],[[5,[10,[9]]],[[18,[17]]]],[[7,[10,[9]]],[[18,[17]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[8,"RngCore"],[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"],[15,"bool"],[15,"u8"],[15,"slice"],[3,"Formatter"],[6,"Result"],[15,"array"],[15,"u64"],[15,"u128"],[15,"u32"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"rand_core":{"doc":"Random number generation traits","t":"SIIDSDIQIKLALLLLLLLLKLLLLLLLLLLKALLLALKLKLLLLLLLLLKLLLLLLLDDIQQLLLLLLLLLMMLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFF","n":["CUSTOM_START","CryptoRng","CryptoRngCore","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","as_rngcore","as_rngcore","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","provide","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","as_rngcore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":[[0,"rand_core"],[58,"rand_core::block"],[111,"rand_core::impls"],[117,"rand_core::le"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","An extension trait that is automatically implemented for …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Upcast to an <code>RngCore</code> trait object.","","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[3,0,0,0,3,0,0,29,0,30,2,0,3,2,3,2,2,2,3,2,1,2,3,3,2,3,3,3,2,29,29,29,0,3,3,2,0,3,1,2,1,2,3,3,1,29,3,3,2,3,1,2,3,2,3,2,3,2,0,0,0,24,24,26,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,24,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[[],1],[[],1],0,[[]],[[]],[[]],[[]],[2,2],[[]],[3,[[5,[4]]]],[[],2],[[[7,[6]]]],[[2,[7,[6]]]],[[3,8],9],[[3,8],9],[[2,8],9],[[]],[10,3],[4,3],[[]],[[]],[1,[[11,[3]]]],[[]],0,[3,12],[[]],[[]],0,[[[14,[[13,[12]]]]],3],[[],15],[2,15],[[],16],[2,16],[17],[3,[[5,[18]]]],[[1,[7,[6]]],[[11,[19,20]]]],[16],[3,[[5,[12]]]],[3,[[13,[12]]]],[[]],[[],21],[[[7,[6]]],[[11,[3]]]],[[2,[7,[6]]],[[11,[3]]]],[[],11],[[],11],[[],11],[[],11],[[],22],[[],22],0,0,0,0,0,[[],1],[[]],[[]],[[]],[[]],[[[26,[[0,[23,24,25]]]]],[[26,[[0,[23,24,25]]]]]],[[[27,[[0,[23,24,25]]]]],[[27,[[0,[23,24,25]]]]]],[[]],[[]],0,0,[[[26,[24]],[7,[6]]]],[[[27,[24]],[7,[6]]]],[[[26,[[0,[24,28]]]],8],9],[[[27,[[0,[24,28]]]],8],9],[[]],[[]],[1,[[11,[[26,[[0,[24,29]]]],3]]]],[1,[[11,[[27,[[0,[24,29]]]],3]]]],[[],[[26,[[0,[24,29]]]]]],[[],[[27,[[0,[24,29]]]]]],[[]],[[[26,[24]],19]],[[[27,[24]],19]],[[[26,[24]]],19],[[[27,[24]]],19],[[]],[[]],[24,[[26,[24]]]],[24,[[27,[24]]]],[[[26,[24]]],15],[[[27,[24]]],15],[[[26,[24]]],16],[[[27,[24]]],16],[[[26,[24]]]],[[[27,[24]]]],[16,[[26,[[0,[24,29]]]]]],[16,[[27,[[0,[24,29]]]]]],[[]],[[]],[[[26,[24]],[7,[6]]],[[11,[3]]]],[[[27,[24]],[7,[6]]],[[11,[3]]]],[[],11],[[],11],[[],11],[[],11],[[],22],[[],22],[[[0,[1,25]],[7,[6]]]],[[[7,[15]],[7,[6]]]],[[[7,[16]],[7,[6]]]],[[[0,[1,25]]],15],[[[0,[1,25]]],16],[[[0,[1,25]]],16],[[[7,[6]],[7,[15]]]],[[[7,[6]],[7,[16]]]]],"c":[],"p":[[8,"RngCore"],[3,"OsRng"],[3,"Error"],[3,"NonZeroU32"],[4,"Option"],[15,"u8"],[15,"slice"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[8,"Error"],[3,"Box"],[8,"Into"],[15,"u32"],[15,"u64"],[3,"Demand"],[15,"i32"],[15,"usize"],[3,"Error"],[3,"String"],[3,"TypeId"],[8,"Clone"],[8,"BlockRngCore"],[8,"Sized"],[3,"BlockRng"],[3,"BlockRng64"],[8,"Debug"],[8,"SeedableRng"],[8,"CryptoRngCore"]]},\
"serial_core":{"doc":"","t":"NNNNNNNNNNNNENNNNEDEENNNNNNENNNDGIIIQNNEKLMLLLLLLLLLLLLLLLLKLMLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLKLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLMALKKKKKKKKKKKLKLKKKLKLKKKLKKLKLMKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKCC","n":["Baud110","Baud115200","Baud1200","Baud19200","Baud2400","Baud300","Baud38400","Baud4800","Baud57600","Baud600","Baud9600","BaudOther","BaudRate","Bits5","Bits6","Bits7","Bits8","CharSize","Error","ErrorKind","FlowControl","FlowHardware","FlowNone","FlowSoftware","InvalidInput","Io","NoDevice","Parity","ParityEven","ParityNone","ParityOdd","PortSettings","Result","SerialDevice","SerialPort","SerialPortSettings","Settings","Stop1","Stop2","StopBits","baud_rate","baud_rate","baud_rate","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char_size","char_size","char_size","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","configure","description","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","flow_control","flow_control","flow_control","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_speed","into","into","into","into","into","into","into","into","kind","new","parity","parity","parity","prelude","provide","read_cd","read_cd","read_cts","read_cts","read_dsr","read_dsr","read_ri","read_ri","read_settings","reconfigure","set_baud_rate","set_baud_rate","set_char_size","set_char_size","set_dtr","set_dtr","set_flow_control","set_flow_control","set_parity","set_parity","set_rts","set_rts","set_stop_bits","set_stop_bits","set_timeout","set_timeout","speed","stop_bits","stop_bits","stop_bits","timeout","timeout","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_settings","SerialPort","SerialPortSettings"],"q":[[0,"serial_core"],[194,"serial_core::prelude"]],"d":["110 baud.","115,200 baud.","1200 baud.","19,200 baud.","2400 baud.","300 baud.","38,400 baud.","4800 baud.","57,600 baud.","600 baud.","9600 baud.","Non-standard baud rates.","Serial port baud rates.","5 bits per character.","6 bits per character.","7 bits per character.","8 bits per character.","Number of bits per character.","An error type for serial port operations.","Categories of errors that can occur when interacting with …","Flow control modes.","Flow control using RTS/CTS signals.","No flow control.","Flow control using XON/XOFF bytes.","A parameter was incorrect.","An I/O error occured.","The device is not available.","Parity checking modes.","Parity bit sets even number of 1 bits.","No parity bit.","Parity bit sets odd number of 1 bits.","A device-indepenent implementation of serial port settings.","A type for results generated by interacting with serial …","A trait for implementing serial devices.","A trait for serial port devices.","A trait for objects that implement serial port …","A type that implements the settings for the serial port …","One stop bit.","Two stop bits.","Number of stop bits.","Returns the current baud rate.","","Baud rate.","","","","","","","","","","","","","","","","","Returns the character size.","","Character size.","","","","","","","","","","","","","","","Configures a serial port device.","","","","","","","","","","","","","","","","Returns the flow control mode.","","Flow control mode.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>BaudRate</code> for a particular speed.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the corresponding <code>ErrorKind</code> for this error.","","Returns the parity-checking mode.","","Parity checking mode.","A module that exports traits that are useful to have in …","","Reads the state of the CD (Carrier Detect) control signal.","Reads the state of the CD (Carrier Detect) control signal.","Reads the state of the CTS (Clear To Send) control signal.","Reads the state of the CTS (Clear To Send) control signal.","Reads the state of the DSR (Data Set Ready) control signal.","Reads the state of the DSR (Data Set Ready) control signal.","Reads the state of the RI (Ring Indicator) control signal.","Reads the state of the RI (Ring Indicator) control signal.","Returns the device’s current settings.","Alter the serial port’s configuration.","Sets the baud rate.","","Sets the character size.","","Sets the state of the DTR (Data Terminal Ready) control …","Sets the state of the DTR (Data Terminal Ready) control …","Sets the flow control mode.","","Sets the parity-checking mode.","","Sets the state of the RTS (Request To Send) control signal.","Sets the state of the RTS (Request To Send) control signal.","Sets the number of stop bits.","","Sets the timeout for future I/O operations.","Sets the timeout for future I/O operations.","Returns the baud rate as an integer.","Returns the number of stop bits.","","Number of stop bits.","Returns the current timeout.","Returns the current timeout.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies new settings to the serial device.","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,0,4,4,4,4,0,0,0,0,8,8,8,5,5,5,0,6,6,6,0,0,0,0,0,25,7,7,0,26,3,3,5,10,1,4,6,7,8,3,5,10,1,4,6,7,8,3,26,3,3,5,1,4,6,7,8,3,5,1,4,6,7,8,3,27,10,5,1,4,6,7,8,3,5,1,4,6,7,8,3,26,3,3,5,10,10,1,4,6,7,8,3,5,10,10,1,4,6,7,8,3,1,5,10,1,4,6,7,8,3,10,10,26,3,3,0,10,25,27,25,27,25,27,25,27,25,27,26,3,26,3,25,27,26,3,26,3,25,27,26,3,25,27,1,26,3,3,25,27,5,1,4,6,7,8,3,10,5,10,1,4,6,7,8,3,5,10,1,4,6,7,8,3,5,10,1,4,6,7,8,3,25,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[3,[[2,[1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[2,[4]]]],[3,[[2,[4]]]],0,[5,5],[1,1],[4,4],[6,6],[7,7],[8,8],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,9],[10,11],[[5,5],12],[[1,1],12],[[4,4],12],[[6,6],12],[[7,7],12],[[8,8],12],[[3,3],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],[[2,[8]]]],[3,[[2,[8]]]],0,[[5,13],14],[[10,13],14],[[10,13],[[16,[15]]]],[[1,13],14],[[4,13],14],[[6,13],14],[[7,13],14],[[8,13],14],[[3,13],14],[[]],[[]],[17,10],[[]],[[]],[[]],[[]],[[]],[[]],[18,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,5],[[5,[20,[19]]],10],[[],[[2,[6]]]],[3,[[2,[6]]]],0,0,[21],[[],[[9,[12]]]],[[],[[9,[12]]]],[[],[[9,[12]]]],[[],[[9,[12]]]],[[],[[9,[12]]]],[[],[[9,[12]]]],[[],[[9,[12]]]],[[],[[9,[12]]]],[[],9],[22,9],[1,9],[[3,1],9],[4],[[3,4]],[12,9],[12,9],[8],[[3,8]],[6],[[3,6]],[12,9],[12,9],[7],[[3,7]],[23,9],[23,9],[1,18],[[],[[2,[7]]]],[3,[[2,[7]]]],0,[[],23],[[],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],9],0,0],"c":[],"p":[[4,"BaudRate"],[4,"Option"],[3,"PortSettings"],[4,"CharSize"],[4,"ErrorKind"],[4,"Parity"],[4,"StopBits"],[4,"FlowControl"],[6,"Result"],[3,"Error"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"Error"],[15,"usize"],[3,"String"],[8,"Into"],[3,"Demand"],[8,"Fn"],[3,"Duration"],[3,"TypeId"],[8,"SerialDevice"],[8,"SerialPortSettings"],[8,"SerialPort"]]},\
"serial_unix":{"doc":"Serial port implementation for Unix operating systems.","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["TTYPort","TTYSettings","as_raw_fd","baud_rate","borrow","borrow","borrow_mut","borrow_mut","char_size","clone","clone_into","configure","drop","flow_control","flush","fmt","from","from","into","into","open","parity","read","read_cd","read_cd","read_cts","read_cts","read_dsr","read_dsr","read_ri","read_ri","read_settings","reconfigure","set_baud_rate","set_char_size","set_dtr","set_dtr","set_flow_control","set_parity","set_rts","set_rts","set_stop_bits","set_timeout","set_timeout","stop_bits","timeout","timeout","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","write_settings"],"q":[[0,"serial_unix"]],"d":["A TTY-based serial port implementation.","Serial port settings for TTY devices.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Opens a TTY device as a serial port.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,3,1,3,1,3,3,3,3,1,1,3,1,3,1,3,1,3,1,3,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,3,3,1,1,3,1,1,3,1,1,3,1,3,1,3,1,3,1,1],"f":[0,0,[1,2],[3,[[5,[4]]]],[[]],[[]],[[]],[[]],[3,[[5,[6]]]],[3,3],[[]],[7,[[9,[8]]]],[1],[3,[[5,[10]]]],[1,11],[[3,12],13],[[]],[[]],[[]],[[]],[14,[[15,[1]]]],[3,[[5,[16]]]],[[1,[18,[17]]],[[11,[19]]]],[[],[[9,[20,8]]]],[1,[[15,[20]]]],[[],[[9,[20,8]]]],[1,[[15,[20]]]],[[],[[9,[20,8]]]],[1,[[15,[20]]]],[1,[[15,[20]]]],[[],[[9,[20,8]]]],[1,[[15,[3]]]],[21,[[9,[8]]]],[[3,4],15],[[3,6]],[20,[[9,[8]]]],[[1,20],15],[[3,10]],[[3,16]],[[1,20],15],[20,[[9,[8]]]],[[3,22]],[[1,23],15],[23,[[9,[8]]]],[3,[[5,[22]]]],[1,23],[[],23],[[]],[[],9],[[],9],[[],9],[[],9],[[],24],[[],24],[[1,[18,[17]]],[[11,[19]]]],[[1,3],15]],"c":[],"p":[[3,"TTYPort"],[6,"RawFd"],[3,"TTYSettings"],[4,"BaudRate"],[4,"Option"],[4,"CharSize"],[3,"PortSettings"],[3,"Error"],[4,"Result"],[4,"FlowControl"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"Path"],[6,"Result"],[4,"Parity"],[15,"u8"],[15,"slice"],[15,"usize"],[15,"bool"],[8,"Fn"],[4,"StopBits"],[3,"Duration"],[3,"TypeId"]]},\
"spidev":{"doc":"Spidev","t":"SSSSSSSSSSSSSSSSDDDCLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLMALLLLLLLLLLLLLLLLLLLGMLLMLMLLFFFFLMLLFFFFMDFFLLLL","n":["SPI_3WIRE","SPI_CPHA","SPI_CPOL","SPI_CS_HIGH","SPI_LOOP","SPI_LSB_FIRST","SPI_MODE_0","SPI_MODE_1","SPI_MODE_2","SPI_MODE_3","SPI_NO_CS","SPI_READY","SPI_RX_DUAL","SPI_RX_QUAD","SPI_TX_DUAL","SPI_TX_QUAD","SpiModeFlags","Spidev","SpidevOptions","SpidevTransfer","all","as_raw_fd","bitand","bitand_assign","bitor","bitor_assign","bits","bits_per_word","bits_per_word","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","cmp","complement","configure","contains","default","difference","empty","eq","eq","equivalent","extend","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","inner","insert","intersection","intersects","into","into","into","into_inner","is_all","is_empty","lsb_first","lsb_first","max_speed_hz","max_speed_hz","mode","new","new","not","open","partial_cmp","read","remove","set","spi_mode","spidevioctl","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","transfer","transfer_multiple","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","write","SpidevTransfer","bits_per_word","borrow","borrow_mut","cs_change","default","delay_usecs","fmt","from","get_bits_per_word","get_lsb_first","get_max_speed_hz","get_mode","into","pad","read","read_write","set_bits_per_word","set_lsb_first","set_max_speed_hz","set_mode","speed_hz","spi_ioc_transfer","transfer","transfer_multiple","try_from","try_into","type_id","write"],"q":[[0,"spidev"],[113,"spidev::spidevioctl"]],"d":["SI/SO Signals Shared","Clock Phase","Clock Polarity","Chipselect Active High?","Loopback Mode","Per-word Bits On Wire","","","","","1 dev/bus; no chipselect","Slave pulls low to pause","Receive with 2 wires","Receive with 4 wires","Transmit with 2 wires","Transmit with 4 wires","","Provide high-level access to Linux Spidev Driver","Options that control defaults for communication on a device","","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","The number of bits in each SPI transfer word","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Finalize and build the SpidevOptions","","","","","","Returns the complement of this set of flags.","Write the provided configuration to this device","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Get a reference to the underlying <code>File</code> object","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the object and get the underlying <code>File</code> object","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","The bit justification used to transfer SPI words","","The maximum SPI transfer speed, in Hz","","Set the SPI Transfer Mode","Wrap an already opened <code>File</code> for use as an spidev","Create a new, empty set of options","Returns the complement of this set of flags.","Open the spidev device with the provided path","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Perform a single transfer","Perform multiple transfers in a single system call to the …","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Representation of a spidev transfer that is shared with …","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","The <code>tx_buf</code> and <code>rx_buf</code> must be the same length.","","","","","","Structure that is used when performing communication with …","","","","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,2,1,1,1,1,1,5,5,1,1,1,2,5,1,2,5,5,1,5,1,5,1,1,2,1,5,1,1,1,5,1,1,2,1,1,1,1,1,2,5,1,2,5,1,1,1,1,1,2,1,1,1,1,2,5,2,1,1,5,5,5,5,5,2,5,1,2,1,2,1,1,5,0,1,1,1,1,5,1,2,2,1,2,5,1,2,5,1,2,5,1,2,0,23,23,23,23,23,23,23,23,0,0,0,0,23,23,23,23,0,0,0,0,23,0,0,0,23,23,23,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,3],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,4],[[5,6],5],0,[[1,1],1],[[1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[1,1],[5,5],[[]],[[]],[[1,1],7],[1,1],[[2,5],8],[[1,1],9],[[],5],[[1,1],1],[[],1],[[1,1],9],[[5,5],9],[[],9],[[1,10]],[2,8],[[1,11],12],[[1,11],12],[[1,11],12],[[1,11],12],[[1,11],12],[[2,11],12],[[5,11],12],[[]],[[]],[[]],[4,[[13,[1]]]],[4,1],[4,1],[10,1],[[1,14]],[2,15],[[1,1]],[[1,1],1],[[1,1],9],[[]],[[]],[[]],[2,15],[1,9],[1,9],[[5,9],5],0,[[5,4],5],0,[[5,1],5],[15,2],[[],5],[1,1],[[[17,[16]]],[[8,[2]]]],[[1,1],[[13,[7]]]],[[2,[18,[6]]],[[8,[19]]]],[[1,1]],[[1,1,9]],0,0,[[1,1],1],[[1,1]],[[1,1],1],[[]],[[]],[[1,1]],[[2,20],8],[[2,[18,[20]]],8],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[1,1],1],[[2,[18,[6]]],[[8,[19]]]],0,0,[[]],[[]],0,[[],23],0,[[23,11],12],[[]],[3,[[8,[6]]]],[3,[[8,[6]]]],[3,[[8,[4]]]],[3,[[8,[6]]]],[[]],0,[[[18,[6]]],23],[[[18,[6]],[18,[6]]],23],[[3,6],8],[[3,9],8],[[3,4],8],[[3,1],8],0,0,[[3,20],8],[[3,[18,[20]]],8],[[],21],[[],21],[[],22],[[[18,[6]]],23]],"c":[],"p":[[3,"SpiModeFlags"],[3,"Spidev"],[6,"RawFd"],[15,"u32"],[3,"SpidevOptions"],[15,"u8"],[4,"Ordering"],[6,"Result"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"Hasher"],[3,"File"],[3,"Path"],[8,"AsRef"],[15,"slice"],[15,"usize"],[6,"SpidevTransfer"],[4,"Result"],[3,"TypeId"],[3,"spi_ioc_transfer"]]},\
"sysfs_gpio":{"doc":"GPIO access under Linux using the GPIO sysfs interface","t":"NEEENNNNNNNNDDGNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLL","n":["BothEdges","Direction","Edge","Error","FallingEdge","High","In","InvalidPath","Io","Low","NoInterrupt","Out","Pin","PinPoller","Result","RisingEdge","Unexpected","Unsupported","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","drop","eq","eq","eq","equivalent","equivalent","equivalent","export","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_path","get_active_low","get_direction","get_edge","get_pin","get_pin","get_pin_num","get_poller","get_value","into","into","into","into","into","is_exported","new","new","poll","provide","set_active_low","set_direction","set_edge","set_value","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_unexport","type_id","type_id","type_id","type_id","type_id","unexport","with_exported"],"q":[[0,"sysfs_gpio"]],"d":["","","","","","","","Invalid Path","Simple IO error","","","","","","","","Read unusual data from sysfs file.","Operation not supported on target os","","","","","","","","","","","","","","","","","","","","","","","","","Export the GPIO","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new Pin with the provided path","Get polarity of the Pin (<code>true</code> is active low)","Get the direction of the Pin","Get the currently configured edge for this pin","Get the pin number for the Pin","Get the pin associated with this PinPoller","Get the pin number","Get a PinPoller object for this pin","Get the value of the Pin (0 or 1)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines whether the GPIO is exported","Create a new Pin with the provided <code>pin_num</code>","Create a new PinPoller for the provided pin number","Block until an interrupt occurs","","Set the polarity of the Pin (<code>true</code> is active low)","Set this GPIO as either an input or an output","Set the edge on which this GPIO will trigger when polled","Set the value of the Pin","","","","","","","","","","","","","","","","","","","","","Unexport the GPIO","Run a closure with the GPIO exported"],"i":[6,0,0,0,6,5,5,1,1,5,6,5,0,0,0,6,1,1,1,4,5,6,7,1,4,5,6,7,1,4,5,6,4,5,6,7,4,5,6,4,5,6,4,1,1,4,5,6,7,1,1,1,4,5,6,7,4,4,4,4,4,7,4,4,4,1,4,5,6,7,4,4,7,7,1,4,4,4,4,4,5,6,1,1,4,5,6,7,1,4,5,6,7,0,1,4,5,6,7,4,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[4,4],[5,5],[6,6],[[]],[[]],[[]],[7],[[4,4],8],[[5,5],8],[[6,6],8],[[],8],[[],8],[[],8],[4,9],[[1,10],11],[[1,10],11],[[4,10],11],[[5,10],11],[[6,10],11],[[7,10],11],[[]],[12,1],[13,1],[[]],[[]],[[]],[[]],[[[15,[14]]],[[9,[4]]]],[4,[[9,[8]]]],[4,[[9,[5]]]],[4,[[9,[6]]]],[4,16],[7,4],[4,16],[4,[[9,[7]]]],[4,[[9,[17]]]],[[]],[[]],[[]],[[]],[[]],[4,8],[16,4],[16,[[9,[7]]]],[[7,18],[[9,[[3,[17]]]]]],[19],[[4,8],9],[[4,5],9],[[4,6],9],[[4,17],9],[[]],[[]],[[]],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0,[[],22],[[],22],[[],22],[[],22],[[],22],[4,9],[[4,23],9]],"c":[],"p":[[4,"Error"],[8,"Error"],[4,"Option"],[3,"Pin"],[4,"Direction"],[4,"Edge"],[3,"PinPoller"],[15,"bool"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"Error"],[6,"Error"],[3,"Path"],[8,"AsRef"],[15,"u64"],[15,"u8"],[15,"isize"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"FnOnce"]]},\
"termios":{"doc":"The <code>termios</code> crate provides Rust bindings for the POSIX …","t":"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDCCCCCCCCCCCLLCFFFFFFLLLLLLALLLLACFCFFFFFFLLLLFFFFFFFFFFFFFACRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLLMMMMMGLLLLLLLGGDLLLL","n":["B0","B110","B1200","B134","B150","B1800","B19200","B200","B2400","B300","B38400","B4800","B50","B600","B75","B9600","BRKINT","CLOCAL","CREAD","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","ECHO","ECHOE","ECHOK","ECHONL","HUPCL","ICANON","ICRNL","IEXTEN","IGNBRK","IGNCR","IGNPAR","INLCR","INPCK","ISIG","ISTRIP","IXANY","IXOFF","IXON","NOFLSH","OCRNL","ONLCR","ONLRET","ONOCR","OPOST","PARENB","PARMRK","PARODD","TAB3","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCSADRAIN","TCSAFLUSH","TCSANOW","TOSTOP","Termios","VEOF","VEOL","VERASE","VINTR","VKILL","VMIN","VQUIT","VSTART","VSTOP","VSUSP","VTIME","borrow","borrow_mut","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","clone","clone_into","deref","deref_mut","eq","equivalent","ffi","fmt","from","from_fd","into","os","speed_t","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetsid","tcsendbreak","tcsetattr","to_owned","try_from","try_into","type_id","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","tcdrain","tcflow","tcflush","tcgetattr","tcgetsid","tcsendbreak","tcsetattr","linux","target","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BRKINT","BS0","BS1","BSDLY","CBAUD","CBAUDEX","CIBAUD","CLOCAL","CMSPAR","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","EXTA","EXTB","EXTPROC","FF0","FF1","FFDLY","FLUSHO","HUPCL","ICANON","ICRNL","IEXTEN","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INLCR","INPCK","ISIG","ISTRIP","IUCLC","IUTF8","IXANY","IXOFF","IXON","NCCS","NL0","NL1","NLDLY","NOFLSH","OCRNL","OFDEL","OFILL","OLCUC","ONLCR","ONLRET","ONOCR","OPOST","PARENB","PARMRK","PARODD","PENDIN","TAB0","TAB1","TAB2","TAB3","TABDLY","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCSADRAIN","TCSAFLUSH","TCSANOW","TOSTOP","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","XCASE","XTABS","borrow","borrow_mut","c_cc","c_cflag","c_iflag","c_lflag","c_oflag","cc_t","clone","clone_into","eq","equivalent","fmt","from","into","speed_t","tcflag_t","termios","to_owned","try_from","try_into","type_id"],"q":[[0,"termios"],[110,"termios::ffi"],[123,"termios::os"],[125,"termios::os::linux"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unix terminal I/O control structure.","","","","","","","","","","","","","","","Gets the input baud rate stored in a <code>Termios</code> structure.","Gets the output baud rate stored in a <code>Termios</code> structure.","Sets flags to disable all input and output processing.","Sets the input baud rate.","Sets the output baud rate.","Sets input and output baud rates.","","","","","","","Unsafe FFI bindings.","","Returns the argument unchanged.","Creates a <code>Termios</code> structure based on the current settings …","Calls <code>U::from(self)</code>.","OS-specific definitions.","","Blocks until all output written to the file descriptor is …","","Suspends or restarts transmission or reception of data.","Discards data waiting in the terminal device’s buffers.","Populates a <code>Termios</code> structure with parameters associated …","Returns the process group ID of the controlling terminal’…","Transmits data to generate a break condition.","Sets a terminal device’s parameterseturns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,0,0,0,4,4,4,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[1,2],[1,2],[1],[[1,2],3],[[1,2],3],[[1,2],3],[1,1],[[]],[1,4],[1,4],[[1,1],5],[[],5],0,[[1,6],7],[[]],[8,[[3,[1]]]],[[]],0,0,[8,3],0,[[8,9],3],[[8,9],3],[[8,1],3],[8,10],[[8,9],3],[[8,9,1],3],[[]],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,[4,4],[[]],[[4,4],5],[[],5],[[4,6],7],[[]],[[]],0,0,0,[[]],[[],11],[[],11],[[],12]],"c":[],"p":[[3,"Termios"],[6,"speed_t"],[6,"Result"],[3,"termios"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"RawFd"],[6,"c_int"],[6,"pid_t"],[4,"Result"],[3,"TypeId"]]},\
"void":{"doc":"Void","t":"IIELLLLLLLLLLLLLLLLLLFKK","n":["ResultVoidErrExt","ResultVoidExt","Void","borrow","borrow_mut","cause","clone","clone_into","description","eq","fmt","fmt","from","into","partial_cmp","provide","to_owned","to_string","try_from","try_into","type_id","unreachable","void_unwrap","void_unwrap_err"],"q":[[0,"void"]],"d":["Extensions to <code>Result&lt;Void, E&gt;</code>","Extensions to <code>Result&lt;T, Void&gt;</code>","The empty type for cases which can’t occur.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A safe version of <code>intrinsincs::unreachable</code>.","Get the value out of a wrapper.","Get the error out of a wrapper."],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,14,15],"f":[0,0,0,[[]],[[]],[1,[[3,[2]]]],[1,1],[[]],[1,4],[1,5],[[1,6],7],[[1,6],7],[[]],[[]],[1,[[3,[8]]]],[9],[[]],[[],10],[[],11],[[],11],[[],12],[1,13],[[]],[[]]],"c":[],"p":[[4,"Void"],[8,"Error"],[4,"Option"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Ordering"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"never"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
