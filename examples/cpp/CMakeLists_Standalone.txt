cmake_minimum_required(VERSION 3.10)
project(example)

include(ExternalProject)

if(NOT DEFINED NAVIGATOR_VERSION)
    set(NAVIGATOR_VERSION "0.0.1")
endif()

set(ZIP_URL "https://github.com/bluerobotics/navigator-lib/releases/download/${NAVIGATOR_VERSION}/cpp.zip")
set(ZIP_UNPACK_DIR "${CMAKE_BINARY_DIR}/navigator_zip_contents")
message(STATUS "Using Navigator lib version: ${NAVIGATOR_VERSION}")
message(STATUS "Identified system processor: ${CMAKE_SYSTEM_PROCESSOR}")

# Download released navigator lib files
ExternalProject_Add(
    navigator_zip
    URL ${ZIP_URL}
    DOWNLOAD_DIR "${CMAKE_BINARY_DIR}/navigator_zip_download"
    SOURCE_DIR ${ZIP_UNPACK_DIR}
    # Since this is not a cmake project but just files, we need to cleanup the commands
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
    TEST_COMMAND ""
)

# Adjust library path based on the system processor
if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "armv7")
    set(LIB_PATH_SUBDIR "armv7-unknown-linux-gnueabihf")
elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "armv8" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch64")
    set(LIB_PATH_SUBDIR "aarch64-unknown-linux-gnueabihf")
else()
    message(FATAL_ERROR "Unsupported architecture")
endif()

set(LIBRARY_PATH "${ZIP_UNPACK_DIR}/${LIB_PATH_SUBDIR}/libbluerobotics_navigator.so")

add_executable(simple simple.cpp)
add_dependencies(simple navigator_zip)

target_link_libraries(simple ${LIBRARY_PATH})

set_target_properties(simple PROPERTIES CXX_STANDARD 11 CXX_STANDARD_REQUIRED ON)
target_include_directories(simple PRIVATE "${ZIP_UNPACK_DIR}")
